{"version":3,"file":"static/js/923.2d8a14b5.chunk.js","mappings":"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","sources":["app/pages/question-bank/users-list/core/_requests.ts","app/pages/question-bank/users-list/core/QueryRequestProvider.tsx","app/pages/question-bank/users-list/core/QueryResponseProvider.tsx","app/pages/question-bank/users-list/core/ListViewProvider.tsx","app/pages/question-bank/users-list/components/Export.js","app/pages/question-bank/users-list/components/header/UsersListFilter.tsx","app/pages/question-bank/users-list/components/header/UserListToolbar.tsx","app/pages/question-bank/users-list/components/header/UsersListGrouping.tsx","app/pages/question-bank/users-list/components/header/UsersListSearchComponent.tsx","app/pages/question-bank/users-list/components/header/UsersListHeader.tsx","app/pages/question-bank/users-list/table/columns/CustomHeaderColumn.tsx","app/pages/question-bank/users-list/table/columns/CustomRow.tsx","app/pages/question-bank/users-list/table/columns/UserInfoCell.tsx","app/pages/question-bank/users-list/table/columns/UserLastLoginCell.tsx","app/pages/question-bank/users-list/table/columns/UserTwoStepsCell.tsx","app/pages/question-bank/users-list/table/columns/UserActionsCell.tsx","app/pages/question-bank/users-list/table/columns/UserSelectionCell.tsx","app/pages/question-bank/users-list/table/columns/UserCustomHeader.tsx","app/pages/question-bank/users-list/table/columns/UserSelectionHeader.tsx","app/pages/question-bank/users-list/commonData/CommonDataProvider.tsx","app/pages/question-bank/users-list/table/columns/Courses.tsx","app/pages/question-bank/users-list/table/columns/SubjectCell.tsx","app/pages/question-bank/users-list/table/columns/VerifiedCell.tsx","app/pages/question-bank/users-list/table/columns/_columns.tsx","app/pages/question-bank/users-list/components/loading/UsersListLoading.tsx","app/pages/question-bank/users-list/components/pagination/UsersListPagination.tsx","app/pages/question-bank/users-list/table/UsersTable.tsx","app/pages/question-bank/users-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/question-bank/users-list/core/_models.ts","app/pages/question-bank/users-list/steps/Step1.tsx","app/pages/question-bank/users-list/steps/Step2.tsx","app/pages/question-bank/users-list/user-edit-modal/UserEditModalForm.tsx","app/pages/question-bank/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/question-bank/users-list/user-edit-modal/UserEditModal.tsx","app/pages/question-bank/users-list/UsersList.tsx","app/pages/question-bank/QuestionPage.tsx","app/pages/settings/components/ApiUrl.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/question'\r\nconst USER_URL = `${API_URL}/question`\r\nconst COURSE_URL = 'https://quiz.datacubeindia.com/common/course'\r\nconst SUBJECT_URL = 'https://quiz.datacubeindia.com/common/subject'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios.get(`${USER_URL}?${query}`).then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst getAllCourses = (): Promise<any> => {\r\n  return axios.get(`${COURSE_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getAllSubjects = (): Promise<any> => {\r\n  return axios.get(`${SUBJECT_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/update`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${API_URL}/questionBank/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateBank = (user: User, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/updateBank/${id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUpi = (user: User, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/updateUpi/${id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updatePan = (user: User, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/updatePan/${id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateUser,\r\n  updateBank,\r\n  updateUpi,\r\n  updatePan,\r\n  updateStatus,\r\n  getAllCourses,\r\n  getAllSubjects,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {role, last_login: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Role:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Administrator'>Administrator</option>\r\n              <option value='Analyst'>Analyst</option>\r\n              <option value='Developer'>Developer</option>\r\n              <option value='Support'>Support</option>\r\n              <option value='Trial'>Trial</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Yesterday'>Yesterday</option>\r\n              <option value='20 mins ago'>20 mins ago</option>\r\n              <option value='5 hours ago'>5 hours ago</option>\r\n              <option value='2 days ago'>2 days ago</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={filterData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={resetData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'questions'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Question\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Question'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  console.log(user, 'user')\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  function removeHTML (str: string) {\r\n    var tmp = document.createElement('DIV')\r\n    tmp.innerHTML = str\r\n    return tmp.textContent || tmp.innerText || ''\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {/* begin:: Avatar */}\r\n      {/* <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n        <a onClick={openEditModal} style={{cursor: 'pointer'}}>\r\n          {user.profile_image ? (\r\n            <div className='symbol-label'>\r\n              <img src={user.profile_image} alt={user.firstname} className='w-100' />\r\n            </div>\r\n          ) : (\r\n            <div className={clsx('symbol-label fs-3', `bg-light-warning`, `text-warning`)}>\r\n              {user.firstname?.charAt(0)}\r\n            </div>\r\n          )}\r\n        </a>\r\n      </div> */}\r\n      <div className='d-flex flex-column'>\r\n        {user?.questions?.length > 0 &&\r\n          user?.questions?.map((item: any, i: any) => (\r\n            <a\r\n              key={i}\r\n              onClick={openEditModal}\r\n              style={{cursor: 'pointer'}}\r\n              className='text-gray-800 text-hover-primary mb-1'\r\n            >\r\n              {removeHTML(item.question)}\r\n            </a>\r\n          ))}\r\n        {/* <span>{user.email}</span> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  createdAt?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({createdAt}) => (\r\n  <div className='badge badge-light fw-bolder'>{createdAt}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {getUserById, updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {FC, useState, createContext, useContext, useMemo, useEffect} from 'react'\nimport {getAllCourses, getAllSubjects} from '../core/_requests'\nconst CommonDataContext = createContext<any>({\n  allCourses: [],\n  allSubjects: [],\n})\n\nconst CommonDataProvider: FC = ({children}) => {\n  const [allCourses, setCourses] = useState<Array<any>>()\n  const [allSubjects, setSubjects] = useState<Array<any>>()\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await getAllCourses()\n      .then((data) => {\n        setCourses(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    await getAllSubjects()\n      .then((data) => {\n        setSubjects(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <CommonDataContext.Provider\n      value={{\n        allCourses,\n        allSubjects,\n      }}\n    >\n      {children}\n    </CommonDataContext.Provider>\n  )\n}\n\nconst useCommonData = () => useContext(CommonDataContext)\n\nexport {CommonDataProvider, useCommonData}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\nimport {useCommonData} from '../../commonData/CommonDataProvider'\n\ntype Props = {\n  courses: any\n}\n\nconst CoursesCell: FC<Props> = ({courses}) => {\n  const {allCourses} = useCommonData()\n\n  let item = allCourses?.filter((x: any) => courses?.some((y: any) => y.course_id === x.id))\n  item = item?.flatMap((x: any) => [x.course_name])\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.join(', ')}</div>\n    </div>\n  )\n}\n\nexport {CoursesCell}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport axios, {AxiosResponse} from 'axios'\nimport clsx from 'clsx'\nimport {FC, useEffect, useState} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useCommonData} from '../../commonData/CommonDataProvider'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  subject_id: any\n}\n\nconst SubjectCell: FC<Props> = ({subject_id}) => {\n  const {allSubjects} = useCommonData()\n  let item = allSubjects?.find((x: any) => x.id == subject_id)\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.subject_name}</div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {FC} from 'react'\n\ntype Props = {\n  questions: any\n}\n\nconst Verified: FC<Props> = ({questions}) => (\n  <>\n    {' '}\n    {questions?.every((item: any) => item?.verified?.is_verified == 1) ? (\n      <div className='badge badge-light-success fw-bolder'>Yes</div>\n    ) : (\n      <>\n        <div className='badge badge-light-danger fw-bolder'>No</div>\n        <i\n          className='fas fa-exclamation-circle ms-1 fs-7'\n          data-bs-toggle='tooltip'\n          title='All questions must be verified!'\n        ></i>\n      </>\n    )}\n  </>\n)\n\nexport {Verified}\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {CoursesCell} from './Courses'\r\nimport {SubjectCell} from './SubjectCell'\r\nimport {Verified} from './VerifiedCell'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Q.ID' className='min-w-125px' />,\r\n    accessor: 'id',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Question' className='min-w-125px' />\r\n    ),\r\n    id: 'question',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Courses' className='min-w-125px' />\r\n    ),\r\n    id: 'courses',\r\n    Cell: ({...props}) => <CoursesCell courses={props.data[props.row.index].courses} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Subject' className='min-w-125px' />\r\n    ),\r\n    id: 'subject',\r\n    Cell: ({...props}) => <SubjectCell subject_id={props.data[props.row.index].subject_id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Added Date' className='min-w-125px' />\r\n    ),\r\n    id: 'createdAt',\r\n    Cell: ({...props}) => <UserLastLoginCell createdAt={props.data[props.row.index].createdAt} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Verified' className='min-w-125px' />\r\n    ),\r\n    id: 'verified',\r\n    Cell: ({...props}) => <Verified questions={props.data[props.row.index].questions} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Question</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  subject_id?: number\r\n  question_type?: string\r\n  level?: string\r\n  questions?: any\r\n  courses?: any\r\n  marks?: any\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    question_type: Yup.string()\r\n      .required('question_type is required')\r\n      .label('question_type'),\r\n    level: Yup.string()\r\n      .required('level is required')\r\n      .label('level'),\r\n    courses: Yup.array().min(1),\r\n    subject_id: Yup.number()\r\n      .required('subject_id is required')\r\n      .label('subject_id'),\r\n    marks: Yup.object().shape({\r\n      marks: Yup.number().required('Marks is required'),\r\n      negitive_mark: Yup.number().required('Negitive Mark is required'),\r\n    }),\r\n  }),\r\n  Yup.object().shape({\r\n    questions: Yup.array().of(\r\n      Yup.object().shape({\r\n        question: Yup.string().required('Question is required'),\r\n        solution: Yup.object().shape({\r\n          solution: Yup.string().required('Solution is required'),\r\n        }),\r\n        hint: Yup.object().shape({\r\n          hint: Yup.string().required('Hint is required'),\r\n        }),\r\n      })\r\n    ),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  subject_id: undefined,\r\n  question_type: '',\r\n  level: '',\r\n  courses: [],\r\n  marks: {\r\n    marks: null,\r\n    negitive_mark: null,\r\n  },\r\n  questions: [\r\n    {\r\n      question_bank_id: null,\r\n      question: '',\r\n      language: 'HINDI',\r\n      hint: {hint: ''},\r\n      options: [{option: '', right_option: 0}],\r\n      solution: {solution: ''},\r\n      verified: {is_verified: null, verified_by: ''},\r\n    },\r\n    {\r\n      question_bank_id: null,\r\n      question: '',\r\n      language: 'ENGLISH',\r\n      hint: {hint: ''},\r\n      options: [{option: '', right_option: 0}],\r\n      solution: {solution: ''},\r\n      verified: {is_verified: null, verified_by: ''},\r\n    },\r\n  ],\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import React, {FC, useEffect, useState} from 'react'\r\nimport {Field, ErrorMessage, Formik} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport PasswordStrengthBar from 'react-password-strength-bar'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\nimport Select from 'react-select'\r\nimport {useCommonData} from '../commonData/CommonDataProvider'\r\n// import {checkEmail} from '../core/_requests'\r\n\r\ntype Props = {\r\n  setFieldValue: any\r\n  values: any\r\n  touched: any\r\n  setFieldError: any\r\n  errors: any\r\n}\r\n\r\nconst Step1: FC<Props> = ({setFieldValue, values, touched, setFieldError, errors}) => {\r\n  console.log(errors, 'errors')\r\n  const {allCourses, allSubjects} = useCommonData()\r\n  const [courses, setCourses] = useState(allCourses)\r\n  const [subjects, setSubjects] = useState(values.id ? allSubjects : [])\r\n  const [selectedCourses, setSelectedCourses] = useState<any>(null)\r\n\r\n  useEffect(() => {\r\n    if (values.id && courses.length > 0) {\r\n      const selected = courses.filter((x: any) =>\r\n        values?.courses.some((y: any) => y.course_id === x.id)\r\n      )\r\n      setSelectedCourses(selected)\r\n      const ids = values.courses.flatMap((x: any) => [x.course_id])\r\n      getSubject(ids)\r\n      setFieldValue('courses', selected)\r\n    }\r\n  }, [courses])\r\n\r\n  const getSubject = async (ids: any) => {\r\n    let items = allSubjects?.filter((x: any) => ids.some((y: any) => y == x.course_id))\r\n    setSubjects(items)\r\n  }\r\n\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Question Type</span>\r\n          </label>\r\n          <Field\r\n            as='select'\r\n            name='question_type'\r\n            className='form-select mb-2'\r\n            data-control='select2'\r\n            data-hide-search='true'\r\n            placeholder='Select an option'\r\n          >\r\n            <option></option>\r\n            <option>Single</option>\r\n            <option>MCQ</option>\r\n          </Field>\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='question_type' />\r\n          </div>\r\n        </div>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Question Level</span>\r\n          </label>\r\n          <Field\r\n            as='select'\r\n            name='level'\r\n            className='form-select mb-2'\r\n            data-control='select2'\r\n            data-hide-search='true'\r\n            placeholder='Select an option'\r\n          >\r\n            <option></option>\r\n            <option>Easy</option>\r\n            <option>Moderate</option>\r\n            <option>Difficult</option>\r\n          </Field>\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='level' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Courses</span>\r\n          </label>\r\n          <Select\r\n            isMulti\r\n            name='courses'\r\n            options={courses}\r\n            className='basic-multi-select'\r\n            classNamePrefix='select'\r\n            value={selectedCourses}\r\n            onChange={(e, i) => {\r\n              const ids = e.flatMap((item, i) => [item.id])\r\n              getSubject(ids)\r\n              setFieldValue('courses', e)\r\n              setSelectedCourses(e)\r\n            }}\r\n            getOptionLabel={(option: any) => option.course_name}\r\n            getOptionValue={(option: any) => option.id}\r\n          />\r\n\r\n          <div className='text-danger mt-2'>{errors.courses}</div>\r\n        </div>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Subject</span>\r\n          </label>\r\n          <Field\r\n            as='select'\r\n            name='subject_id'\r\n            className='form-select mb-2'\r\n            data-control='select2'\r\n            data-hide-search='true'\r\n            placeholder='Select an option'\r\n          >\r\n            <option></option>\r\n            {subjects.map((item: any, i: any) => (\r\n              <option key={i} value={item.id}>\r\n                {item.subject_name}\r\n              </option>\r\n            ))}\r\n          </Field>\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='subject_id' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>Marks</label>\r\n\r\n          <Field\r\n            name='marks.marks'\r\n            type='number'\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Question Marks'}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='marks.marks' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Negitive Marks</span>\r\n          </label>\r\n\r\n          <Field\r\n            name='marks.negitive_mark'\r\n            type={'number'}\r\n            className='form-control mb-2'\r\n            placeholder={'Enter negitive mark'}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='marks.negitive_mark' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step1}\r\n","import React, {FC, useEffect, useState, useMemo, useRef} from 'react'\r\nimport {Field, ErrorMessage} from 'formik'\r\nimport clsx from 'clsx'\r\nimport ReactQuill from 'react-quill'\r\nimport 'react-quill/dist/quill.snow.css'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\n\r\ntype Props = {\r\n  values: any\r\n  setFieldValue: any\r\n  setSelectedLang: any\r\n  selectedLang: any\r\n  roleForEdit: any\r\n  errors: any\r\n}\r\n\r\nconst Step2: FC<Props> = ({\r\n  values,\r\n  setFieldValue,\r\n  selectedLang,\r\n  setSelectedLang,\r\n  errors,\r\n  roleForEdit,\r\n}) => {\r\n  console.log(values, 'values')\r\n\r\n  const [options, setOptions] = useState<any>(null)\r\n  const [hint, setHint] = useState<any>(null)\r\n  const [question, setQuestion] = useState<any>(null)\r\n  const [solution, setSolution] = useState<any>(null)\r\n  const [verified, setVerified] = useState<any>(null)\r\n\r\n  const questionRef: any = useRef(null)\r\n  const solutionRef: any = useRef(null)\r\n  const optionRef: any = useRef(null)\r\n\r\n  useEffect(() => {\r\n    setSelectedLang(0)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLang != null) {\r\n      setOptions(values.questions[selectedLang]?.options || [{option: '', right_option: 0}])\r\n      setQuestion(values.questions[selectedLang]?.question || '')\r\n      setSolution(values.questions[selectedLang]?.solution || {solution: ''})\r\n      setHint(values.questions[selectedLang]?.hint || {hint: ''})\r\n      setFieldValue(`questions[${selectedLang}].verified`, {is_verified: null, verified_by: ''})\r\n      setFieldValue(`questions[${selectedLang}].question_bank_id`, values.id)\r\n      setFieldValue(`questions[${selectedLang}].language`, selectedLang == 0 ? 'HINDI' : 'ENGLISH')\r\n    }\r\n  }, [selectedLang])\r\n\r\n  useEffect(() => {\r\n    if (question != null && question != values?.questions[selectedLang]?.question) {\r\n      setFieldValue(`questions[${selectedLang}].question`, question)\r\n    }\r\n  }, [question])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      solution != null &&\r\n      solution.solution != values.questions[selectedLang]?.solution?.solution\r\n    ) {\r\n      setFieldValue(`questions[${selectedLang}].solution`, solution)\r\n    }\r\n  }, [solution])\r\n\r\n  useEffect(() => {\r\n    if (hint != null && hint.hint != values.questions[selectedLang]?.hint?.hint) {\r\n      setFieldValue(`questions[${selectedLang}].hint`, hint)\r\n    }\r\n  }, [hint])\r\n\r\n  useEffect(() => {\r\n    if (options?.length > 0 && options != values.questions[selectedLang]?.options) {\r\n      setFieldValue(`questions[${selectedLang}].options`, options)\r\n    }\r\n  }, [options])\r\n\r\n  useEffect(() => {\r\n    console.log(options, 'options')\r\n  }, [options])\r\n\r\n  const imageHandler = (e: any) => {\r\n    const input: any = document.createElement('input')\r\n    input.setAttribute('type', 'file')\r\n    input.setAttribute('accept', 'image/*')\r\n    input.click()\r\n    input.onchange = async () => {\r\n      var file: any = input?.files[0]\r\n      var formData = new FormData()\r\n      formData.append('image', file)\r\n      await axios\r\n        .post(`${API_URL}/upload`, formData)\r\n        .then((data: AxiosResponse<any>) => {\r\n          var range = questionRef.current.getEditor().getSelection()\r\n          questionRef.current.getEditor().insertEmbed(range?.index, 'image', data.data)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err, 'err')\r\n        })\r\n    }\r\n  }\r\n\r\n  const modules = useMemo(\r\n    () => ({\r\n      toolbar: {\r\n        container: [\r\n          [{header: [1, 2, 3, 4, 5, 6, false]}],\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{list: 'ordered'}, {list: 'bullet'}, {indent: '-1'}, {indent: '+1'}],\r\n          ['link', 'image'],\r\n          ['clean'],\r\n        ],\r\n        handlers: {\r\n          image: imageHandler,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const formats = [\r\n    'header',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'list',\r\n    'bullet',\r\n    'indent',\r\n    'link',\r\n    'image',\r\n  ]\r\n\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='fv-row mb-10'>\r\n        <label className='form-label'>Select Language</label>\r\n\r\n        <Field\r\n          as='select'\r\n          name={`questions[${selectedLang}].language`}\r\n          className='form-select mb-2'\r\n          data-control='select2'\r\n          data-hide-search='true'\r\n          data-placeholder='Select an option'\r\n          onChange={(e: any) => {\r\n            setSelectedLang(e.target.value)\r\n          }}\r\n          value={selectedLang}\r\n        >\r\n          {/* <option></option> */}\r\n          <option value={0}>HINDI</option>\r\n          <option value={1}>ENGLISH</option>\r\n        </Field>\r\n        <div className='text-danger mt-2'>\r\n          <ErrorMessage name='question.language' />\r\n        </div>\r\n      </div>\r\n\r\n      {selectedLang != null && (\r\n        <>\r\n          <div className='fv-row w-100 mb-10'>\r\n            <label className='form-label required'>Question</label>\r\n            <ReactQuill\r\n              onChange={(content, delta, source, editor) => {\r\n                setQuestion(content)\r\n              }}\r\n              id='question'\r\n              value={question}\r\n              formats={formats}\r\n              modules={modules}\r\n              ref={questionRef}\r\n            />\r\n            {errors?.questions && (\r\n              <div className='text-danger mt-2'>{errors?.questions[selectedLang]?.question}</div>\r\n            )}\r\n          </div>\r\n          <div className='fv-row w-100 mb-10'>\r\n            <label className='form-label required'>Solution</label>\r\n            <ReactQuill\r\n              value={solution?.solution}\r\n              onChange={(content, delta, source, editor) => {\r\n                setSolution({...solution, solution: content})\r\n              }}\r\n              id='solution'\r\n              formats={formats}\r\n              modules={modules}\r\n              ref={questionRef}\r\n            />\r\n            {errors?.questions && (\r\n              <div className='text-danger mt-2'>\r\n                {errors?.questions[selectedLang]?.solution?.solution}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className='fv-row w-100 mb-10'>\r\n            <label className='form-label required'>Question Hint</label>\r\n            <textarea\r\n              rows={3}\r\n              className='form-control mb-2'\r\n              onChange={(e: any) => {\r\n                setHint({...hint, hint: e.target.value})\r\n              }}\r\n              value={hint?.hint}\r\n            />\r\n            {errors?.questions && (\r\n              <div className='text-danger mt-2'>{errors?.questions[selectedLang]?.hint?.hint}</div>\r\n            )}\r\n          </div>\r\n          <div className='fv-row w-100 mb-10'>\r\n            <div id='kt_ecommerce_add_category_conditions'>\r\n              <div data-repeater-item='' className='form-group d-flex flex-wrap gap-5 mb-5'>\r\n                <div className='w-100 mw-100 w-550px'>\r\n                  <label className='form-label required'>Options</label>\r\n                </div>\r\n                <label className='form-label w-50px'>Right Option</label>\r\n                <label className='form-label w-40px'>Remove</label>\r\n              </div>\r\n\r\n              {options?.map((item: any, i: any) => (\r\n                <div className='form-group' key={i}>\r\n                  <div\r\n                    data-repeater-list='kt_ecommerce_add_category_conditions'\r\n                    className='d-flex flex-column gap-3'\r\n                  >\r\n                    <div data-repeater-item='' className='form-group d-flex flex-wrap mb-5 gap-10'>\r\n                      <div className='w-100 mw-100 w-550px'>\r\n                        <ReactQuill\r\n                          value={item.option}\r\n                          onChange={(content, delta, source, editor) => {\r\n                            if (source == 'user') {\r\n                              const data = [...options]\r\n                              data[i] = {...data[i], option: content}\r\n                              setOptions(data)\r\n                            }\r\n                          }}\r\n                          id={`option_${i}`}\r\n                          formats={formats}\r\n                          modules={modules}\r\n                          ref={questionRef}\r\n                        />\r\n                      </div>\r\n                      {values.question_type == 'MCQ' ? (\r\n                        <Field\r\n                          className='form-check-input'\r\n                          type='checkbox'\r\n                          checked={item.right_option == 1 ? true : false}\r\n                          name='right_option'\r\n                          onChange={(e: any) => {\r\n                            const data = [...options]\r\n                            data[i] = {...data[i], right_option: e.currentTarget.checked ? 1 : 0}\r\n                            setOptions(data)\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <input\r\n                          name='right_option'\r\n                          type={'radio'}\r\n                          value={i}\r\n                          onChange={async (e: any) => {\r\n                            const data = [...options]\r\n                            await data.map((x: any) => {\r\n                              x.right_option = 0\r\n                            })\r\n                            data[i] = {...data[i], right_option: 1}\r\n                            setOptions(data)\r\n                          }}\r\n                          checked={item.right_option == 1}\r\n                          id={`right_option_${i}`}\r\n                          className={clsx('form-check-input mb-3 mb-lg-0')}\r\n                          autoComplete='off'\r\n                        />\r\n                      )}\r\n                      <button\r\n                        type='button'\r\n                        onClick={() => {\r\n                          const data = [...options]\r\n                          data.splice(i, 1)\r\n                          setOptions(data)\r\n                        }}\r\n                        data-repeater-delete=''\r\n                        className='btn btn-sm btn-icon btn-light-danger'\r\n                      >\r\n                        <span className='svg-icon svg-icon-2'>\r\n                          <svg\r\n                            xmlns='http://www.w3.org/2000/svg'\r\n                            width='24'\r\n                            height='24'\r\n                            viewBox='0 0 24 24'\r\n                            fill='none'\r\n                          >\r\n                            <rect\r\n                              opacity='0.5'\r\n                              x='7.05025'\r\n                              y='15.5356'\r\n                              width='12'\r\n                              height='2'\r\n                              rx='1'\r\n                              transform='rotate(-45 7.05025 15.5356)'\r\n                              fill='currentColor'\r\n                            />\r\n                            <rect\r\n                              x='8.46447'\r\n                              y='7.05029'\r\n                              width='12'\r\n                              height='2'\r\n                              rx='1'\r\n                              transform='rotate(45 8.46447 7.05029)'\r\n                              fill='currentColor'\r\n                            />\r\n                          </svg>\r\n                        </span>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div className='form-group mt-5'>\r\n                <button\r\n                  type='button'\r\n                  onClick={() => setOptions([...options, {option: '', right_option: 0}])}\r\n                  data-repeater-create=''\r\n                  className='btn btn-sm btn-light-primary'\r\n                >\r\n                  <span className='svg-icon svg-icon-2'>\r\n                    <svg\r\n                      xmlns='http://www.w3.org/2000/svg'\r\n                      width='24'\r\n                      height='24'\r\n                      viewBox='0 0 24 24'\r\n                      fill='none'\r\n                    >\r\n                      <rect\r\n                        opacity='0.5'\r\n                        x='11'\r\n                        y='18'\r\n                        width='12'\r\n                        height='2'\r\n                        rx='1'\r\n                        transform='rotate(-90 11 18)'\r\n                        fill='currentColor'\r\n                      />\r\n                      <rect x='6' y='11' width='12' height='2' rx='1' fill='currentColor' />\r\n                    </svg>\r\n                  </span>\r\n                  Add another option\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>{' '}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step2}\r\n","import {FC, useEffect, useRef, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {Form, Formik, FormikValues} from 'formik'\r\nimport {isNotEmpty, KTSVG} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateBank, updatePan, updateUpi, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport {StepperComponent} from '../../../../../_metronic/assets/ts/components'\r\nimport {Step1} from '../steps/Step1'\r\nimport {Step2} from '../steps/Step2'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const stepperRef = useRef<HTMLDivElement | null>(null)\r\n  const stepper = useRef<StepperComponent | null>(null)\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [isSubmitButton, setSubmitButton] = useState(false)\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    subject_id: role.subject_id || initialUser.subject_id,\r\n    question_type: role.question_type || initialUser.question_type,\r\n    level: role.level || initialUser.level,\r\n    questions: role.questions || initialUser.questions,\r\n    courses: role.courses || initialUser.courses,\r\n    marks: role.marks || initialUser.marks,\r\n  })\r\n  const [selectedLang, setSelectedLang] = useState<any>(null)\r\n\r\n  useEffect(() => {\r\n    if (!stepperRef.current) {\r\n      return\r\n    }\r\n\r\n    loadStepper()\r\n  }, [stepperRef])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const loadStepper = () => {\r\n    stepper.current = StepperComponent.createInsance(stepperRef.current as HTMLDivElement)\r\n  }\r\n\r\n  const prevStep = () => {\r\n    if (!stepper.current) {\r\n      return\r\n    }\r\n\r\n    setSubmitButton(stepper.current.currentStepIndex === stepper.current.totatStepsNumber! - 1)\r\n\r\n    stepper.current.goPrev()\r\n\r\n    setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex - 1])\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    if (!stepper.current) {\r\n      return\r\n    }\r\n    setSubmitButton(stepper.current.currentStepIndex === stepper.current.totatStepsNumber! - 1)\r\n    setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex])\r\n    if (stepper.current.currentStepIndex !== stepper.current.totatStepsNumber) {\r\n      const user = await updateUser(values)\r\n      actions.setFieldValue('id', user?.id)\r\n      actions.setFieldValue('marks', user?.marks)\r\n      stepper.current.goNext()\r\n    } else {\r\n      try {\r\n        await createUser(values.questions[selectedLang])\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        // setSubmitting(true)\r\n        actions.resetForm()\r\n        cancel(true)\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: `Question ${values.id ? 'Updated' : 'Created'}!`,\r\n          icon: 'success',\r\n          confirmButtonText: 'Okay',\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={stepperRef}\r\n        className='stepper stepper-links d-flex flex-column'\r\n        id='kt_create_account_stepper'\r\n      >\r\n        <div className='stepper-nav mb-5'>\r\n          <div className='stepper-item current' data-kt-stepper-element='nav'>\r\n            <h3 className='stepper-title'>Question Type</h3>\r\n          </div>\r\n\r\n          <div className='stepper-item' data-kt-stepper-element='nav'>\r\n            <h3 className='stepper-title'>Question</h3>\r\n          </div>\r\n        </div>\r\n\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue, values, touched, setFieldError, errors}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='current' data-kt-stepper-element='content'>\r\n                <Step1\r\n                  setFieldValue={setFieldValue}\r\n                  values={values}\r\n                  touched={touched}\r\n                  setFieldError={setFieldError}\r\n                  errors={errors}\r\n                />\r\n              </div>\r\n\r\n              <div data-kt-stepper-element='content'>\r\n                <Step2\r\n                  setFieldValue={setFieldValue}\r\n                  values={values}\r\n                  selectedLang={selectedLang}\r\n                  setSelectedLang={setSelectedLang}\r\n                  roleForEdit={roleForEdit}\r\n                  errors={errors}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'>\r\n                  <button\r\n                    onClick={prevStep}\r\n                    type='button'\r\n                    className='btn btn-lg btn-light-primary me-3'\r\n                    data-kt-stepper-action='previous'\r\n                  >\r\n                    <KTSVG\r\n                      path='/media/icons/duotune/arrows/arr063.svg'\r\n                      className='svg-icon-4 me-1'\r\n                    />\r\n                    Back\r\n                  </button>\r\n                </div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>\r\n                      {!isSubmitButton && 'Continue'}\r\n                      {isSubmitButton && 'Submit'}\r\n                      <KTSVG\r\n                        path='/media/icons/duotune/arrows/arr064.svg'\r\n                        className='svg-icon-3 ms-2 me-0'\r\n                      />\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {CommonDataProvider} from './commonData/CommonDataProvider'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <UsersList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Question Bank',\r\n    path: '/questions',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst QuestionPage = () => {\r\n  return (\r\n    // <Routes>\r\n    //   <Route element={<Outlet />}>\r\n    //     <Route\r\n    //       path='questions'\r\n    //       element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Questions list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n    //       }\r\n    //     />\r\n    //   </Route>\r\n    //   <Route index element={<Navigate to='/apps/question-bank/questions' />} />\r\n    // </Routes>\r\n  )\r\n}\r\n\r\nexport default QuestionPage\r\n","const API_URL = 'https://quiz.datacubeindia.com/common/option'\nexport {API_URL}\n"],"names":["API_URL","USER_URL","createUser","user","axios","then","response","data","updateUser","updateStatus","status","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","ExportReactCSV","csvData","fileName","type","className","path","CSVLink","filename","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","UsersListToolbar","users","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","console","log","openEditModal","removeHTML","str","tmp","document","createElement","innerHTML","textContent","innerText","questions","item","i","style","cursor","question","UserLastLoginCell","createdAt","UserTwoStepsCell","stat","setStatus","name","checked","currentTarget","Swal","title","text","icon","confirmButtonText","UserActionsCell","deleteItem","userId","href","UserSelectionCell","isSelected","includes","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","UserSelectionHeader","CommonDataContext","allCourses","allSubjects","CommonDataProvider","setCourses","setSubjects","getData","catch","err","useCommonData","CoursesCell","courses","x","some","y","course_id","flatMap","course_name","join","SubjectCell","subject_id","find","subject_name","Verified","every","verified","is_verified","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","colSpan","UserEditModalHeader","createAccountSchemas","Yup","shape","question_type","required","level","min","marks","negitive_mark","of","solution","hint","initialUser","question_bank_id","language","options","option","right_option","verified_by","Step1","setFieldValue","values","errors","touched","setFieldError","subjects","selectedCourses","setSelectedCourses","ids","getSubject","items","as","isMulti","classNamePrefix","getOptionLabel","getOptionValue","Step2","selectedLang","setSelectedLang","roleForEdit","setOptions","setHint","setQuestion","setSolution","questionRef","useRef","imageHandler","input","setAttribute","click","onchange","file","files","formData","FormData","append","range","current","getEditor","getSelection","insertEmbed","modules","toolbar","container","header","list","indent","handlers","image","formats","content","delta","source","editor","ref","autoComplete","splice","xmlns","height","viewBox","fill","opacity","rx","transform","UserEditModalForm","isUserLoading","stepperRef","stepper","isSubmitButton","setSubmitButton","currentSchema","setCurrentSchema","loadStepper","StepperComponent","prevStep","currentStepIndex","totatStepsNumber","goPrev","submitStep","actions","goNext","error","resetForm","validationSchema","initialValues","onSubmit","validateOnChange","UserEditModalFormWrapper","enabledQuery","isNotEmpty","enabled","onError","UserEditModal","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","breadcrumbs"],"sourceRoot":""}