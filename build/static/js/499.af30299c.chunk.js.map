{"version":3,"file":"static/js/499.af30299c.chunk.js","mappings":"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","sources":["app/pages/settings/components/ApiUrl.tsx","app/pages/sponsors/question-list/core/_requests.ts","app/pages/sponsors/question-list/core/QueryRequestProvider.tsx","app/pages/sponsors/question-list/core/QueryResponseProvider.tsx","app/pages/sponsors/question-list/core/ListViewProvider.tsx","app/pages/sponsors/question-list/components/Export.js","app/pages/sponsors/question-list/components/header/UsersListFilter.tsx","app/pages/sponsors/question-list/components/header/UserListToolbar.tsx","app/pages/sponsors/question-list/components/header/UsersListGrouping.tsx","app/pages/sponsors/question-list/components/header/UsersListSearchComponent.tsx","app/pages/sponsors/question-list/components/header/UsersListHeader.tsx","app/pages/sponsors/question-list/table/columns/CustomHeaderColumn.tsx","app/pages/sponsors/question-list/table/columns/CustomRow.tsx","app/pages/sponsors/question-list/table/columns/UserInfoCell.tsx","app/pages/sponsors/question-list/table/columns/UserLastLoginCell.tsx","app/pages/sponsors/question-list/table/columns/UserTwoStepsCell.tsx","app/pages/sponsors/question-list/table/columns/UserActionsCell.tsx","app/pages/sponsors/question-list/table/columns/UserSelectionCell.tsx","app/pages/sponsors/question-list/table/columns/UserCustomHeader.tsx","app/pages/sponsors/question-list/table/columns/UserSelectionHeader.tsx","app/pages/sponsors/question-list/table/columns/SubjectCell.tsx","app/pages/sponsors/question-list/table/columns/Type.tsx","app/pages/sponsors/question-list/table/columns/_columns.tsx","app/pages/sponsors/question-list/components/loading/UsersListLoading.tsx","app/pages/sponsors/question-list/components/pagination/UsersListPagination.tsx","app/pages/sponsors/question-list/table/UsersTable.tsx","app/pages/sponsors/question-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/sponsors/question-list/core/_models.ts","app/pages/sponsors/question-list/user-edit-modal/UserEditModalForm.tsx","app/pages/sponsors/question-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/sponsors/question-list/user-edit-modal/UserEditModal.tsx","app/pages/sponsors/question-list/QuestionList.tsx","app/pages/sponsors/question-view/core/_requests.ts","app/pages/sponsors/question-view/core/QueryRequestProvider.tsx","app/pages/sponsors/question-view/core/QueryResponseProvider.tsx","app/pages/sponsors/question-view/core/ListViewProvider.tsx","app/pages/sponsors/question-view/components/Export.js","app/pages/sponsors/question-view/components/header/UsersListFilter.tsx","app/pages/sponsors/question-view/components/header/UserListToolbar.tsx","app/pages/sponsors/question-view/components/header/UsersListGrouping.tsx","app/pages/sponsors/question-view/components/header/UsersListSearchComponent.tsx","app/pages/sponsors/question-view/components/header/UsersListHeader.tsx","app/pages/sponsors/question-view/table/columns/CustomHeaderColumn.tsx","app/pages/sponsors/question-view/table/columns/CustomRow.tsx","app/pages/sponsors/question-view/core/CommonDataProvider.tsx","app/pages/sponsors/question-view/table/columns/UserInfoCell.tsx","app/pages/sponsors/question-view/table/columns/UserLastLoginCell.tsx","app/pages/sponsors/question-view/table/columns/UserTwoStepsCell.tsx","app/pages/sponsors/question-view/table/columns/UserActionsCell.tsx","app/pages/sponsors/question-view/table/columns/UserSelectionCell.tsx","app/pages/sponsors/question-view/table/columns/UserCustomHeader.tsx","app/pages/sponsors/question-view/table/columns/UserSelectionHeader.tsx","app/pages/sponsors/question-view/table/columns/SubjectCell.tsx","app/pages/sponsors/question-view/table/columns/Type.tsx","app/pages/sponsors/question-view/table/columns/Marks.tsx","app/pages/sponsors/question-view/table/columns/_columns.tsx","app/pages/sponsors/question-view/components/loading/UsersListLoading.tsx","app/pages/sponsors/question-view/components/pagination/UsersListPagination.tsx","app/pages/sponsors/question-view/table/UsersTable.tsx","app/pages/sponsors/question-view/user-edit-modal/UserEditModalHeader.tsx","app/pages/sponsors/question-view/core/_models.ts","app/pages/sponsors/question-view/user-edit-modal/UserEditModalForm.tsx","app/pages/sponsors/question-view/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/sponsors/question-view/user-edit-modal/UserEditModal.tsx","app/pages/sponsors/question-view/QuestionView.tsx","app/pages/sponsors/users-list/core/_requests.ts","app/pages/sponsors/users-list/core/QueryRequestProvider.tsx","app/pages/sponsors/users-list/core/QueryResponseProvider.tsx","app/pages/sponsors/users-list/core/ListViewProvider.tsx","app/pages/sponsors/users-list/components/Export.js","app/pages/sponsors/users-list/components/header/UserListToolbar.tsx","app/pages/sponsors/users-list/components/header/UsersListGrouping.tsx","app/pages/sponsors/users-list/components/header/UsersListSearchComponent.tsx","app/pages/sponsors/users-list/components/header/UsersListHeader.tsx","app/pages/sponsors/users-list/table/columns/CustomHeaderColumn.tsx","app/pages/sponsors/users-list/table/columns/CustomRow.tsx","app/pages/sponsors/users-list/table/columns/UserTwoStepsCell.tsx","app/pages/sponsors/users-list/table/columns/UserActionsCell.tsx","app/pages/sponsors/users-list/table/columns/UserSelectionCell.tsx","app/pages/sponsors/users-list/table/columns/UserCustomHeader.tsx","app/pages/sponsors/users-list/table/columns/UserSelectionHeader.tsx","app/pages/sponsors/users-list/table/columns/_columns.tsx","app/pages/sponsors/users-list/components/loading/UsersListLoading.tsx","app/pages/sponsors/users-list/components/pagination/UsersListPagination.tsx","app/pages/sponsors/users-list/table/UsersTable.tsx","app/pages/sponsors/users-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/sponsors/users-list/core/_models.ts","app/pages/sponsors/users-list/user-edit-modal/UserEditModalForm.tsx","app/pages/sponsors/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/sponsors/users-list/user-edit-modal/UserEditModal.tsx","app/pages/sponsors/users-list/UsersList.tsx","app/pages/sponsors/SponsorPage.tsx"],"sourcesContent":["const API_URL = 'https://quiz.datacubeindia.com/common/option'\nexport {API_URL}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst PROGRAM_URL = 'https://quiz.datacubeindia.com/common/program'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios.get(`${PROGRAM_URL}?${query}`).then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(PROGRAM_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${PROGRAM_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${PROGRAM_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (questionId: ID): Promise<void> => {\r\n  return axios.delete(`${PROGRAM_URL}/${questionId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (questionId: Array<ID>): Promise<void> => {\r\n  const requests = questionId.map((id) => axios.delete(`${PROGRAM_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, updateStatus, createUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n    setRole('')\r\n    setLastLogin('')\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {question_type: role, level: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Question Type:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Objective'>Objective</option>\r\n              <option value='True/False'>True/False</option>\r\n              <option value='Fill In The Blanks'>Fill In The Blanks</option>\r\n              <option value='Subjective'>Subjective</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Difficulty Level:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Easy'>Easy</option>\r\n              <option value='Moderate'>Moderate</option>\r\n              <option value='Difficult'>Difficult</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={resetData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={filterData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {useEffect} from 'react'\r\nimport {Link, useNavigate} from 'react-router-dom'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'program'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button onClick={openAddUserModal} className='btn btn-primary'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Program\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Programs'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: any\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  console.log(user, 'user')\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {/* begin:: Avatar */}\r\n      <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n        <a onClick={openEditModal} style={{cursor: 'pointer'}}>\r\n          {user?.image ? (\r\n            <div className='symbol-label'>\r\n              <img src={user?.image} alt={user.name} className='w-100' />\r\n            </div>\r\n          ) : (\r\n            <div className={clsx('symbol-label fs-3', `bg-light-warning`, `text-warning`)}>\r\n              {user.name?.charAt(0)}\r\n            </div>\r\n          )}\r\n        </a>\r\n      </div>\r\n      <div className='d-flex flex-column'>\r\n        <a\r\n          onClick={openEditModal}\r\n          style={{cursor: 'pointer'}}\r\n          className='text-gray-800 text-hover-primary mb-1'\r\n        >\r\n          {user.name}\r\n        </a>\r\n\r\n        {/* <span>{user.email}</span> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  level?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({level}) => <div className='fw-bolder'>{level}</div>\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport { Link } from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport axios, {AxiosResponse} from 'axios'\nimport clsx from 'clsx'\nimport {FC, useEffect, useState} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  quiz_id: any\n}\n\nconst SubjectCell: FC<Props> = ({quiz_id}) => {\n  const quiz = [\n    {name: 'Prime Time', value: 1},\n    {name: 'India GK', value: 2},\n    {name: 'Milkha Singh Weekly Quiz', value: 3},\n    {name: 'Bollywood Quiz', value: 4},\n    {name: 'Mega Quiz', value: 5},\n  ]\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>\n        {quiz.find((item: any) => item.value == quiz_id)?.name}\n      </div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {FC} from 'react'\n\ntype Props = {\n  question_type?: string\n}\n\nconst Type: FC<Props> = ({question_type}) => <div className='fw-bolder'>{question_type}</div>\n\nexport {Type}\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {SubjectCell} from './SubjectCell'\r\nimport {Type} from './Type'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  // {\r\n  //   Header: (props) => <UserCustomHeader tableProps={props} title='ID' className='min-w-125px' />,\r\n  //   accessor: 'id',\r\n  // },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Program Name' className='min-w-125px' />\r\n    ),\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Quiz' className='min-w-125px' />,\r\n    id: 'quiz_id',\r\n    Cell: ({...props}) => <SubjectCell quiz_id={props.data[props.row.index].quiz_id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Sponsors' className='min-w-125px' />\r\n    ),\r\n    id: 'sponsors',\r\n    Cell: ({...props}) => <Type question_type={props.data[props.row.index].sponsors} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Co-sponsors' className='min-w-125px' />\r\n    ),\r\n    id: 'co-sponsors',\r\n    Cell: ({...props}) => <UserLastLoginCell level={props.data[props.row.index].co_sponsors} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Sponsors Fee' className='min-w-125px' />\r\n    ),\r\n    id: 'sponsor_fee',\r\n    Cell: ({...props}) => <UserLastLoginCell level={props.data[props.row.index].sponsor_fee} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='co sponsor fee' className='min-w-125px' />\r\n    ),\r\n    id: 'co_sponsor_fee',\r\n    Cell: ({...props}) => <UserLastLoginCell level={props.data[props.row.index].co_sponsor_fee} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Sponsorship Program</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  quiz_id?: number\r\n  name?: string\r\n  image?: string\r\n  sponsors?: number\r\n  co_sponsors?: number\r\n  sponsor_fee?: number\r\n  co_sponsor_fee?: any\r\n  description?: string\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    name: Yup.string().required('Name is required'),\r\n    sponsors: Yup.number().required('Sponsors is required'),\r\n    co_sponsors: Yup.number().required('Co-sponsors is required'),\r\n    sponsor_fee: Yup.number().required('Sponsors fee is required'),\r\n    co_sponsor_fee: Yup.number().required('Co Sponsors fee is required'),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  quiz_id: undefined,\r\n  name: '',\r\n  image: '',\r\n  sponsors: undefined,\r\n  co_sponsors: undefined,\r\n  sponsor_fee: undefined,\r\n  co_sponsor_fee: undefined,\r\n  description: '',\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useEffect, useMemo, useRef, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport ReactQuill from 'react-quill'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    name: role.name || initialUser.name,\r\n    quiz_id: role.quiz_id || initialUser.quiz_id,\r\n    image: role.image || initialUser.image,\r\n    sponsors: role.sponsors || initialUser.sponsors,\r\n    co_sponsors: role.co_sponsors || initialUser.co_sponsors,\r\n    sponsor_fee: role.sponsor_fee || initialUser.sponsor_fee,\r\n    co_sponsor_fee: role.co_sponsor_fee || initialUser.co_sponsor_fee,\r\n    description: role.description || initialUser.description,\r\n  })\r\n\r\n  const questionRef: any = useRef(null)\r\n\r\n  useEffect(() => {\r\n    console.log(roleForEdit, 'roleforedit')\r\n  }, [roleForEdit])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      values.image = roleForEdit.image\r\n      values.description = roleForEdit.description\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Sponsorship Program Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  const uploadImage = async (e: any) => {\r\n    const file = e.currentTarget.files[0]\r\n    const fd = new FormData()\r\n    fd.append('image', file)\r\n    await axios\r\n      .post(`${API_URL}/upload`, fd)\r\n      .then((data: AxiosResponse<any>) => {\r\n        setRoleForEdit({...roleForEdit, image: data.data})\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }\r\n\r\n  const imageHandler = (e: any) => {\r\n    const input: any = document.createElement('input')\r\n    input.setAttribute('type', 'file')\r\n    input.setAttribute('accept', 'image/*')\r\n    input.click()\r\n    input.onchange = async () => {\r\n      var file: any = input?.files[0]\r\n      var formData = new FormData()\r\n      formData.append('image', file)\r\n      await axios\r\n        .post(`${API_URL}/upload`, formData)\r\n        .then((data: AxiosResponse<any>) => {\r\n          var range = questionRef.current.getEditor().getSelection()\r\n          questionRef.current.getEditor().insertEmbed(range?.index, 'image', data.data)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err, 'err')\r\n        })\r\n    }\r\n  }\r\n\r\n  const modules = useMemo(\r\n    () => ({\r\n      toolbar: {\r\n        container: [\r\n          [{header: [1, 2, 3, 4, 5, 6, false]}],\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{list: 'ordered'}, {list: 'bullet'}, {indent: '-1'}, {indent: '+1'}],\r\n          ['link', 'image'],\r\n          ['clean'],\r\n        ],\r\n        handlers: {\r\n          image: imageHandler,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const formats = [\r\n    'header',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'list',\r\n    'bullet',\r\n    'indent',\r\n    'link',\r\n    'image',\r\n  ]\r\n\r\n  const quiz = [\r\n    {name: 'Prime Time', value: 1},\r\n    {name: 'India GK', value: 2},\r\n    {name: 'Milkha Singh Weekly Quiz', value: 3},\r\n    {name: 'Bollywood Quiz', value: 4},\r\n    {name: 'Mega Quiz', value: 5},\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue, values, touched, setFieldError, errors}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='fv-row mb-7'>\r\n                <label className='d-block form-label'>Sponsorship Program Package Image</label>\r\n                <div className='image-input image-input-outline' data-kt-image-input='true'>\r\n                  <div className=''>\r\n                    <img\r\n                      src={\r\n                        roleForEdit?.image == null || roleForEdit?.image == ''\r\n                          ? toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n                          : roleForEdit?.image\r\n                      }\r\n                      alt='avatar'\r\n                      className='image-input-wrapper w-125px h-125px'\r\n                    />\r\n                  </div>\r\n                  <label\r\n                    className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                    data-kt-image-input-action='change'\r\n                    data-bs-toggle='tooltip'\r\n                    title='Change avatar'\r\n                  >\r\n                    <i className='bi bi-pencil-fill fs-7'></i>\r\n                    <input\r\n                      type='file'\r\n                      name='profile_image'\r\n                      accept='.png, .jpg, .jpeg'\r\n                      onChange={uploadImage}\r\n                    />\r\n                    <input type='hidden' name='avatar_remove' />\r\n                  </label>\r\n                  {roleForEdit.image !== null && (\r\n                    <button\r\n                      className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                      data-kt-image-input-action='remove'\r\n                      data-bs-toggle='tooltip'\r\n                      title='Remove avatar'\r\n                      type='button'\r\n                      onClick={() => setRoleForEdit({...roleForEdit, image: ''})}\r\n                    >\r\n                      <i className='bi bi-x fs-2'></i>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <div className='form-text'>Allowed file types: png, jpg, jpeg.</div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Sponsorship Program Name</label>\r\n\r\n                  <Field\r\n                    name='name'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Program Name'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='name' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Select Quiz</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    as='select'\r\n                    name='quiz_id'\r\n                    className='form-select mb-2'\r\n                    placeholder={'Select Quiz'}\r\n                  >\r\n                    <option></option>\r\n                    {quiz.map((item, i) => (\r\n                      <option key={i} value={item.value}>\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </Field>\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='quiz_id' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Number of sponsors</label>\r\n\r\n                  <Field\r\n                    name='sponsors'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter no. of sponsors'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='sponsors' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Number of co-sponsors</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='co_sponsors'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter no. of co-sponsors'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='co_sponsors' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Sponsors Fee</label>\r\n\r\n                  <Field\r\n                    name='sponsor_fee'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter sponsor fee'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='sponsor_fee' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Cosponsors Fee</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='co_sponsor_fee'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter co-sponsor fee'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='co_sponsor_fee' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label'>Description</label>\r\n                <ReactQuill\r\n                  onChange={(content, delta, source, editor) => {\r\n                    setRoleForEdit({...roleForEdit, description: content})\r\n                  }}\r\n                  id='description'\r\n                  value={roleForEdit.description}\r\n                  formats={formats}\r\n                  modules={modules}\r\n                  ref={questionRef}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\n\r\nconst QuestionList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuestionListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <QuestionList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {QuestionListWrapper}\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/common'\r\nconst SUBSCRIPTION_URL = `${API_URL}/subscription`\r\nconst PROGRAM = 'https://quiz.datacubeindia.com/common/programs'\r\nconst SPONSOR = 'https://quiz.datacubeindia.com/common/sponsors'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${SUBSCRIPTION_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getSponsors = (): Promise<any> => {\r\n  return axios.get(`${SPONSOR}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getPrograms = (): Promise<any> => {\r\n  return axios.get(`${PROGRAM}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${SUBSCRIPTION_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(SUBSCRIPTION_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${SUBSCRIPTION_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (questionId: ID): Promise<void> => {\r\n  return axios.delete(`${SUBSCRIPTION_URL}/${questionId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (questionId: Array<ID>): Promise<void> => {\r\n  const requests = questionId.map((id) => axios.delete(`${SUBSCRIPTION_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  updateStatus,\r\n  createUser,\r\n  getSponsors,\r\n  getPrograms,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n    setRole('')\r\n    setLastLogin('')\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {question_type: role, level: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Question Type:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Objective'>Objective</option>\r\n              <option value='True/False'>True/False</option>\r\n              <option value='Fill In The Blanks'>Fill In The Blanks</option>\r\n              <option value='Subjective'>Subjective</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Difficulty Level:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Easy'>Easy</option>\r\n              <option value='Moderate'>Moderate</option>\r\n              <option value='Difficult'>Difficult</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={resetData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={filterData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {Link} from 'react-router-dom'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'subscription'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button onClick={openAddUserModal} className='btn btn-primary'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Subscription\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {useParams} from 'react-router-dom'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Subscription'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","import {FC, useState, createContext, useContext, useMemo, useEffect} from 'react'\nimport {getPrograms, getSponsors} from './_requests'\nconst CommonDataContext = createContext<any>({\n  sponsors: [],\n  programs: [],\n})\n\nconst CommonDataProvider: FC = ({children}) => {\n  const [sponsors, setSponsors] = useState<Array<any>>()\n  const [programs, setPrograms] = useState<Array<any>>()\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await getSponsors()\n      .then((data) => {\n        setSponsors(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    await getPrograms()\n      .then((data) => {\n        setPrograms(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <CommonDataContext.Provider\n      value={{\n        sponsors,\n        programs,\n      }}\n    >\n      {children}\n    </CommonDataContext.Provider>\n  )\n}\n\nconst useCommonData = () => useContext(CommonDataContext)\n\nexport {CommonDataProvider, useCommonData}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useCommonData} from '../../core/CommonDataProvider'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: any\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {programs} = useCommonData()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      <div className='d-flex flex-column'>\r\n        <a\r\n          onClick={openEditModal}\r\n          style={{cursor: 'pointer'}}\r\n          className='text-gray-800 text-hover-primary mb-1'\r\n        >\r\n          {programs?.find((x: any) => x.id == user.sponsor_program_id)?.name}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  level?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({level}) => <div className='fw-bolder'>{level}</div>\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id?: ID\r\n  status: any\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({id, status}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input me-3'\r\n            data-switch='true'\r\n            data-on-color='#D8322D'\r\n            type='checkbox'\r\n            name='status'\r\n            data-off-color='warning'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport axios, {AxiosResponse} from 'axios'\nimport clsx from 'clsx'\nimport {FC, useEffect, useState} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useCommonData} from '../../core/CommonDataProvider'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  subject_id: any\n}\n\nconst SubjectCell: FC<Props> = ({subject_id}) => {\n  const {sponsors} = useCommonData()\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>\n        {sponsors?.find((x: any) => x.id == subject_id)?.name}\n      </div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {FC} from 'react'\n\ntype Props = {\n  question_type?: string\n}\n\nconst Type: FC<Props> = ({question_type}) => <div className='fw-bolder'>{question_type}</div>\n\nexport {Type}\n","import { FC } from 'react'\n\ntype Props = {\n    marks?: any\n}\n\nconst Marks: FC<Props> = ({ marks }) => <div className='fw-bolder'>{marks}</div>\n\nexport { Marks }\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {SubjectCell} from './SubjectCell'\r\nimport {Type} from './Type'\r\nimport {Marks} from './Marks'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Program Name' className='min-w-125px' />\r\n    ),\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Sponsor' className='min-w-125px' />\r\n    ),\r\n    id: 'sponsor',\r\n    Cell: ({...props}) => <SubjectCell subject_id={props.data[props.row.index].sponsor_id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Type' className='min-w-125px' />,\r\n    id: 'type',\r\n    Cell: ({...props}) => <Type question_type={props.data[props.row.index].type} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='amount' className='min-w-125px' />\r\n    ),\r\n    id: 'amount',\r\n    Cell: ({...props}) => <UserLastLoginCell level={props.data[props.row.index].amount} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='discount' className='min-w-125px' />\r\n    ),\r\n    id: 'discount',\r\n    Cell: ({...props}) => <Marks marks={props.data[props.row.index].discount} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='net amount' className='min-w-125px' />\r\n    ),\r\n    id: 'net_amount',\r\n    Cell: ({...props}) => <Marks marks={props.data[props.row.index].net_amount} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Action' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => <UserTwoStepsCell status={props.data[props.row.index].status} id={props.data[props.row.index].id} />\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useEffect, useMemo, useState} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nconst UsersTable = () => {\r\n  const params = useParams()\r\n  const {id} = params\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Sponsorship Subscription</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  sponsor_program_id?: number\r\n  sponsor_id?: number\r\n  type?: string\r\n  amount?: number\r\n  discount?: number\r\n  net_amount?: number\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    type: Yup.string().required('Type is required'),\r\n    sponsor_program_id: Yup.number().required('Sponsor program is required'),\r\n    sponsor_id: Yup.number().required('sponsors is required'),\r\n    amount: Yup.number().required('amount is required'),\r\n    discount: Yup.number().required('discount is required'),\r\n    net_amount: Yup.number().required('Net amount is required'),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  sponsor_program_id: undefined,\r\n  sponsor_id: undefined,\r\n  type: '',\r\n  amount: undefined,\r\n  discount: undefined,\r\n  net_amount: undefined,\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useEffect, useMemo, useRef, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, getPrograms, getSponsors} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport ReactQuill from 'react-quill'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\nimport {useCommonData} from '../core/CommonDataProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const {sponsors, programs} = useCommonData()\r\n\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    sponsor_program_id: role.sponsor_program_id || initialUser.sponsor_program_id,\r\n    sponsor_id: role.sponsor_id || initialUser.sponsor_id,\r\n    type: role.type || initialUser.type,\r\n    amount: role.amount || initialUser.amount,\r\n    discount: role.discount || initialUser.discount,\r\n    net_amount: role.net_amount || initialUser.net_amount,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Sponsorship Subscription Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue, values, touched, setFieldError, errors}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Select Sponsorship Program</label>\r\n\r\n                  <Field\r\n                    name='sponsor_program_id'\r\n                    as='select'\r\n                    className='form-select mb-2'\r\n                    placeholder={'Enter Program Name'}\r\n                  >\r\n                    <option></option>\r\n                    {programs.map((item: any, i: any) => (\r\n                      <option key={i} value={item.id}>\r\n                        {item?.name}\r\n                      </option>\r\n                    ))}\r\n                  </Field>\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='sponsor_program_id' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Select Sponsors</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    as='select'\r\n                    name='sponsor_id'\r\n                    className='form-select mb-2'\r\n                    placeholder={'Select Quiz'}\r\n                  >\r\n                    <option></option>\r\n                    {sponsors.map((item: any, i: any) => (\r\n                      <option key={i} value={item.id}>\r\n                        {item?.name}\r\n                      </option>\r\n                    ))}\r\n                  </Field>\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='sponsor_id' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Select Type</label>\r\n\r\n                  <Field\r\n                    name='type'\r\n                    as='select'\r\n                    className='form-select mb-2'\r\n                    placeholder={'Enter no. of sponsors'}\r\n                  >\r\n                    <option></option>\r\n                    <option>Sponsor</option>\r\n                    <option>Cosponsor</option>\r\n                  </Field>\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='type' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Amount</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='amount'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Amount'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='amount' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Discount</label>\r\n\r\n                  <Field\r\n                    name='discount'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Discount'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='discount' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Net Amount</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='net_amount'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Net amount'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='net_amount' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {CommonDataProvider} from './core/CommonDataProvider'\r\n\r\nconst QuestionList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuestionViewWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <QuestionList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {QuestionViewWrapper}\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/common'\r\nconst USER_URL = `${API_URL}/sponsor`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios.get(`${USER_URL}?${query}`).then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${USER_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateStatus}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'sponsors'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Sponsor\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Sponsor'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {getUserById, updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n  console.log(stat, 'stat')\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {Column} from 'react-table'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title=\"Sponsor's Name\" className='min-w-125px' />\r\n    ),\r\n    accessor: 'name',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Mobile' className='min-w-125px' />\r\n    ),\r\n    accessor: 'mobile_number',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Email' className='min-w-125px' />\r\n    ),\r\n    accessor: 'email',\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Link' className='min-w-125px' />,\r\n    accessor: 'link',\r\n  },\r\n\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Sponsor</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  mobile_number?: string\r\n  email?: string\r\n  logo?: string\r\n  link?: string\r\n  description?: string\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    name: Yup.string().required('Name is required'),\r\n    mobile_number: Yup.string().required('Mobile number is required'),\r\n    email: Yup.string()\r\n      .email('wrong email format')\r\n      .required('Email is required'),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  name: '',\r\n  mobile_number: '',\r\n  email: '',\r\n  logo: '',\r\n  link: '',\r\n  description: '',\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useEffect, useMemo, useRef, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport ReactQuill from 'react-quill'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    name: role.name || initialUser.name,\r\n    mobile_number: role.mobile_number || initialUser.mobile_number,\r\n    email: role.email || initialUser.email,\r\n    logo: role.logo || initialUser.logo,\r\n    link: role.link || initialUser.link,\r\n    description: role.description || initialUser.description,\r\n  })\r\n\r\n  const questionRef: any = useRef(null)\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      values.logo = roleForEdit.logo\r\n      values.description = roleForEdit.description\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Sponsor Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  const uploadImage = async (e: any) => {\r\n    const file = e.currentTarget.files[0]\r\n    const fd = new FormData()\r\n    fd.append('image', file)\r\n    await axios\r\n      .post(`${API_URL}/upload`, fd)\r\n      .then((data: AxiosResponse<any>) => {\r\n        setRoleForEdit({...roleForEdit, logo: data.data})\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }\r\n\r\n  const imageHandler = (e: any) => {\r\n    const input: any = document.createElement('input')\r\n    input.setAttribute('type', 'file')\r\n    input.setAttribute('accept', 'image/*')\r\n    input.click()\r\n    input.onchange = async () => {\r\n      var file: any = input?.files[0]\r\n      var formData = new FormData()\r\n      formData.append('image', file)\r\n      await axios\r\n        .post(`${API_URL}/upload`, formData)\r\n        .then((data: AxiosResponse<any>) => {\r\n          var range = questionRef.current.getEditor().getSelection()\r\n          questionRef.current.getEditor().insertEmbed(range?.index, 'image', data.data)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err, 'err')\r\n        })\r\n    }\r\n  }\r\n\r\n  const modules = useMemo(\r\n    () => ({\r\n      toolbar: {\r\n        container: [\r\n          [{header: [1, 2, 3, 4, 5, 6, false]}],\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{list: 'ordered'}, {list: 'bullet'}, {indent: '-1'}, {indent: '+1'}],\r\n          ['link', 'image'],\r\n          ['clean'],\r\n        ],\r\n        handlers: {\r\n          image: imageHandler,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const formats = [\r\n    'header',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'list',\r\n    'bullet',\r\n    'indent',\r\n    'link',\r\n    'image',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {() => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='fv-row mb-7'>\r\n                <label className='d-block form-label'>Sponsor's Logo</label>\r\n                <div className='image-input image-input-outline' data-kt-image-input='true'>\r\n                  <div className=''>\r\n                    <img\r\n                      src={\r\n                        roleForEdit?.logo == null || roleForEdit?.logo == ''\r\n                          ? toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n                          : roleForEdit?.logo\r\n                      }\r\n                      alt='avatar'\r\n                      className='image-input-wrapper w-125px h-125px'\r\n                    />\r\n                  </div>\r\n                  <label\r\n                    className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                    data-kt-image-input-action='change'\r\n                    data-bs-toggle='tooltip'\r\n                    title='Change avatar'\r\n                  >\r\n                    <i className='bi bi-pencil-fill fs-7'></i>\r\n                    <input\r\n                      type='file'\r\n                      name='profile_image'\r\n                      accept='.png, .jpg, .jpeg'\r\n                      onChange={uploadImage}\r\n                    />\r\n                    <input type='hidden' name='avatar_remove' />\r\n                  </label>\r\n                  {roleForEdit.logo !== null && (\r\n                    <button\r\n                      className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                      data-kt-image-input-action='remove'\r\n                      data-bs-toggle='tooltip'\r\n                      title='Remove avatar'\r\n                      type='button'\r\n                      onClick={() => setRoleForEdit({...roleForEdit, logo: ''})}\r\n                    >\r\n                      <i className='bi bi-x fs-2'></i>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <div className='form-text'>Allowed file types: png, jpg, jpeg.</div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Full Name</label>\r\n\r\n                  <Field\r\n                    name='name'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Full Name'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='name' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Email</span>\r\n                  </label>\r\n\r\n                  <Field name='email' className='form-control mb-2' placeholder={'Enter Email'} />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='email' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label'>Website Link</label>\r\n\r\n                  <Field\r\n                    name='link'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Website Link'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='link' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Mobile Number</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='mobile_number'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Mobile Number'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='mobile_number' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label'>Description</label>\r\n                <ReactQuill\r\n                  onChange={(content, delta, source, editor) => {\r\n                    setRoleForEdit({...roleForEdit, description: content})\r\n                  }}\r\n                  id='description'\r\n                  value={roleForEdit.description}\r\n                  formats={formats}\r\n                  modules={modules}\r\n                  ref={questionRef}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {QuestionListWrapper} from './question-list/QuestionList'\r\nimport {QuestionViewWrapper} from './question-view/QuestionView'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Sponsors',\r\n    path: '/sponsor/sponsors',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst SponsorPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='sponsors'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Sponsors list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route\r\n          path='programs'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Programs list</PageTitle>\r\n              <QuestionListWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route\r\n          path='subscriptions'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Subscriptions list</PageTitle>\r\n              <QuestionViewWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route index element={<Navigate to='/sponsor/sponsors' />} />\r\n      </Route>\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default SponsorPage\r\n"],"names":["API_URL","PROGRAM_URL","updateStatus","status","id","axios","then","response","data","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","ExportReactCSV","csvData","fileName","type","className","path","CSVLink","filename","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","onChange","e","target","onClick","filter","undefined","initialQueryState","question_type","level","UsersListToolbar","users","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","questionId","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","user","console","log","openEditModal","style","cursor","image","src","alt","name","charAt","UserLastLoginCell","UserTwoStepsCell","stat","setStatus","checked","currentTarget","Swal","title","text","icon","confirmButtonText","UserActionsCell","deleteItem","href","UserSelectionCell","isSelected","includes","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","UserSelectionHeader","SubjectCell","quiz_id","find","item","Type","usersColumns","props","Cell","index","sponsors","co_sponsors","sponsor_fee","co_sponsor_fee","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","createAccountSchemas","Yup","shape","required","initialUser","description","UserEditModalForm","isUserLoading","currentSchema","roleForEdit","setRoleForEdit","questionRef","useRef","submitStep","values","actions","resetForm","error","uploadImage","file","files","fd","FormData","append","catch","err","imageHandler","input","document","createElement","setAttribute","click","onchange","formData","range","current","getEditor","getSelection","insertEmbed","modules","toolbar","container","header","list","indent","handlers","formats","quiz","validationSchema","initialValues","onSubmit","validateOnChange","setFieldValue","touched","setFieldError","errors","toAbsoluteUrl","accept","as","content","delta","source","editor","ref","UserEditModalFormWrapper","enabledQuery","isNotEmpty","enabled","onError","UserEditModal","body","classList","add","remove","tabIndex","QuestionList","QuestionListWrapper","SUBSCRIPTION_URL","CommonDataContext","programs","CommonDataProvider","setSponsors","setPrograms","getData","useCommonData","x","sponsor_program_id","subject_id","Marks","marks","sponsor_id","amount","discount","net_amount","useParams","QuestionViewWrapper","USER_URL","userIds","userId","accessor","mobile_number","email","logo","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","element","breadcrumbs","to"],"sourceRoot":""}