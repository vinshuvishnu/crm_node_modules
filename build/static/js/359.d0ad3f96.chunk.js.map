{"version":3,"file":"static/js/359.d0ad3f96.chunk.js","mappings":"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","sources":["app/pages/course-setup/category-list/core/_requests.ts","app/pages/course-setup/category-list/core/QueryRequestProvider.tsx","app/pages/course-setup/category-list/core/QueryResponseProvider.tsx","app/pages/course-setup/category-list/core/ListViewProvider.tsx","app/pages/course-setup/category-list/components/Export.js","app/pages/course-setup/category-list/components/header/UsersListFilter.tsx","app/pages/course-setup/category-list/components/header/UserListToolbar.tsx","app/pages/course-setup/category-list/components/header/UsersListGrouping.tsx","app/pages/course-setup/category-list/components/header/UsersListSearchComponent.tsx","app/pages/course-setup/category-list/components/header/UsersListHeader.tsx","app/pages/course-setup/category-list/table/columns/CustomHeaderColumn.tsx","app/pages/course-setup/category-list/table/columns/CustomRow.tsx","app/pages/course-setup/category-list/table/columns/UserInfoCell.tsx","app/pages/course-setup/category-list/table/columns/UserLastLoginCell.tsx","app/pages/course-setup/category-list/table/columns/UserTwoStepsCell.tsx","app/pages/course-setup/category-list/table/columns/UserActionsCell.tsx","app/pages/course-setup/category-list/table/columns/UserSelectionCell.tsx","app/pages/course-setup/category-list/table/columns/UserCustomHeader.tsx","app/pages/course-setup/category-list/table/columns/UserSelectionHeader.tsx","app/pages/course-setup/course-list/core/_requests.ts","app/pages/course-setup/commonData/CommonDataProvider.tsx","app/pages/course-setup/category-list/table/columns/SubjectCell.tsx","app/pages/course-setup/category-list/table/columns/_columns.tsx","app/pages/course-setup/category-list/components/loading/UsersListLoading.tsx","app/pages/course-setup/category-list/components/pagination/UsersListPagination.tsx","app/pages/course-setup/category-list/table/UsersTable.tsx","app/pages/course-setup/category-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/course-setup/category-list/core/_models.ts","app/pages/course-setup/category-list/user-edit-modal/UserEditModalForm.tsx","app/pages/course-setup/category-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/course-setup/category-list/user-edit-modal/UserEditModal.tsx","app/pages/course-setup/category-list/QuestionList.tsx","app/pages/course-setup/subject-list/core/_requests.ts","app/pages/course-setup/subject-list/core/QueryRequestProvider.tsx","app/pages/course-setup/subject-list/core/QueryResponseProvider.tsx","app/pages/course-setup/subject-list/core/ListViewProvider.tsx","app/pages/course-setup/subject-list/components/Export.js","app/pages/course-setup/subject-list/components/header/UsersListFilter.tsx","app/pages/course-setup/subject-list/components/header/UserListToolbar.tsx","app/pages/course-setup/subject-list/components/header/UsersListGrouping.tsx","app/pages/course-setup/subject-list/components/header/UsersListSearchComponent.tsx","app/pages/course-setup/subject-list/components/header/UsersListHeader.tsx","app/pages/course-setup/subject-list/table/columns/CustomHeaderColumn.tsx","app/pages/course-setup/subject-list/table/columns/CustomRow.tsx","app/pages/course-setup/subject-list/table/columns/UserInfoCell.tsx","app/pages/course-setup/subject-list/table/columns/UserTwoStepsCell.tsx","app/pages/course-setup/subject-list/table/columns/UserActionsCell.tsx","app/pages/course-setup/subject-list/table/columns/UserSelectionCell.tsx","app/pages/course-setup/subject-list/table/columns/UserCustomHeader.tsx","app/pages/course-setup/subject-list/table/columns/UserSelectionHeader.tsx","app/pages/course-setup/subject-list/table/columns/SubjectCell.tsx","app/pages/course-setup/subject-list/table/columns/_columns.tsx","app/pages/course-setup/subject-list/components/loading/UsersListLoading.tsx","app/pages/course-setup/subject-list/components/pagination/UsersListPagination.tsx","app/pages/course-setup/subject-list/table/UsersTable.tsx","app/pages/course-setup/subject-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/course-setup/subject-list/core/_models.ts","app/pages/course-setup/subject-list/user-edit-modal/UserEditModalForm.tsx","app/pages/course-setup/subject-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/course-setup/subject-list/user-edit-modal/UserEditModal.tsx","app/pages/course-setup/subject-list/QuestionView.tsx","app/pages/course-setup/course-list/core/QueryRequestProvider.tsx","app/pages/course-setup/course-list/core/QueryResponseProvider.tsx","app/pages/course-setup/course-list/core/ListViewProvider.tsx","app/pages/course-setup/course-list/components/Export.js","app/pages/course-setup/course-list/components/header/UserListToolbar.tsx","app/pages/course-setup/course-list/components/header/UsersListGrouping.tsx","app/pages/course-setup/course-list/components/header/UsersListSearchComponent.tsx","app/pages/course-setup/course-list/components/header/UsersListHeader.tsx","app/pages/course-setup/course-list/table/columns/CustomHeaderColumn.tsx","app/pages/course-setup/course-list/table/columns/CustomRow.tsx","app/pages/course-setup/course-list/table/columns/UserTwoStepsCell.tsx","app/pages/course-setup/course-list/table/columns/UserActionsCell.tsx","app/pages/course-setup/course-list/table/columns/UserSelectionCell.tsx","app/pages/course-setup/course-list/table/columns/UserCustomHeader.tsx","app/pages/course-setup/course-list/table/columns/UserSelectionHeader.tsx","app/pages/course-setup/course-list/table/columns/CourseImageCell.tsx","app/pages/course-setup/course-list/table/columns/_columns.tsx","app/pages/course-setup/course-list/components/loading/UsersListLoading.tsx","app/pages/course-setup/course-list/components/pagination/UsersListPagination.tsx","app/pages/course-setup/course-list/table/UsersTable.tsx","app/pages/course-setup/course-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/course-setup/course-list/core/_models.ts","app/pages/course-setup/course-list/user-edit-modal/UserEditModalForm.tsx","app/pages/course-setup/course-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/course-setup/course-list/user-edit-modal/UserEditModal.tsx","app/pages/course-setup/course-list/UsersList.tsx","app/pages/course-setup/CoursePage.tsx","app/pages/settings/components/ApiUrl.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst CATEGORY_URL = 'https://quiz.datacubeindia.com/common/courseCategory'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${CATEGORY_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getAllCategories = (): Promise<any> => {\r\n  return axios.get(`${CATEGORY_URL}/getAll`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(CATEGORY_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${CATEGORY_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${CATEGORY_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (questionId: ID): Promise<void> => {\r\n  return axios.delete(`${CATEGORY_URL}/${questionId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (questionId: Array<ID>): Promise<void> => {\r\n  const requests = questionId.map((id) => axios.delete(`${CATEGORY_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  updateStatus,\r\n  createUser,\r\n  getAllCategories,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n    setRole('')\r\n    setLastLogin('')\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {question_type: role, level: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Question Type:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Objective'>Objective</option>\r\n              <option value='True/False'>True/False</option>\r\n              <option value='Fill In The Blanks'>Fill In The Blanks</option>\r\n              <option value='Subjective'>Subjective</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Difficulty Level:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Easy'>Easy</option>\r\n              <option value='Moderate'>Moderate</option>\r\n              <option value='Difficult'>Difficult</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={resetData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={filterData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {useEffect} from 'react'\r\nimport {Link, useNavigate} from 'react-router-dom'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'categories'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button onClick={openAddUserModal} className='btn btn-primary'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Course Category\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Categories'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: any\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  console.log(user, 'user')\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {/* begin:: Avatar */}\r\n      <div className='d-flex flex-column'>\r\n        <a\r\n          onClick={openEditModal}\r\n          style={{cursor: 'pointer'}}\r\n          className='text-gray-800 text-hover-primary mb-1'\r\n        >\r\n          {user.course_category}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  image?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({image}) => (\r\n  <div className='d-flex align-items-center'>\r\n    <img\r\n      className='d-flex flex-column'\r\n      src={image}\r\n      style={{height: 30, width: 30, borderRadius: 60}}\r\n    ></img>\r\n  </div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport { Link } from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst COURSE_URL = 'https://quiz.datacubeindia.com/common/course'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${COURSE_URL}/getAll?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getAllCourses = (): Promise<any> => {\r\n  return axios.get(`${COURSE_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${COURSE_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(COURSE_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${COURSE_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${COURSE_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${COURSE_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateStatus,\r\n  getAllCourses,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo, useEffect} from 'react'\nimport {getAllCategories} from '../category-list/core/_requests'\nimport {getAllCourses} from '../course-list/core/_requests'\nconst CommonDataContext = createContext<any>({\n  allCourses: [],\n  allCategories: [],\n})\n\nconst CommonDataProvider: FC = ({children}) => {\n  const [allCourses, setCourses] = useState<Array<any>>()\n  const [allCategories, setCategories] = useState<Array<any>>()\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await getAllCourses()\n      .then((data) => {\n        setCourses(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    await getAllCategories()\n      .then((data) => {\n        setCategories(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <CommonDataContext.Provider\n      value={{\n        allCourses,\n        allCategories,\n      }}\n    >\n      {children}\n    </CommonDataContext.Provider>\n  )\n}\n\nconst useCommonData = () => useContext(CommonDataContext)\n\nexport {CommonDataProvider, useCommonData}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport axios, {AxiosResponse} from 'axios'\nimport clsx from 'clsx'\nimport {FC, useEffect, useState} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  course_id: any\n}\n\nconst SubjectCell: FC<Props> = ({course_id}) => {\n  const {allCourses} = useCommonData()\n  const item = allCourses?.find((x: any) => x.id == course_id)?.course_name\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item}</div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {SubjectCell} from './SubjectCell'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='course' className='min-w-125px' />\r\n    ),\r\n    id: 'course',\r\n    Cell: ({...props}) => <SubjectCell course_id={props.data[props.row.index].course_id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Course category' className='min-w-125px' />\r\n    ),\r\n    id: 'course_category',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='slug' className='min-w-125px' />,\r\n    accessor: 'slug',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='image' className='min-w-125px' />\r\n    ),\r\n    id: 'co-image',\r\n    Cell: ({...props}) => <UserLastLoginCell image={props.data[props.row.index].image} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Position' className='min-w-125px' />\r\n    ),\r\n    accessor: 'position',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Course Category</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  course_id?: number\r\n  course_category?: string\r\n  slug?: string\r\n  image?: string\r\n  position?: number\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    course_category: Yup.string().required('Course Category is required'),\r\n    slug: Yup.string().required('Slug is required'),\r\n    position: Yup.number().required('Category position is required'),\r\n    course_id: Yup.number().required('Course is required'),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  course_id: undefined,\r\n  course_category: '',\r\n  slug: '',\r\n  image: undefined,\r\n  position: undefined,\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useEffect, useMemo, useRef, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport ReactQuill from 'react-quill'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\nimport {useCommonData} from '../../commonData/CommonDataProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const {allCourses} = useCommonData()\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    course_id: role.course_id || initialUser.course_id,\r\n    course_category: role.course_category || initialUser.course_category,\r\n    slug: role.slug || initialUser.slug,\r\n    image: role.image || initialUser.image,\r\n    position: role.position || initialUser.position,\r\n  })\r\n\r\n  const questionRef: any = useRef(null)\r\n\r\n  useEffect(() => {\r\n    console.log(roleForEdit, 'roleforedit')\r\n  }, [roleForEdit])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      values.image = roleForEdit.image\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Sponsorship Program Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  const uploadImage = async (e: any) => {\r\n    const file = e.currentTarget.files[0]\r\n    const fd = new FormData()\r\n    fd.append('image', file)\r\n    await axios\r\n      .post(`${API_URL}/upload`, fd)\r\n      .then((data: AxiosResponse<any>) => {\r\n        setRoleForEdit({...roleForEdit, image: data.data})\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue, values, touched, setFieldError, errors}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='fv-row mb-7'>\r\n                <label className='d-block form-label'>Category Image</label>\r\n                <div className='image-input image-input-outline' data-kt-image-input='true'>\r\n                  <div className=''>\r\n                    <img\r\n                      src={\r\n                        roleForEdit?.image == null || roleForEdit?.image == ''\r\n                          ? toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n                          : roleForEdit?.image\r\n                      }\r\n                      alt='avatar'\r\n                      className='image-input-wrapper w-125px h-125px'\r\n                    />\r\n                  </div>\r\n                  <label\r\n                    className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                    data-kt-image-input-action='change'\r\n                    data-bs-toggle='tooltip'\r\n                    title='Change avatar'\r\n                  >\r\n                    <i className='bi bi-pencil-fill fs-7'></i>\r\n                    <input\r\n                      type='file'\r\n                      name='profile_image'\r\n                      accept='.png, .jpg, .jpeg'\r\n                      onChange={uploadImage}\r\n                    />\r\n                    <input type='hidden' name='avatar_remove' />\r\n                  </label>\r\n                  {roleForEdit.image !== null && (\r\n                    <button\r\n                      className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                      data-kt-image-input-action='remove'\r\n                      data-bs-toggle='tooltip'\r\n                      title='Remove avatar'\r\n                      type='button'\r\n                      onClick={() => setRoleForEdit({...roleForEdit, image: ''})}\r\n                    >\r\n                      <i className='bi bi-x fs-2'></i>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <div className='form-text'>Allowed file types: png, jpg, jpeg.</div>\r\n              </div>\r\n\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='d-flex align-items-center form-label'>\r\n                  <span className='required'>Select Course</span>\r\n                </label>\r\n\r\n                <Field\r\n                  as='select'\r\n                  name='course_id'\r\n                  className='form-select mb-2'\r\n                  placeholder={'Select Course'}\r\n                >\r\n                  <option></option>\r\n                  {allCourses.map((item: any) => (\r\n                    <option key={item.id} value={item.id}>\r\n                      {item.course_name}\r\n                    </option>\r\n                  ))}\r\n                </Field>\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='course_id' />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label required'>Course Category Name</label>\r\n                <Field\r\n                  name='course_category'\r\n                  className='form-control mb-2'\r\n                  onChange={(e: any) => {\r\n                    setFieldValue('course_category', e.target.value)\r\n                    setFieldValue('slug', e.target.value.replaceAll(' ', '-'))\r\n                    setRoleForEdit({...roleForEdit, slug: e.target.value.replaceAll(' ', '-')})\r\n                  }}\r\n                  placeholder={'Enter Course Category Name'}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='course_category' />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label required'>Category Slug</label>\r\n\r\n                <Field\r\n                  name='category_slug'\r\n                  className='form-control mb-2'\r\n                  placeholder={'Enter Category Slug'}\r\n                  value={roleForEdit.slug}\r\n                  onChange={(e: any) => {\r\n                    setFieldValue('slug', e.target.value.replaceAll(' ', '-'))\r\n                    setRoleForEdit({...roleForEdit, slug: e.target.value.replaceAll(' ', '-')})\r\n                  }}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='slug' />\r\n                </div>\r\n              </div>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='d-flex align-items-center form-label'>\r\n                  <span className='required'>Position</span>\r\n                </label>\r\n\r\n                <Field\r\n                  name='position'\r\n                  type='number'\r\n                  className='form-control mb-2'\r\n                  placeholder={'Enter Category Position'}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='position' />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst QuestionList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuestionListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <QuestionList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {QuestionListWrapper}\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/common'\r\nconst SUBJECT_URL = `${API_URL}/subject`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios.get(`${SUBJECT_URL}?${query}`).then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${SUBJECT_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(SUBJECT_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${SUBJECT_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (questionId: ID): Promise<void> => {\r\n  return axios.delete(`${SUBJECT_URL}/${questionId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (questionId: Array<ID>): Promise<void> => {\r\n  const requests = questionId.map((id) => axios.delete(`${SUBJECT_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, updateStatus, createUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n    setRole('')\r\n    setLastLogin('')\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {question_type: role, level: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Question Type:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Objective'>Objective</option>\r\n              <option value='True/False'>True/False</option>\r\n              <option value='Fill In The Blanks'>Fill In The Blanks</option>\r\n              <option value='Subjective'>Subjective</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Difficulty Level:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Easy'>Easy</option>\r\n              <option value='Moderate'>Moderate</option>\r\n              <option value='Difficult'>Difficult</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={resetData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={filterData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {Link} from 'react-router-dom'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'subjects'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button onClick={openAddUserModal} className='btn btn-primary'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Subject\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {useParams} from 'react-router-dom'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Subject'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: any\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      <div className='d-flex flex-column'>\r\n        <a\r\n          onClick={openEditModal}\r\n          style={{cursor: 'pointer'}}\r\n          className='text-gray-800 text-hover-primary mb-1'\r\n        >\r\n          {user?.subject_name}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id?: ID\r\n  status: any\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({id, status}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input me-3'\r\n            data-switch='true'\r\n            data-on-color='#D8322D'\r\n            type='checkbox'\r\n            name='status'\r\n            data-off-color='warning'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport axios, {AxiosResponse} from 'axios'\nimport clsx from 'clsx'\nimport {FC, useEffect, useState} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  courses: any\n}\n\nconst SubjectCell: FC<Props> = ({courses}) => {\n  const {allCategories} = useCommonData()\n\n  let item = allCategories?.filter((x: any) =>\n    courses?.some((y: any) => y.course_category_id == x.id)\n  )\n  item = item?.flatMap((x: any) => [x.course_category])\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.join(', ')}</div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {SubjectCell} from './SubjectCell'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Subject' className='min-w-125px' />\r\n    ),\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Courses' className='min-w-125px' />\r\n    ),\r\n    id: 'courses',\r\n    Cell: ({...props}) => <SubjectCell courses={props.data[props.row.index].courses} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Action' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useEffect, useMemo, useState} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nconst UsersTable = () => {\r\n  const params = useParams()\r\n  const {id} = params\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Subject</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  subject_name?: string\r\n  courses?: any\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    subject_name: Yup.string().required('Subject Name is required'),\r\n    courses: Yup.array().min(1),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  courses: [],\r\n  subject_name: '',\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useEffect, useMemo, useRef, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport {useCommonData} from '../../commonData/CommonDataProvider'\r\nimport Select from 'react-select'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {allCourses, allCategories} = useCommonData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [selectedCourses, setSelectedCourses] = useState<any>(null)\r\n\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    courses: role.courses || initialUser.courses,\r\n    subject_name: role.subject_name || initialUser.subject_name,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (roleForEdit.id && allCategories.length > 0) {\r\n      const selected = allCategories.filter((x: any) =>\r\n        roleForEdit?.courses.some((y: any) => y.course_category_id == x.id)\r\n      )\r\n      setSelectedCourses(selected)\r\n    }\r\n  }, [allCategories])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Subject Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue, values, touched, setFieldError, errors}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label required'>Select Course</label>\r\n                <Select\r\n                  isMulti\r\n                  name='courses'\r\n                  options={allCategories}\r\n                  className='basic-multi-select'\r\n                  classNamePrefix='select'\r\n                  value={selectedCourses}\r\n                  onChange={(e, i) => {\r\n                    setFieldValue('courses', e)\r\n                    setSelectedCourses(e)\r\n                  }}\r\n                  getOptionValue={(option: any) => option.id}\r\n                  formatOptionLabel={(data: any) => {\r\n                    return (\r\n                      <div style={{display: 'flex'}}>\r\n                        <div>{data.courses.course_name}</div>\r\n                        <div style={{}}> - {data.course_category}</div>\r\n                      </div>\r\n                    )\r\n                  }}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='courses' />\r\n                </div>\r\n              </div>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='d-flex align-items-center form-label'>\r\n                  <span className='required'>Subject Name</span>\r\n                </label>\r\n\r\n                <Field\r\n                  name='subject_name'\r\n                  className='form-control mb-2'\r\n                  placeholder={'Enter Subject Name'}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='subject_name' />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst QuestionList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuestionViewWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <QuestionList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {QuestionViewWrapper}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'courses'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Course\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Courses'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {getUserById, updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n  console.log(stat, 'stat')\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\n// import {useCommonData} from '../../../commonData/CommonDataProvider'\n\ntype Props = {\n  image: any\n}\n\nconst CourseImageCell: FC<Props> = ({image}) => {\n  return (\n    <div className='d-flex align-items-center'>\n      <img\n        className='d-flex flex-column'\n        src={image}\n        style={{height: 30, width: 30, borderRadius: 60}}\n      ></img>\n    </div>\n  )\n}\n\nexport {CourseImageCell}\n","import {Column} from 'react-table'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {CourseImageCell} from './CourseImageCell'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Course Name' className='min-w-125px' />\r\n    ),\r\n    accessor: 'course_name',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Course image' className='min-w-125px' />\r\n    ),\r\n    id: 'image',\r\n    Cell: ({...props}) => <CourseImageCell image={props.data[props.row.index].image} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='position' className='min-w-125px' />\r\n    ),\r\n    accessor: 'position',\r\n  },\r\n\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Course</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  course_name?: string\r\n  image?: string\r\n  position?: number\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    course_name: Yup.string().required('Course Name is required'),\r\n    position: Yup.number().required('Position is required'),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  course_name: '',\r\n  image: undefined,\r\n  position: undefined,\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    course_name: role.course_name || initialUser.course_name,\r\n    position: role.position || initialUser.position,\r\n    image: role.image || initialUser.image,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      values.image = roleForEdit.image\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Course Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  const uploadImage = async (e: any) => {\r\n    const file = e.currentTarget.files[0]\r\n    const fd = new FormData()\r\n    fd.append('image', file)\r\n    await axios\r\n      .post(`${API_URL}/upload`, fd)\r\n      .then((data: AxiosResponse<any>) => {\r\n        setRoleForEdit({...roleForEdit, image: data.data})\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {() => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='fv-row mb-7'>\r\n                <label className='d-block form-label'>Course Image</label>\r\n                <div className='image-input image-input-outline' data-kt-image-input='true'>\r\n                  <div className=''>\r\n                    <img\r\n                      src={\r\n                        roleForEdit?.image == null || roleForEdit?.image == ''\r\n                          ? toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n                          : roleForEdit?.image\r\n                      }\r\n                      alt='avatar'\r\n                      className='image-input-wrapper w-125px h-125px'\r\n                    />\r\n                  </div>\r\n                  <label\r\n                    className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                    data-kt-image-input-action='change'\r\n                    data-bs-toggle='tooltip'\r\n                    title='Change avatar'\r\n                  >\r\n                    <i className='bi bi-pencil-fill fs-7'></i>\r\n                    <input\r\n                      type='file'\r\n                      name='profile_image'\r\n                      accept='.png, .jpg, .jpeg'\r\n                      onChange={uploadImage}\r\n                    />\r\n                    <input type='hidden' name='avatar_remove' />\r\n                  </label>\r\n                  {roleForEdit.image !== null && (\r\n                    <button\r\n                      className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                      data-kt-image-input-action='remove'\r\n                      data-bs-toggle='tooltip'\r\n                      title='Remove avatar'\r\n                      type='button'\r\n                      onClick={() => setRoleForEdit({...roleForEdit, image: ''})}\r\n                    >\r\n                      <i className='bi bi-x fs-2'></i>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <div className='form-text'>Allowed file types: png, jpg, jpeg.</div>\r\n              </div>\r\n\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label required'>Course Name</label>\r\n\r\n                <Field\r\n                  name='course_name'\r\n                  className='form-control mb-2'\r\n                  placeholder={'Enter Course Name'}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='course_name' />\r\n                </div>\r\n              </div>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='d-flex align-items-center form-label'>\r\n                  <span className='required'>Position</span>\r\n                </label>\r\n\r\n                <Field\r\n                  name='position'\r\n                  className='form-control mb-2'\r\n                  type='number'\r\n                  placeholder={'Enter Order of course'}\r\n                />\r\n                <div className='text-danger mt-2'>\r\n                  <ErrorMessage name='position' />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {QuestionListWrapper} from './category-list/QuestionList'\r\nimport {QuestionViewWrapper} from './subject-list/QuestionView'\r\nimport {UsersListWrapper} from './course-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Courses',\r\n    path: '/course/courses',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst CoursePage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='courses'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Courses list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route\r\n          path='course-category'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Course Category list</PageTitle>\r\n              <QuestionListWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route\r\n          path='subjects'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Subject list</PageTitle>\r\n              <QuestionViewWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route index element={<Navigate to='/sponsor/sponsors' />} />\r\n      </Route>\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default CoursePage\r\n","const API_URL = 'https://quiz.datacubeindia.com/common/option'\nexport {API_URL}\n"],"names":["CATEGORY_URL","updateStatus","status","id","axios","then","response","data","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","ExportReactCSV","csvData","fileName","type","className","path","CSVLink","filename","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","onChange","e","target","onClick","filter","undefined","initialQueryState","question_type","level","UsersListToolbar","users","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","questionId","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","user","console","log","style","cursor","course_category","UserLastLoginCell","image","src","height","width","borderRadius","UserTwoStepsCell","stat","setStatus","name","checked","currentTarget","Swal","title","text","icon","confirmButtonText","UserActionsCell","deleteItem","href","UserSelectionCell","isSelected","includes","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","UserSelectionHeader","COURSE_URL","CommonDataContext","allCourses","allCategories","CommonDataProvider","setCourses","setCategories","getData","catch","err","useCommonData","SubjectCell","course_id","item","find","x","course_name","usersColumns","props","Cell","index","accessor","UsersListLoading","boxShadow","backgroundColor","color","fontWeight","margin","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","createAccountSchemas","Yup","shape","required","slug","initialUser","UserEditModalForm","isUserLoading","currentSchema","roleForEdit","setRoleForEdit","useRef","submitStep","values","actions","resetForm","error","uploadImage","file","files","fd","FormData","append","API_URL","validationSchema","initialValues","onSubmit","validateOnChange","setFieldValue","touched","setFieldError","errors","toAbsoluteUrl","alt","accept","as","replaceAll","UserEditModalFormWrapper","enabledQuery","isNotEmpty","enabled","onError","UserEditModal","document","body","classList","add","remove","tabIndex","QuestionList","QuestionListWrapper","SUBJECT_URL","subject_name","courses","some","y","course_category_id","flatMap","join","useParams","min","selectedCourses","setSelectedCourses","isMulti","options","classNamePrefix","getOptionValue","option","formatOptionLabel","display","QuestionViewWrapper","userIds","userId","CourseImageCell","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","element","breadcrumbs","to"],"sourceRoot":""}