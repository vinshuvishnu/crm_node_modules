{"version":3,"file":"static/js/636.5dc0edf0.chunk.js","mappings":"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","sources":["app/pages/feedback/booksList/core/_requests.ts","app/pages/feedback/booksList/core/QueryRequestProvider.tsx","app/pages/feedback/booksList/core/QueryResponseProvider.tsx","app/pages/feedback/booksList/core/ListViewProvider.tsx","app/pages/feedback/booksList/components/Export.js","app/pages/feedback/booksList/components/header/UserListToolbar.tsx","app/pages/feedback/booksList/components/header/UsersListGrouping.tsx","app/pages/feedback/booksList/components/header/UsersListSearchComponent.tsx","app/pages/feedback/booksList/components/header/UsersListHeader.tsx","app/pages/feedback/booksList/table/columns/CustomHeaderColumn.tsx","app/pages/feedback/booksList/table/columns/CustomRow.tsx","app/pages/feedback/booksList/table/columns/UserTwoStepsCell.tsx","app/pages/feedback/booksList/table/columns/UserActionsCell.tsx","app/pages/feedback/booksList/table/columns/UserSelectionCell.tsx","app/pages/feedback/booksList/table/columns/UserCustomHeader.tsx","app/pages/feedback/booksList/table/columns/UserSelectionHeader.tsx","app/pages/feedback/commonData/CommonDataProvider.tsx","app/pages/feedback/booksList/table/columns/WalletInfo.tsx","app/pages/feedback/booksList/table/columns/_columns.tsx","app/pages/feedback/booksList/components/loading/UsersListLoading.tsx","app/pages/feedback/booksList/components/pagination/UsersListPagination.tsx","app/pages/feedback/booksList/table/UsersTable.tsx","app/pages/feedback/booksList/UsersList.tsx","app/pages/feedback/FeedbackPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/user'\r\nconst FEEDBACK_URL = `${API_URL}/feedback`\r\nconst USERS = 'https://quiz.datacubeindia.com/user/user/getAll'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${FEEDBACK_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getAllUsers = (): Promise<any> => {\r\n  return axios.get(`${USERS}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${FEEDBACK_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\n// const createUser = (user: User): Promise<User | undefined> => {\r\n//   return axios\r\n//     .post(FEEDBACK_URL, user)\r\n//     .then((response: AxiosResponse<Response<User>>) => response.data)\r\n//     .then((response: Response<User>) => response.data)\r\n// }\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${FEEDBACK_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${FEEDBACK_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${FEEDBACK_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  // createUser,\r\n  updateStatus,\r\n  getAllUsers,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'feedbacks'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      {/* <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Book\r\n      </button> */}\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search feedback'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {getUserById, updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n  console.log(stat, 'stat')\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-users-table-filter='delete_row'\r\n        onClick={async () => await deleteItem.mutateAsync()}\r\n      >\r\n        <i className='fa fa-trash fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {FC, useState, createContext, useContext, useMemo, useEffect} from 'react'\nimport {getAllUsers} from '../booksList/core/_requests'\nconst CommonDataContext = createContext<any>({\n  users: [],\n})\n\nconst CommonDataProvider: FC = ({children}) => {\n  const [users, setUsers] = useState<Array<any>>()\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await getAllUsers()\n      .then((data) => {\n        setUsers(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <CommonDataContext.Provider\n      value={{\n        users,\n      }}\n    >\n      {children}\n    </CommonDataContext.Provider>\n  )\n}\n\nconst useCommonData = () => useContext(CommonDataContext)\n\nexport {CommonDataProvider, useCommonData}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  user: any\n}\n\nconst WalletInfo: FC<Props> = ({user}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {users} = useCommonData()\n\n  const item = users?.find((x: any) => x.id == user.user_id)\n\n  const openEditModal = () => {\n    setItemIdForUpdate(user.id)\n  }\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>\n        <a\n          onClick={openEditModal}\n          style={{cursor: 'pointer'}}\n          className='text-gray-800 text-hover-primary mb-1'\n        >\n          {item?.firstname} {item?.lastname}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport {WalletInfo}\n","import {Column} from 'react-table'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {WalletInfo} from './WalletInfo'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <WalletInfo user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Email Id' className='min-w-125px' />\r\n    ),\r\n    accessor: 'email',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Mobile Number' className='min-w-125px' />\r\n    ),\r\n    accessor: 'mobile_number',\r\n  },\r\n\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Feedback' className='min-w-125px' />\r\n    ),\r\n    accessor: 'message',\r\n  },\r\n\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {/* {itemIdForUpdate !== undefined && <UserEditModal />} */}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <UsersList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './booksList/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Feedback',\r\n    path: '/feedback',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst BookPage = () => {\r\n  return (\r\n    <>\r\n      <PageTitle breadcrumbs={usersBreadcrumbs}>Feedbacks list</PageTitle>\r\n      <UsersListWrapper />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BookPage\r\n"],"names":["FEEDBACK_URL","updateStatus","status","id","axios","then","response","data","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","ExportReactCSV","csvData","fileName","type","className","path","CSVLink","filename","UsersListToolbar","users","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","onClick","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","undefined","search","initialQueryState","placeholder","onChange","e","target","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserTwoStepsCell","stat","setStatus","console","log","name","checked","currentTarget","Swal","title","text","icon","confirmButtonText","UserActionsCell","MenuComponent","deleteItem","userId","UserSelectionCell","isSelected","includes","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","CommonDataContext","CommonDataProvider","setUsers","getData","catch","err","WalletInfo","user","item","find","x","user_id","firstname","lastname","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","breadcrumbs"],"sourceRoot":""}