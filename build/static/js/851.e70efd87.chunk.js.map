{"version":3,"file":"static/js/851.e70efd87.chunk.js","mappings":"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","sources":["app/pages/books/booksList/core/_requests.ts","app/pages/books/booksList/core/QueryRequestProvider.tsx","app/pages/books/booksList/core/QueryResponseProvider.tsx","app/pages/books/booksList/core/ListViewProvider.tsx","app/pages/books/booksList/components/Export.js","app/pages/books/booksList/components/header/UserListToolbar.tsx","app/pages/books/booksList/components/header/UsersListGrouping.tsx","app/pages/books/booksList/components/header/UsersListSearchComponent.tsx","app/pages/books/booksList/components/header/UsersListHeader.tsx","app/pages/books/booksList/table/columns/CustomHeaderColumn.tsx","app/pages/books/booksList/table/columns/CustomRow.tsx","app/pages/books/booksList/table/columns/UserTwoStepsCell.tsx","app/pages/books/booksList/table/columns/UserActionsCell.tsx","app/pages/books/booksList/table/columns/UserSelectionCell.tsx","app/pages/books/booksList/table/columns/UserCustomHeader.tsx","app/pages/books/booksList/table/columns/UserSelectionHeader.tsx","app/pages/books/commonData/CommonDataProvider.tsx","app/pages/books/booksList/table/columns/QuizCell.tsx","app/pages/books/booksList/table/columns/CommonCell.tsx","app/pages/books/booksList/table/columns/_columns.tsx","app/pages/books/booksList/components/loading/UsersListLoading.tsx","app/pages/books/booksList/components/pagination/UsersListPagination.tsx","app/pages/books/booksList/table/UsersTable.tsx","app/pages/books/booksList/user-edit-modal/UserEditModalHeader.tsx","app/pages/books/booksList/core/_models.ts","app/pages/books/booksList/user-edit-modal/UserEditModalForm.tsx","app/pages/books/booksList/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/books/booksList/user-edit-modal/UserEditModal.tsx","app/pages/books/booksList/UsersList.tsx","app/pages/books/BookPage.tsx","app/pages/settings/components/ApiUrl.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/common'\r\nconst BOOK_URL = `${API_URL}/book`\r\nconst COURSE_URL = `${API_URL}/course`\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios.get(`${BOOK_URL}?${query}`).then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getAllCourses = (): Promise<any> => {\r\n  return axios.get(`${COURSE_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${BOOK_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(BOOK_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${BOOK_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${BOOK_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${BOOK_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateStatus,\r\n  getAllCourses,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'books'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Book\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search book'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {getUserById, updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n  console.log(stat, 'stat')\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {FC, useState, createContext, useContext, useMemo, useEffect} from 'react'\nimport {getAllCourses} from '../booksList/core/_requests'\nconst CommonDataContext = createContext<any>({\n  allCourses: [],\n})\n\nconst CommonDataProvider: FC = ({children}) => {\n  const [allCourses, setCourses] = useState<Array<any>>()\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await getAllCourses()\n      .then((data) => {\n        setCourses(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <CommonDataContext.Provider\n      value={{\n        allCourses,\n      }}\n    >\n      {children}\n    </CommonDataContext.Provider>\n  )\n}\n\nconst useCommonData = () => useContext(CommonDataContext)\n\nexport {CommonDataProvider, useCommonData}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  courses: any\n}\n\nconst QuizCell: FC<Props> = ({courses}) => {\n  const {allCourses} = useCommonData()\n\n  const selected = allCourses?.filter((x: any) => courses?.some((y: any) => y.course_id == x.id))\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{selected?.map((x: any) => x.course_name).join(', ')}</div>\n    </div>\n  )\n}\n\nexport {QuizCell}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\n\ntype Props = {\n  wallet: any\n}\n\nconst CommonCell: FC<Props> = ({wallet}) => {\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{wallet}</div>\n    </div>\n  )\n}\n\nexport {CommonCell}\n","import {Column} from 'react-table'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {WalletInfo} from './WalletInfo'\r\nimport {QuizCell} from './QuizCell'\r\nimport {CommonCell} from './CommonCell'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Book Name' className='min-w-125px' />\r\n    ),\r\n    accessor: 'name',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Course' className='min-w-125px' />\r\n    ),\r\n    id: 'courses',\r\n    Cell: ({...props}) => <QuizCell courses={props.data[props.row.index].courses} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Book Price' className='min-w-125px' />\r\n    ),\r\n    accessor: 'amount',\r\n  },\r\n\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Date created' className='min-w-125px' />\r\n    ),\r\n    id: 'createdAt',\r\n    Cell: ({...props}) => (\r\n      <CommonCell wallet={props.data[props.row.index].createdAt?.split('T')[0]} />\r\n    ),\r\n  },\r\n\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Book</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  amount?: number\r\n  description?: string\r\n  image?: string\r\n  type?: string\r\n  book_pdf?: string\r\n  new_release?: boolean\r\n  courses?: any\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    name: Yup.string().required('Book name is required'),\r\n    type: Yup.string().required('Book type is required'),\r\n    // amount: Yup.number().required('Amount is required'),\r\n    book_pdf: Yup.string().required('Book pdf url is required'),\r\n    courses: Yup.array().min(1),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  name: '',\r\n  description: '',\r\n  image: '',\r\n  book_pdf: '',\r\n  new_release: false,\r\n  courses: [],\r\n  amount: undefined,\r\n  type: 'FREE',\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import {FC, useEffect, useMemo, useRef, useState} from 'react'\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from 'formik'\r\nimport {toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport {useCommonData} from '../../commonData/CommonDataProvider'\r\nimport ReactSelect from 'react-select'\r\nimport axios, {AxiosResponse} from 'axios'\r\nimport {API_URL} from '../../../settings/components/ApiUrl'\r\nimport ReactQuill from 'react-quill'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {allCourses} = useCommonData()\r\n  const {refetch} = useQueryResponse()\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [selectedCourses, setSelectedCourses] = useState<any>(null)\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    id: role.id || initialUser.id,\r\n    name: role.name || initialUser.name,\r\n    description: role.description || initialUser.description,\r\n    image: role.image || initialUser.image,\r\n    book_pdf: role.book_pdf || initialUser.book_pdf,\r\n    new_release: role.new_release || initialUser.new_release,\r\n    courses: role.courses || initialUser.courses,\r\n    type: role.type || initialUser.type,\r\n    amount: role.amount || initialUser.amount,\r\n  })\r\n  const questionRef: any = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (roleForEdit.id && allCourses.length > 0) {\r\n      const selected = allCourses.filter((x: any) =>\r\n        roleForEdit?.courses.some((y: any) => y.course_id == x.id)\r\n      )\r\n      setSelectedCourses(selected)\r\n    }\r\n  }, [allCourses])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    try {\r\n      values.description = roleForEdit.description\r\n      await createUser(values)\r\n      actions.resetForm()\r\n      cancel(true)\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Book Updated!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n    } catch (ex) {\r\n      console.error(ex)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  const uploadImage = async (e: any) => {\r\n    const file = e.currentTarget.files[0]\r\n    const fd = new FormData()\r\n    fd.append('image', file)\r\n    await axios\r\n      .post(`${API_URL}/upload`, fd)\r\n      .then((data: AxiosResponse<any>) => {\r\n        setRoleForEdit({...roleForEdit, image: data.data})\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }\r\n\r\n  const imageHandler = (e: any) => {\r\n    const input: any = document.createElement('input')\r\n    input.setAttribute('type', 'file')\r\n    input.setAttribute('accept', 'image/*')\r\n    input.click()\r\n    input.onchange = async () => {\r\n      var file: any = input?.files[0]\r\n      var formData = new FormData()\r\n      formData.append('image', file)\r\n      await axios\r\n        .post(`${API_URL}/upload`, formData)\r\n        .then((data: AxiosResponse<any>) => {\r\n          var range = questionRef.current.getEditor().getSelection()\r\n          questionRef.current.getEditor().insertEmbed(range?.index, 'image', data.data)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err, 'err')\r\n        })\r\n    }\r\n  }\r\n\r\n  const modules = useMemo(\r\n    () => ({\r\n      toolbar: {\r\n        container: [\r\n          [{header: [1, 2, 3, 4, 5, 6, false]}],\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{list: 'ordered'}, {list: 'bullet'}, {indent: '-1'}, {indent: '+1'}],\r\n          ['link', 'image'],\r\n          ['clean'],\r\n        ],\r\n        handlers: {\r\n          image: imageHandler,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const formats = [\r\n    'header',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'list',\r\n    'bullet',\r\n    'indent',\r\n    'link',\r\n    'image',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className='stepper stepper-links d-flex flex-column' id='kt_create_account_stepper'>\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='fv-row mb-7'>\r\n                <label className='d-block form-label'>Book Thumbnail</label>\r\n                <div className='image-input image-input-outline' data-kt-image-input='true'>\r\n                  <div className=''>\r\n                    <img\r\n                      src={\r\n                        roleForEdit?.image == null || roleForEdit?.image == ''\r\n                          ? toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n                          : roleForEdit?.image\r\n                      }\r\n                      alt='avatar'\r\n                      className='image-input-wrapper w-125px h-125px'\r\n                    />\r\n                  </div>\r\n                  <label\r\n                    className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                    data-kt-image-input-action='change'\r\n                    data-bs-toggle='tooltip'\r\n                    title='Change avatar'\r\n                  >\r\n                    <i className='bi bi-pencil-fill fs-7'></i>\r\n                    <input\r\n                      type='file'\r\n                      name='profile_image'\r\n                      accept='.png, .jpg, .jpeg'\r\n                      onChange={uploadImage}\r\n                    />\r\n                    <input type='hidden' name='avatar_remove' />\r\n                  </label>\r\n                  {roleForEdit.image !== '' && (\r\n                    <button\r\n                      className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n                      data-kt-image-input-action='remove'\r\n                      data-bs-toggle='tooltip'\r\n                      title='Remove avatar'\r\n                      type='button'\r\n                      onClick={() => setRoleForEdit({...roleForEdit, image: ''})}\r\n                    >\r\n                      <i className='bi bi-x fs-2'></i>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <div className='form-text'>Allowed file types: png, jpg, jpeg.</div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label required'>Select Courses</label>\r\n                  <ReactSelect\r\n                    isMulti\r\n                    name='courses'\r\n                    options={allCourses}\r\n                    className='basic-multi-select'\r\n                    classNamePrefix='select'\r\n                    value={selectedCourses}\r\n                    onChange={(e: any) => {\r\n                      setFieldValue('courses', e)\r\n                      setSelectedCourses(e)\r\n                    }}\r\n                    getOptionLabel={(option: any) => option.course_name}\r\n                    getOptionValue={(option: any) => option.id}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='courses' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Book Name</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='name'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Book Name'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='name' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-label'>Book Price</label>\r\n\r\n                  <Field\r\n                    name='amount'\r\n                    type='number'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter Book Price'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='amount' />\r\n                  </div>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Book Type</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='type'\r\n                    as='select'\r\n                    className='form-select mb-2'\r\n                    placeholder={'select book type '}\r\n                  >\r\n                    <option>FREE</option>\r\n                    <option>PAID</option>\r\n                  </Field>\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='type' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='d-flex flex-wrap gap-5 mb-10'>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-15'>\r\n                    <Field className='form-check-input' type='checkbox' name='new_release' />\r\n                    <span className='form-check-label fs-15 fw-bold'>\r\n                      Show in New Release Section\r\n                    </span>\r\n                  </label>\r\n                </div>\r\n                <div className='fv-row w-100 flex-md-root'>\r\n                  <label className='d-flex align-items-center form-label'>\r\n                    <span className='required'>Book PDF URL</span>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name='book_pdf'\r\n                    className='form-control mb-2'\r\n                    placeholder={'Enter pdf url'}\r\n                  />\r\n                  <div className='text-danger mt-2'>\r\n                    <ErrorMessage name='book_pdf' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='fv-row w-100 mb-10'>\r\n                <label className='form-label'>Description</label>\r\n                <ReactQuill\r\n                  onChange={(content, delta, source, editor) => {\r\n                    setRoleForEdit({...roleForEdit, description: content})\r\n                  }}\r\n                  id='description'\r\n                  value={roleForEdit.description}\r\n                  formats={formats}\r\n                  modules={modules}\r\n                  ref={questionRef}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'></div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>{'Submit'}</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <UsersList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './booksList/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Books',\r\n    path: '/books',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst BookPage = () => {\r\n  return (\r\n    <>\r\n      <PageTitle breadcrumbs={usersBreadcrumbs}>Books list</PageTitle>\r\n      <UsersListWrapper />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BookPage\r\n","const API_URL = 'https://quiz.datacubeindia.com/common/option'\nexport {API_URL}\n"],"names":["API_URL","BOOK_URL","COURSE_URL","updateStatus","status","id","axios","then","response","data","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","ExportReactCSV","csvData","fileName","type","className","path","CSVLink","filename","UsersListToolbar","users","onClick","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","undefined","search","initialQueryState","placeholder","onChange","e","target","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserTwoStepsCell","stat","setStatus","console","log","name","checked","currentTarget","Swal","title","text","icon","confirmButtonText","UserActionsCell","MenuComponent","deleteItem","userId","href","UserSelectionCell","isSelected","includes","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","CommonDataContext","allCourses","CommonDataProvider","setCourses","getData","catch","err","useCommonData","QuizCell","courses","filter","x","some","y","course_id","course_name","join","CommonCell","wallet","usersColumns","props","Cell","index","accessor","createdAt","split","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","createAccountSchemas","Yup","shape","required","book_pdf","min","initialUser","description","image","new_release","amount","UserEditModalForm","role","isUserLoading","currentSchema","selectedCourses","setSelectedCourses","roleForEdit","setRoleForEdit","questionRef","useRef","submitStep","values","actions","user","resetForm","error","uploadImage","file","files","fd","FormData","append","imageHandler","input","document","createElement","setAttribute","click","onchange","formData","range","current","getEditor","getSelection","insertEmbed","modules","toolbar","container","header","list","indent","handlers","formats","validationSchema","initialValues","onSubmit","validateOnChange","setFieldValue","src","toAbsoluteUrl","alt","accept","isMulti","options","classNamePrefix","getOptionLabel","option","getOptionValue","as","content","delta","source","editor","ref","UserEditModalFormWrapper","enabledQuery","isNotEmpty","enabled","onError","UserEditModal","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","breadcrumbs"],"sourceRoot":""}