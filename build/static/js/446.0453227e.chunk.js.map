{"version":3,"file":"static/js/446.0453227e.chunk.js","mappings":"mOAMMA,EAAc,UADJ,wCACI,eAedC,EAAa,SAACC,GAClB,OAAOC,IAAAA,KACCH,EAAgBE,GACrBE,MAAK,SAACC,GAAD,OAAmDA,EAASC,QACjEF,MAAK,SAACC,GAAD,OAAoCA,EAASC,SAGjDC,EAAa,SAACL,GAClB,OAAOC,IAAAA,IAAA,UACGH,EADH,YACqBE,EAAKM,IAAMN,GACpCE,MAAK,SAACC,GAAD,OAAmDA,EAASC,QACjEF,MAAK,SAACC,GAAD,OAAoCA,EAASC,S,SCzBjDG,GAAsBC,EAAAA,EAAAA,eAAwCC,EAAAA,IAE9DC,EAA2B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjC,GAA0BC,EAAAA,EAAAA,UAAqBH,EAAAA,GAAAA,OAA/C,eAAOI,EAAP,KAAcC,EAAd,KAOA,OACE,SAACP,EAAoBQ,SAArB,CAA8BC,MAAO,CAACH,MAAAA,EAAOI,YAN3B,SAACC,GACnB,IAAMC,GAAY,kBAAON,GAAUK,GACnCJ,EAASK,KAIT,SACGR,KAKDS,EAAkB,kBAAMC,EAAAA,EAAAA,YAAWd,ICTnCe,GAAuBC,EAAAA,EAAAA,IAAkCC,EAAAA,IACzDC,EAA4B,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAC3BE,EAASO,IAATP,MACP,GAA0BD,EAAAA,EAAAA,WAAiBc,EAAAA,EAAAA,IAAsBb,IAAjE,eAAOc,EAAP,KAAcC,EAAd,KACMC,GAAeC,EAAAA,EAAAA,UAAQ,kBAAMJ,EAAAA,EAAAA,IAAsBb,KAAQ,CAACA,KAElEkB,EAAAA,EAAAA,YAAU,WACJJ,IAAUE,GACZD,EAASC,KAEV,CAACA,IAEJ,OAIIG,EAAAA,EAAAA,UAAS,GAAD,OACPC,EAAAA,GAAAA,WADO,YACeN,IACzB,WACE,OF1BW,SAACA,GAChB,OAAO1B,IAAAA,IAAA,UACGH,EADH,YACqB6B,IACzBzB,MAAK,SAACgC,GAAD,OAA+CA,EAAE9B,QEuB9C+B,CAASR,KAElB,CAACS,UAAW,EAAGC,kBAAkB,EAAMC,sBAAsB,IAR7DC,EADF,EACEA,WACAC,EAFF,EAEEA,QACMrC,EAHR,EAGEC,KASF,OACE,SAACkB,EAAqBP,SAAtB,CAA+BC,MAAO,CAACyB,UAAWF,EAAYC,QAAAA,EAASrC,SAAAA,EAAUwB,MAAAA,GAAjF,SACGhB,KAKD+B,EAAmB,kBAAMrB,EAAAA,EAAAA,YAAWC,IAEpCqB,EAAuB,WAC3B,IAAOxC,EAAYuC,IAAZvC,SACP,OAAKA,IAIU,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUC,OAHR,IAoBLwC,EAA0B,WAE9B,OADoBF,IAAbD,WC5DHI,GAAkBrC,EAAAA,EAAAA,eAAoCsC,EAAAA,IAEtDC,EAAuB,SAAC,GAAgB,IAAfpC,EAAc,EAAdA,SAC7B,GAAgCC,EAAAA,EAAAA,UAAoBkC,EAAAA,GAAAA,UAApD,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAA8CrC,EAAAA,EAAAA,UAAakC,EAAAA,GAAAA,iBAA3D,eAAOI,EAAP,KAAwBC,EAAxB,KACOV,EAAaC,IAAbD,UACDrC,EAAOuC,IACPS,GAAWtB,EAAAA,EAAAA,UAAQ,kBAAMuB,EAAAA,EAAAA,IAA6BZ,EAAWrC,KAAO,CAACqC,EAAWrC,IACpFkD,GAAgBxB,EAAAA,EAAAA,UAAQ,kBAAMyB,EAAAA,EAAAA,IAA2BnD,EAAM4C,KAAW,CAAC5C,EAAM4C,IAEvF,OACE,SAACH,EAAgB9B,SAAjB,CACEC,MAAO,CACLgC,SAAAA,EACAE,gBAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAE,cAAAA,EACAE,SAAU,SAAClD,IACTmD,EAAAA,EAAAA,IAAiBnD,EAAI0C,EAAUC,IAEjCS,YAAa,YACXC,EAAAA,EAAAA,IAAoBL,EAAeL,EAAa7C,IAElDwD,cAAe,WACbX,EAAY,MAdlB,SAkBGtC,KAKDkD,EAAc,kBAAMxC,EAAAA,EAAAA,YAAWwB,I,UCxC/BiB,EAAkB,WACtB,IAAO7C,EAAeG,IAAfH,YACAwB,EAAaC,IAAbD,UACP,GAAwB7B,EAAAA,EAAAA,YAAxB,eAAOmD,EAAP,KAAaC,EAAb,KACA,GAAkCpD,EAAAA,EAAAA,YAAlC,eAAOqD,EAAP,KAAkBC,EAAlB,MAEAnC,EAAAA,EAAAA,YAAU,WACRoC,EAAAA,GAAAA,qBACC,IAaH,OACE,iCAEE,oBACEf,SAAUX,EACV2B,KAAK,SACLC,UAAU,6BACV,uBAAqB,QACrB,yBAAuB,aALzB,WAOE,SAAC,KAAD,CAAOC,KAAK,0CAA0CD,UAAU,eAPlE,aAYA,iBAAKA,UAAU,qDAAqD,eAAa,OAAjF,WAEE,gBAAKA,UAAU,YAAf,UACE,gBAAKA,UAAU,2BAAf,+BAKF,gBAAKA,UAAU,+BAIf,iBAAKA,UAAU,YAAY,4BAA0B,OAArD,WAEE,iBAAKA,UAAU,QAAf,WACE,kBAAOA,UAAU,0BAAjB,oBACA,oBACEA,UAAU,0CACV,kBAAgB,OAChB,mBAAiB,gBACjB,mBAAiB,OACjB,4BAA0B,OAC1B,mBAAiB,OACjBE,SAAU,SAACC,GAAD,OAAOR,EAAQQ,EAAEC,OAAOzD,QAClCA,MAAO+C,EART,WAUE,mBAAQ/C,MAAM,MACd,mBAAQA,MAAM,gBAAd,4BACA,mBAAQA,MAAM,UAAd,sBACA,mBAAQA,MAAM,YAAd,wBACA,mBAAQA,MAAM,UAAd,sBACA,mBAAQA,MAAM,QAAd,0BAMJ,iBAAKqD,UAAU,QAAf,WACE,kBAAOA,UAAU,0BAAjB,0BACA,oBACEA,UAAU,0CACV,kBAAgB,OAChB,mBAAiB,gBACjB,mBAAiB,OACjB,4BAA0B,WAC1B,mBAAiB,OACjBE,SAAU,SAACC,GAAD,OAAON,EAAaM,EAAEC,OAAOzD,QACvCA,MAAOiD,EART,WAUE,mBAAQjD,MAAM,MACd,mBAAQA,MAAM,YAAd,wBACA,mBAAQA,MAAM,cAAd,0BACA,mBAAQA,MAAM,cAAd,0BACA,mBAAQA,MAAM,aAAd,+BAMJ,iBAAKqD,UAAU,6BAAf,WACE,mBACED,KAAK,SACLhB,SAAUX,EACViC,QArFO,WACjBzD,GAAY,QACV0D,OAAQ,CAACZ,KAAAA,EAAMa,WAAYX,IACxBY,EAAAA,MAmFKR,UAAU,2DACV,uBAAqB,OACrB,4BAA0B,QAN5B,oBAUA,mBACEjB,SAAUX,EACV2B,KAAK,SACLM,QAnGM,WAChBzD,GAAY,QAAC0D,YAAQG,GAAcD,EAAAA,MAmGzBR,UAAU,+BACV,uBAAqB,OACrB,4BAA0B,SAN5B,gC,UC5GCU,EAAiB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACtC,OACI,oBAAQb,KAAK,SAASC,UAAU,6BAAhC,WACI,SAAC,KAAD,CAAOC,KAAK,yCAAyCD,UAAU,gBAC/D,SAAC,EAAAa,QAAD,CAAS9E,KAAM4E,EAASG,SAAUF,EAAlC,wBCFNG,EAAmB,WACvB,IAAOjC,EAAsBU,IAAtBV,mBACDkC,EAAQ1C,IACd2C,QAAQC,IAAIF,EAAO,SAKnB,OACE,iBAAKhB,UAAU,6BAA6B,6BAA2B,OAAvE,WACE,SAACP,EAAD,KAEA,SAACiB,EAAD,CAAgBC,QAASK,EAAOJ,SAAU,iBAE1C,oBAAQb,KAAK,SAASC,UAAU,kBAAkBK,QAV7B,WACvBvB,EAAmB,OASjB,WACE,SAAC,KAAD,CAAOmB,KAAK,yCAAyCD,UAAU,eADjE,wB,oBCdAmB,EAAoB,WACxB,MAAkC3B,IAA3Bb,EAAP,EAAOA,SAAUY,EAAjB,EAAiBA,cACX6B,GAAcC,EAAAA,EAAAA,kBACb/D,EAASe,IAATf,MAEDgE,GAAsBC,EAAAA,EAAAA,cAAY,kBP4Bd,SAACC,GAC3B,IAAMC,EAAWD,EAAQE,KAAI,SAACzF,GAAD,OAAQL,IAAAA,OAAA,UAAgBH,EAAhB,YAAkCQ,OACvE,OAAOL,IAAAA,IAAU6F,GAAU5F,MAAK,eO9Bc8F,CAAoBhD,KAAW,CAE3EiD,UAAW,WAETR,EAAYS,kBAAkB,CAAC,GAAD,OAAIjE,EAAAA,GAAAA,WAAJ,YAA0BN,KACxDiC,OAIJ,OACE,iBAAKS,UAAU,gDAAf,WACE,iBAAKA,UAAU,iBAAf,WACE,iBAAMA,UAAU,OAAhB,SAAwBrB,EAASmD,SADnC,gBAIA,mBACE/B,KAAK,SACLC,UAAU,iBACVK,SAAO,uBAAE,mGAAkBiB,EAAoBS,cAAtC,mFAHX,iCCrBAC,EAA2B,WAC/B,IAAOpF,EAAeG,IAAfH,YACP,GAAoCL,EAAAA,EAAAA,UAAiB,IAArD,eAAO0F,EAAP,KAAmBC,EAAnB,KAKMC,GAAsBC,EAAAA,EAAAA,IAAYH,EAAY,KAapD,OAZAhB,QAAQC,IAAIiB,EAAqB,uBAEjCzE,EAAAA,EAAAA,YACE,gBAC8B+C,IAAxB0B,QAAoD1B,IAAfwB,GACvCrF,GAAY,QAACyF,OAAQF,GAAwB3B,EAAAA,OAGjD,CAAC2B,KAKD,gBAAKnC,UAAU,aAAf,UAEE,iBAAKA,UAAU,mDAAf,WACE,SAAC,KAAD,CACEC,KAAK,0CACLD,UAAU,uCAEZ,kBACED,KAAK,OACL,4BAA0B,SAC1BC,UAAU,gDACVsC,YAAY,oBACZ3F,MAAOsF,EACP/B,SAAU,SAACC,GAAD,OAAO+B,EAAc/B,EAAEC,OAAOzD,gBClC5C4F,EAAuB,WAC3B,IAAO5D,EAAYa,IAAZb,SACP,OACE,iBAAKqB,UAAU,4BAAf,WACE,SAACgC,EAAD,KAEA,gBAAKhC,UAAU,eAAf,SAEGrB,EAASmD,OAAS,GAAI,SAACX,EAAD,KAAwB,SAACJ,EAAD,U,UCLjDyB,EAAgC,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACpC,8BACGA,EAAOC,QAAmC,kBAAlBD,EAAOC,QAC9B,iCAAQD,EAAOE,kBAAf,aAAkCF,EAAOG,OAAO,aAEhDH,EAAOG,OAAO,a,UCJdC,EAAuB,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAF,OAC3B,iCAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMtB,KAAI,SAACuB,GACd,OACE,iCACMA,EAAKC,gBADX,IAEElD,WAAWmD,EAAAA,EAAAA,GAAK,CAAC,uBAA2C,YAAnBF,EAAKR,OAAOxG,KAFvD,SAIGgH,EAAKL,OAAO,kBCPjBQ,EAA0B,SAAC,GAAY,IAAXzH,EAAU,EAAVA,KAEhC,OACE,gBAAKqE,UAAU,4BAAf,UAqBE,gBAAKA,UAAU,qBAAf,UACE,cAAGqD,KAAK,IAAIrD,UAAU,wCAAtB,SACGrE,EAAK2H,YC9BVC,EAA+B,SAAC,GAAD,IAAEC,EAAF,EAAEA,WAAF,OACnC,gBAAKxD,UAAU,8BAAf,SAA8CwD,KCD1CC,EAA8B,SAAC,GAAD,IAAEC,EAAF,EAAEA,gBAAF,OAClC,oCAAIA,GAAkB,gBAAK1D,UAAU,sCAAf,kBACtB,gBAAKA,UAAU,qCAAf,oB,mBCMI2D,EAA6B,SAAC,GAAU,IAAT1H,EAAQ,EAARA,GAC5B6C,EAAsBU,IAAtBV,mBACAxB,EAASe,IAATf,MACD8D,GAAcC,EAAAA,EAAAA,mBAEpB3D,EAAAA,EAAAA,YAAU,WACRoC,EAAAA,GAAAA,qBACC,IAEH,IAIM8D,GAAarC,EAAAA,EAAAA,cAAY,kBfQbsC,EeR8B5H,EfSzCL,IAAAA,OAAA,UAAgBH,EAAhB,YAAkCoI,IAAUhI,MAAK,eADvC,IAACgI,IeRmC,CAEnDjC,UAAW,WAETkC,IAAAA,KAAU,CACRC,MAAO,WACPC,KAAK,sBACLC,KAAM,UACNC,kBAAmB,SAErB9C,EAAYS,kBAAkB,CAAC,GAAD,OAAIjE,EAAAA,GAAAA,WAAJ,YAA0BN,QAI5D,OACE,iCACE,cACE+F,KAAK,IACLrD,UAAU,gDACV,uBAAqB,QACrB,yBAAuB,aAJzB,UAME,cAAGA,UAAU,sCAGf,iBACEA,UAAU,+HACV,eAAa,OAFf,WAKE,gBAAKA,UAAU,iBAAf,UACE,cAAGA,UAAU,iBAAiBK,QAnChB,WACpBvB,EAAmB7C,IAkCb,qBAOF,gBAAK+D,UAAU,iBAAf,UACE,cACEA,UAAU,iBACV,6BAA2B,aAC3BK,SAAO,uBAAE,mFACPyD,IAAAA,KAAU,CACRC,MAAO,gBACPC,KAAM,oCACNC,KAAM,UACNE,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBH,kBAAmB,oBAClBrI,KARH,yCAQQ,WAAOyI,GAAP,0EAEFA,EAAOC,YAFL,gCAGEX,EAAW7B,cAHb,2CARR,uDADO,2CAHX,6BC1DJyC,EAA+B,SAAC,GAAU,IAATvI,EAAQ,EAARA,GACrC,EAA6BuD,IAAtBb,EAAP,EAAOA,SAAUQ,EAAjB,EAAiBA,SACXsF,GAAahH,EAAAA,EAAAA,UAAQ,kBAAMkB,EAAS+F,SAASzI,KAAK,CAACA,EAAI0C,IAC7D,OACE,gBAAKqB,UAAU,8DAAf,UACE,kBACEA,UAAU,mBACVD,KAAK,WACL,gBAAe0E,EACf,uBAAqB,oCACrBE,QAASF,EACTvE,SAAU,kBAAMf,EAASlD,SCP3B2I,EAA8B,SAAC,GAAoC,IAAnC5E,EAAkC,EAAlCA,UAAW+D,EAAuB,EAAvBA,MAAOc,EAAgB,EAAhBA,WAChD5I,EAAK4I,EAAWpC,OAAOxG,GAC7B,EAA6Bc,IAAtBP,EAAP,EAAOA,MAAOI,EAAd,EAAcA,YACRkI,GAAuBrH,EAAAA,EAAAA,UAAQ,WACnC,OAAOjB,EAAMuI,MAAQvI,EAAMuI,OAAS9I,IACnC,CAACO,EAAOP,IACL+I,GAAoCvH,EAAAA,EAAAA,UAAQ,kBAAMjB,EAAMwI,QAAO,CAACxI,IA0BtE,OACE,iCACMqI,EAAWpC,OAAOE,kBADxB,IAEE3C,WAAWmD,EAAAA,EAAAA,GACTnD,EACA8E,QAAkCrE,IAAVuE,GAAxB,qBAA6DA,IAE/DC,MAAO,CAACC,OAAQ,WAChB7E,QAhCe,WAEjB,GAAW,YAAPpE,GAA2B,cAAPA,EAIxB,GAAK6I,GAML,GAAIA,QAAkCrE,IAAVuE,EAAqB,CAC/C,GAAc,QAAVA,EAGF,YADApI,GAAY,QAACmI,KAAM9I,EAAI+I,MAAO,QAAWxE,EAAAA,KAK3C5D,GAAY,QAACmI,UAAMtE,EAAWuE,WAAOvE,GAAcD,EAAAA,WAZnD5D,GAAY,QAACmI,KAAM9I,EAAI+I,MAAO,OAAUxE,EAAAA,MAiB1C,SASGuD,MC7CDoB,EAAiC,SAAC,GAAkB,IAAjBN,EAAgB,EAAhBA,WACvC,EAAqCrF,IAA9BP,EAAP,EAAOA,cAAeI,EAAtB,EAAsBA,YACtB,OACE,iCAAQwF,EAAWpC,OAAOE,kBAA1B,IAA4C3C,UAAU,cAAtD,UACE,gBAAKA,UAAU,mEAAf,UACE,kBACEA,UAAU,mBACVD,KAAK,WACL,gBAAed,EACf,uBAAqB,oCACrB0F,QAAS1F,EACTiB,SAAUb,UCVd+F,EAAkD,CACtD,CACE1C,OAAQ,SAAC2C,GAAD,OAAW,SAACF,EAAD,CAAqBN,WAAYQ,KACpDpJ,GAAI,YACJqJ,KAAM,gBAAKD,EAAL,2BAAgB,SAACb,EAAD,CAAmBvI,GAAIoJ,EAAMtJ,KAAKsJ,EAAMvC,IAAIyC,OAAOtJ,OAE3E,CACEyG,OAAQ,SAAC2C,GAAD,OAAW,SAACT,EAAD,CAAkBC,WAAYQ,EAAOtB,MAAM,OAAO/D,UAAU,iBAC/E/D,GAAI,OACJqJ,KAAM,gBAAKD,EAAL,2BAAgB,SAACjC,EAAD,CAAczH,KAAM0J,EAAMtJ,KAAKsJ,EAAMvC,IAAIyC,WAGjE,CACE7C,OAAQ,SAAC2C,GAAD,OACN,SAACT,EAAD,CAAkBC,WAAYQ,EAAOtB,MAAM,aAAa/D,UAAU,iBAEpE/D,GAAI,aACJqJ,KAAM,gBAAKD,EAAL,2BAAgB,SAAC9B,EAAD,CAAmBC,WAAY6B,EAAMtJ,KAAKsJ,EAAMvC,IAAIyC,OAAO/B,eAEnF,CACEd,OAAQ,SAAC2C,GAAD,OACN,SAACT,EAAD,CAAkBC,WAAYQ,EAAOtB,MAAM,kBAAkB/D,UAAU,iBAEzE/D,GAAI,kBACJqJ,KAAM,gBAAKD,EAAL,2BAAgB,SAAC5B,EAAD,CAAkBC,gBAAiB2B,EAAMtJ,KAAKsJ,EAAMvC,IAAIyC,OAAO7B,oBAEvF,CACEhB,OAAQ,SAAC2C,GAAD,OACN,SAACT,EAAD,CAAkBC,WAAYQ,EAAOtB,MAAM,UAAU/D,UAAU,0BAEjE/D,GAAI,UACJqJ,KAAM,gBAAKD,EAAL,2BAAgB,SAAC1B,EAAD,CAAiB1H,GAAIoJ,EAAMtJ,KAAKsJ,EAAMvC,IAAIyC,OAAOtJ,QCzCrEuJ,EAAmB,WAcvB,OAAO,gBAAKP,OAAK,kBAbF,CACbQ,aAAc,WACdC,UAAW,kCACXC,gBAAiB,OACjBC,MAAO,UACPC,WAAY,MACZC,OAAQ,IACRC,MAAO,OACPC,QAAS,YACTC,IAAK,mBACLC,KAAM,qBAGS,IAAcC,SAAU,WAAYC,UAAW,WAAzD,4BCTHC,EAAsB,WAAO,IAAD,EAC1BC,EnBmD2B,WACjC,IAAMC,GAAuC,QAC3CC,MAAO,IACJhG,EAAAA,IAGE1E,EAAYuC,IAAZvC,SACP,OAAKA,GAAaA,EAAS2K,SAAY3K,EAAS2K,QAAQH,WAIjDxK,EAAS2K,QAAQH,WAHfC,EmB3DUG,GACbtI,EAAYG,IACX3B,EAAeG,IAAfH,YASP,OACE,iBAAKoD,UAAU,MAAf,WACE,gBAAKA,UAAU,kGACf,gBAAKA,UAAU,6FAAf,UACE,gBAAK/D,GAAG,0BAAR,UACE,eAAI+D,UAAU,aAAd,mBACGsG,EAAWE,aADd,aACG,EAAkB9E,KAAI,SAACiF,GAAD,OACrB,eAEE3G,WAAWmD,EAAAA,EAAAA,GAAK,YAAa,CAC3ByD,OAAQN,EAAWO,OAASF,EAAKE,KACjC9H,SAAUX,EACV0I,SAAyB,qBAAfH,EAAKI,MACfC,KAAqB,iBAAfL,EAAKI,QANf,UASE,cACE/G,UAAU,YACVK,QAAS,WA1BN,IAACwG,KA0BsBF,EAAKE,QAzBhCzI,GAAakI,EAAWO,OAASA,GAI9CjK,EAAY,CAACiK,KAAAA,EAAMI,eAAgBX,EAAWW,gBAAkB,MAsBlDC,wBAAyB,CAACC,OAAQR,EAAKI,OACvC9B,MAAO,CAACC,OAAQ,cAZbyB,EAAKI,oBCdpBK,EAAa,WACjB,IAAMC,EAAc/I,IACdF,EAAYG,IACZxC,GAAO0B,EAAAA,EAAAA,UAAQ,kBAAM4J,IAAa,CAACA,IACnCC,GAAU7J,EAAAA,EAAAA,UAAQ,kBAAM2H,IAAc,IAC5C,GAAsEmC,EAAAA,EAAAA,UAAS,CAC7ED,QAAAA,EACAvL,KAAAA,IAFKyL,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,kBAAmBC,EAAzC,EAAyCA,QAASC,EAAlD,EAAkDA,KAAMC,EAAxD,EAAwDA,WAKxD,OACE,UAAC,KAAD,CAAY5H,UAAU,OAAtB,WACE,gBAAKA,UAAU,mBAAf,UACE,mCACE/D,GAAG,iBACH+D,UAAU,qEACNwH,KAHN,eAKE,4BACE,eAAIxH,UAAU,2DAAd,SACG0H,EAAQhG,KAAI,SAACe,GAAD,OACX,SAACD,EAAD,CAAoCC,OAAQA,GAAnBA,EAAOxG,YAItC,kCAAO+D,UAAU,yBAA4ByH,KAA7C,aACGE,EAAK7F,OAAS,EACb6F,EAAKjG,KAAI,SAACoB,EAAsB+E,GAE9B,OADAD,EAAW9E,IACJ,SAACD,EAAD,CAAWC,IAAKA,GAAhB,cAAiC+E,EAAjC,YAAsC/E,EAAI7G,SAGnD,yBACE,eAAI6L,QAAS,EAAb,UACE,gBAAK9H,UAAU,uEAAf,qDASZ,SAACqG,EAAD,IACCjI,IAAa,SAACoH,EAAD,QCpDduC,EAAsB,WAC1B,IAAOjJ,EAAsBU,IAAtBV,mBAEP,OACE,iBAAKkB,UAAU,eAAf,WAEE,eAAIA,UAAU,YAAd,+BAIA,gBACEA,UAAU,8CACV,6BAA2B,QAC3BK,QAAS,kBAAMvB,OAAmB2B,IAClCwE,MAAO,CAACC,OAAQ,WAJlB,UAME,SAAC,KAAD,CAAOjF,KAAK,yCAAyCD,UAAU,qB,sBCR1DgI,GACL,GADKA,GAEC,GAFDA,IAGM,ECGbC,GAAiBC,GAAAA,KAAaC,MAAM,CACxC3E,WAAY0E,GAAAA,KACTE,IAAI,EAAG,qBACPC,IAAI,GAAI,sBACRC,SAAS,0BACZhF,KAAM4E,GAAAA,KACHE,IAAI,EAAG,qBACPC,IAAI,GAAI,sBACRC,SAAS,sBAGRC,GAA+B,SAAC,GAA2B,IAA1B5M,EAAyB,EAAzBA,KAAM6M,EAAmB,EAAnBA,cACpC1J,EAAsBU,IAAtBV,mBACAX,EAAWE,IAAXF,QACP,GAAsB5B,EAAAA,EAAAA,WAAQ,kBACzBZ,GADyB,IAE5B2H,KAAM3H,EAAK2H,MAAQ0E,GACnBxE,WAAY7H,EAAK6H,YAAcwE,GAC/BtE,gBAAiB/H,EAAK+H,iBAAmBsE,MAJpCS,GAAP,eAOMC,EAAS,SAACC,GACVA,GACFxK,IAEFW,OAAmB2B,IAMfmI,GAASC,EAAAA,GAAAA,IAAU,CACvBC,cAAeL,EACfM,iBAAkBd,GAClBe,SAAS,WAAD,8BAAE,WAAOC,EAAP,mFAAgBC,EAAhB,EAAgBA,gBACV,GADN,WAGFC,EAAAA,EAAAA,IAAWF,EAAOhN,IAHhB,gCAIED,EAAWiN,GAJb,+CAMEvN,EAAWuN,GANb,0DASNhI,QAAQmI,MAAR,MATM,yBAWNF,GAAc,GACdR,GAAO,GACP5E,IAAAA,KAAU,CACRC,MAAO,WACPC,KAAK,cAAD,OAAgBiF,EAAOhN,GAAK,UAAY,UAAxC,KACJgI,KAAM,UACNC,kBAAmB,SAjBf,6EAAF,qDAAC,KAuBX,OACE,iCACE,kBAAMjI,GAAG,yBAAyB+D,UAAU,OAAOgJ,SAAUJ,EAAOS,aAAcC,YAAU,EAA5F,WAEE,iBACEtJ,UAAU,yCACV/D,GAAG,2BACH,iBAAe,OACf,0BAAwB,6BACxB,4BAA0B,OAC1B,8BAA4B,4BAC5B,0BAAwB,4BACxB,wBAAsB,QARxB,WAUE,iBAAK+D,UAAU,cAAf,WACE,kBAAOA,UAAU,6BAAjB,8BACA,kCACEsC,YAAY,2BACRsG,EAAOW,cAAc,SAF3B,IAGExJ,KAAK,OACLuD,KAAK,OACLtD,WAAWmD,EAAAA,EAAAA,GACT,+CACA,CAAC,aAAcyF,EAAOY,QAAQlG,MAAQsF,EAAOa,OAAOnG,MACpD,CACE,WAAYsF,EAAOY,QAAQlG,OAASsF,EAAOa,OAAOnG,OAGtDoG,aAAa,MACb3K,SAAU6J,EAAOe,cAAgBnB,KAElCI,EAAOY,QAAQlG,MAAQsF,EAAOa,OAAOnG,OACpC,gBAAKtD,UAAU,+BAAf,UACE,gBAAKA,UAAU,gBAAf,UACE,iBAAMN,KAAK,QAAX,SAAoBkJ,EAAOa,OAAOnG,eAM1C,iBAAKtD,UAAU,cAAf,WACE,kBAAOA,UAAU,6BAAjB,yBAEA,kCACEsC,YAAY,qCACRsG,EAAOW,cAAc,eAF3B,IAGEvJ,WAAWmD,EAAAA,EAAAA,GACT,+CACA,CAAC,aAAcyF,EAAOY,QAAQhG,YAAcoF,EAAOa,OAAOjG,YAC1D,CACE,WAAYoF,EAAOY,QAAQhG,aAAeoF,EAAOa,OAAOjG,aAG5DzD,KAAK,OACLuD,KAAK,aACLoG,aAAa,MACb3K,SAAU6J,EAAOe,cAAgBnB,KAGlCI,EAAOY,QAAQhG,YAAcoF,EAAOa,OAAOjG,aAC1C,gBAAKxD,UAAU,+BAAf,UACE,iBAAMN,KAAK,QAAX,SAAoBkJ,EAAOa,OAAOjG,mBAOxC,gBAAKxD,UAAU,cAAf,UACE,mBAAOA,UAAU,qDAAjB,WACE,oCACM4I,EAAOW,cAAc,oBAD3B,IAEEvJ,UAAU,mBACVD,KAAK,WACL4E,QAASiE,EAAOK,OAAOvF,gBACvBJ,KAAK,kBACLrH,GAAG,0BAEL,iBAAM+D,UAAU,mBAAhB,0CAIJ,iBAAKA,UAAU,gBAAf,kCACsB,mBAAQA,UAAU,OAAlB,6BADtB,sBAEE,mBAAQA,UAAU,OAAlB,2BAFF,mBAQF,iBAAKA,UAAU,oBAAf,WACE,mBACED,KAAK,QACLM,QAAS,kBAAMqI,KACf1I,UAAU,qBACV,6BAA2B,SAC3BjB,SAAU6J,EAAOe,cAAgBnB,EALnC,sBAUA,oBACEzI,KAAK,SACLC,UAAU,kBACV,6BAA2B,SAC3BjB,SAAUyJ,GAAiBI,EAAOe,eAAiBf,EAAOgB,UAAYhB,EAAOY,QAJ/E,WAME,iBAAMxJ,UAAU,kBAAhB,qBACE4I,EAAOe,cAAgBnB,KACvB,kBAAMxI,UAAU,qBAAhB,2BACiB,KACf,iBAAMA,UAAU,oEAOxB4I,EAAOe,cAAgBnB,KAAkB,SAAChD,EAAD,QC1L3CqE,GAA2B,WAC/B,MAA8CrK,IAAvCX,EAAP,EAAOA,gBAAiBC,EAAxB,EAAwBA,mBAClBgL,GAAwBX,EAAAA,EAAAA,IAAWtK,GACzC,GAAuClB,EAAAA,EAAAA,UAAS,GAAD,OAC1CC,EAAAA,GAAAA,WAD0C,wBACRiB,IACrC,WACE,O1BEe5C,E0BFI4C,E1BGhBjD,IAAAA,IAAA,UACGH,EADH,YACqBQ,IACzBJ,MAAK,SAACC,GAAD,OAAmDA,EAASC,QACjEF,MAAK,SAACC,GAAD,OAAoCA,EAASC,QAJnC,IAACE,I0BAjB,CACE8B,UAAW,EACXgM,QAASD,EACTE,QAAS,SAACC,GACRnL,OAAmB2B,GACnBQ,QAAQmI,MAAMa,MAVb7L,EAAP,EAAOA,UAAiBzC,EAAxB,EAAkBI,KAAYqN,EAA9B,EAA8BA,MAe9B,OAAKvK,EAIAT,GAAcgL,IAASzN,EAIrB,MAHE,SAAC4M,GAAD,CAAmBC,cAAepK,EAAWzC,KAAMA,KAJnD,SAAC4M,GAAD,CAAmBC,cAAepK,EAAWzC,KAAM,CAACM,QAAIwE,MCrB7DyJ,GAAgB,WAQpB,OAPAxM,EAAAA,EAAAA,YAAU,WAER,OADAyM,SAASC,KAAKC,UAAUC,IAAI,cACrB,WACLH,SAASC,KAAKC,UAAUE,OAAO,iBAEhC,KAGD,iCACE,gBACEvK,UAAU,0BACV/D,GAAG,oBACHyD,KAAK,SACL8K,UAAW,EACX,aAAW,OALb,UAQE,gBAAKxK,UAAU,8CAAf,UAEE,iBAAKA,UAAU,gBAAf,WACE,SAAC+H,EAAD,KAEA,gBAAK/H,UAAU,yCAAf,UACE,SAAC6J,GAAD,cASR,gBAAK7J,UAAU,iCC7BfyK,GAAkB,WACtB,IAAO5L,EAAmBW,IAAnBX,gBACP,OACE,iCACE,UAAC,KAAD,YACE,SAAC0D,EAAD,KACA,SAAC6E,EAAD,YAEmB3G,IAApB5B,IAAiC,SAACqL,GAAD,QAKlCQ,GAAyB,kBAC7B,SAACrO,EAAD,WACE,SAACe,EAAD,WACE,SAACsB,EAAD,WACE,SAAC+L,GAAD,WCrBFE,GAAoC,CACxC,CACE5G,MAAO,wBACP9D,KAAM,eACN2K,aAAa,EACbC,UAAU,GAEZ,CACE9G,MAAO,GACP9D,KAAM,GACN2K,aAAa,EACbC,UAAU,IAuBd,GAnBuB,WACrB,OAME,iCACE,SAAC,KAAD,CAAWC,YAAaH,GAAxB,8BACA,SAACD,GAAD","sources":["app/pages/permissions/users-list/core/_requests.ts","app/pages/permissions/users-list/core/QueryRequestProvider.tsx","app/pages/permissions/users-list/core/QueryResponseProvider.tsx","app/pages/permissions/users-list/core/ListViewProvider.tsx","app/pages/permissions/users-list/components/header/UsersListFilter.tsx","app/pages/permissions/users-list/components/Export.js","app/pages/permissions/users-list/components/header/UserListToolbar.tsx","app/pages/permissions/users-list/components/header/UsersListGrouping.tsx","app/pages/permissions/users-list/components/header/UsersListSearchComponent.tsx","app/pages/permissions/users-list/components/header/PermissionListHeader.tsx","app/pages/permissions/users-list/table/columns/CustomHeaderColumn.tsx","app/pages/permissions/users-list/table/columns/CustomRow.tsx","app/pages/permissions/users-list/table/columns/UserInfoCell.tsx","app/pages/permissions/users-list/table/columns/UserLastLoginCell.tsx","app/pages/permissions/users-list/table/columns/UserTwoStepsCell.tsx","app/pages/permissions/users-list/table/columns/UserActionsCell.tsx","app/pages/permissions/users-list/table/columns/UserSelectionCell.tsx","app/pages/permissions/users-list/table/columns/UserCustomHeader.tsx","app/pages/permissions/users-list/table/columns/UserSelectionHeader.tsx","app/pages/permissions/users-list/table/columns/_columns.tsx","app/pages/permissions/users-list/components/loading/UsersListLoading.tsx","app/pages/permissions/users-list/components/pagination/UsersListPagination.tsx","app/pages/permissions/users-list/table/UsersTable.tsx","app/pages/permissions/users-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/permissions/users-list/core/_models.ts","app/pages/permissions/users-list/user-edit-modal/UserEditModalForm.tsx","app/pages/permissions/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/permissions/users-list/user-edit-modal/UserEditModal.tsx","app/pages/permissions/users-list/PermissionList.tsx","app/pages/permissions/PermissionPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {Permission, PermissionQueryResponse} from './_models'\r\n\r\n// const API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst API_URL = 'https://quiz.datacubeindia.com/common'\r\nconst PERMISSION_URL = `${API_URL}/permission`\r\n\r\nconst getUsers = (query: string): Promise<PermissionQueryResponse> => {\r\n  return axios\r\n    .get(`${PERMISSION_URL}?${query}`)\r\n    .then((d: AxiosResponse<PermissionQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<Permission | undefined> => {\r\n  return axios\r\n    .get(`${PERMISSION_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<Permission>>) => response.data)\r\n    .then((response: Response<Permission>) => response.data)\r\n}\r\n\r\nconst createUser = (user: Permission): Promise<Permission | undefined> => {\r\n  return axios\r\n    .post(PERMISSION_URL, user)\r\n    .then((response: AxiosResponse<Response<Permission>>) => response.data)\r\n    .then((response: Response<Permission>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: Permission): Promise<Permission | undefined> => {\r\n  return axios\r\n    .put(`${PERMISSION_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<Permission>>) => response.data)\r\n    .then((response: Response<Permission>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${PERMISSION_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${PERMISSION_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {Permission} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<Permission>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {role, last_login: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Role:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Administrator'>Administrator</option>\r\n              <option value='Analyst'>Analyst</option>\r\n              <option value='Developer'>Developer</option>\r\n              <option value='Support'>Support</option>\r\n              <option value='Trial'>Trial</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Yesterday'>Yesterday</option>\r\n              <option value='20 mins ago'>20 mins ago</option>\r\n              <option value='5 hours ago'>5 hours ago</option>\r\n              <option value='2 days ago'>2 days ago</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={filterData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={resetData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const users = useQueryResponseData()\r\n  console.log(users, 'users')\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      <ExportReactCSV csvData={users} fileName={'permissions'} />\r\n      \r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Permission\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  console.log(debouncedSearchTerm, \"debounceSearchTerm\");\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Permission'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst PermissionListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {PermissionListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {Permission} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<Permission>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {Permission} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<Permission>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {Permission} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: Permission\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {/* begin:: Avatar */}\r\n      {/* <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n      <a href='#'>\r\n        {user.name ? (\r\n          <div className='symbol-label'>\r\n            <img src={toAbsoluteUrl(`/media/${user.name}`)} alt={user.name} className='w-100' />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className={clsx(\r\n              'symbol-label fs-3',\r\n              `bg-light-${user.initials?.state}`,\r\n              `text-${user.initials?.state}`\r\n            )}\r\n          >\r\n            {user.initials?.label}\r\n          </div>\r\n        )}\r\n      </a>\r\n    </div> */}\r\n      <div className='d-flex flex-column'>\r\n        <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n          {user.name}\r\n        </a>\r\n        {/* <span>{user.short_name}</span> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  short_name?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({short_name}) => (\r\n  <div className='badge badge-light fw-bolder'>{short_name}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  core_permission?: boolean\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({core_permission}) => (\r\n  <> {core_permission ? <div className='badge badge-light-success fw-bolder'>Yes</div>\r\n: <div className='badge badge-light-danger fw-bolder'>No</div>\r\n}</>\r\n)\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\nimport Swal from 'sweetalert2'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Permission Deleted!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => {\r\n              Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!',\r\n              }).then(async (result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                  await deleteItem.mutateAsync()\r\n                }\r\n              })\r\n            }}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {Permission} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<Permission>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {Permission} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<Permission>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {Permission} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<Permission>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n \r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Short Name' className='min-w-125px' />\r\n    ),\r\n    id: 'short_name',\r\n    Cell: ({...props}) => <UserLastLoginCell short_name={props.data[props.row.index].short_name} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Core Permission' className='min-w-125px' />\r\n    ),\r\n    id: 'core_permission',\r\n    Cell: ({...props}) => <UserTwoStepsCell core_permission={props.data[props.row.index].core_permission} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {Permission} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const permissions = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => permissions, [permissions])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<Permission>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<Permission>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add a Permission</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nexport type Permission = {\r\n  id?: ID\r\n  name?: string\r\n  short_name?: string\r\n  core_permission?: boolean\r\n\r\n}\r\n\r\nexport type PermissionQueryResponse = Response<Array<Permission>>\r\n\r\nexport const initialPermission: Permission = {\r\n  name: '',\r\n  short_name: '',\r\n  core_permission: false\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {initialPermission, Permission} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: Permission\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  short_name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Short_name is required'),\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [userForEdit] = useState<Permission>({\r\n    ...user,\r\n    name: user.name || initialPermission.name,\r\n    short_name: user.short_name || initialPermission.short_name,\r\n    core_permission: user.core_permission || initialPermission.core_permission,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  // const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n  // const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: `Permission ${values.id ? 'Updated' : 'Created'}!`,\r\n          icon: 'success',\r\n          confirmButtonText: 'Okay',\r\n        })\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          <div className='fv-row mb-7'>\r\n            <label className='required fw-bold fs-6 mb-2'>Permission Name</label>\r\n            <input\r\n              placeholder='Enter a permission name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className='fv-row mb-7'>\r\n            <label className='required fw-bold fs-6 mb-2'>Short Name</label>\r\n\r\n            <input\r\n              placeholder='Enter a short name for permission'\r\n              {...formik.getFieldProps('short_name')}\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.short_name && formik.errors.short_name},\r\n                {\r\n                  'is-valid': formik.touched.short_name && !formik.errors.short_name,\r\n                }\r\n              )}\r\n              type='text'\r\n              name='short_name'\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {/* end::Input */}\r\n            {formik.touched.short_name && formik.errors.short_name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.short_name}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            <label className='form-check form-check-custom form-check-solid me-9'>\r\n              <input\r\n                {...formik.getFieldProps('core_permission')}\r\n                className='form-check-input'\r\n                type='checkbox'\r\n                checked={formik.values.core_permission}\r\n                name='core_permission'\r\n                id='kt_permissions_core'\r\n              />\r\n              <span className='form-check-label'>Set as core permission</span>\r\n            </label>\r\n          </div>\r\n          {/* end::Input group */}\r\n          <div className='text-gray-600'>\r\n            Permission set as a <strong className='me-1'>Core Permission</strong>will be locked and\r\n            <strong className='me-1'> not editable</strong>in future\r\n          </div>\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-permissions-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {PermissionListHeader} from './components/header/PermissionListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\n\r\nconst PermissionsList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <PermissionListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst PermissionsListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <PermissionsList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {PermissionsListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {PermissionsListWrapper} from './users-list/PermissionList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Permission management',\r\n    path: '/permissions',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst PermissionPage = () => {\r\n  return (\r\n    // <Routes>\r\n    //   <Route element={<Outlet />}>\r\n    //     <Route\r\n    //       path='permissions'\r\n    //       element={\r\n    <>\r\n      <PageTitle breadcrumbs={usersBreadcrumbs}>Permission list</PageTitle>\r\n      <PermissionsListWrapper />\r\n    </>\r\n    //       }\r\n    //     />\r\n    //   </Route>\r\n    //    <Route index element={<Navigate to='/permissions' />} />\r\n    // </Routes>\r\n  )\r\n}\r\n\r\nexport default PermissionPage\r\n"],"names":["PERMISSION_URL","createUser","user","axios","then","response","data","updateUser","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","type","className","path","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","ExportReactCSV","csvData","fileName","CSVLink","filename","UsersListToolbar","users","console","log","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","PermissionListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","href","name","UserLastLoginCell","short_name","UserTwoStepsCell","core_permission","UserActionsCell","deleteItem","userId","Swal","title","text","icon","confirmButtonText","showCancelButton","confirmButtonColor","cancelButtonColor","result","isConfirmed","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","usersColumns","props","Cell","index","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","permissions","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","initialPermission","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","error","handleSubmit","noValidate","getFieldProps","touched","errors","autoComplete","isSubmitting","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","PermissionsList","PermissionsListWrapper","usersBreadcrumbs","isSeparator","isActive","breadcrumbs"],"sourceRoot":""}