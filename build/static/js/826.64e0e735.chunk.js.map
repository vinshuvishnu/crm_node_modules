{"version":3,"file":"static/js/826.64e0e735.chunk.js","mappings":"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","sources":["app/pages/quiz/question-list/core/_requests.ts","app/pages/quiz/question-list/core/QueryRequestProvider.tsx","app/pages/quiz/question-list/core/QueryResponseProvider.tsx","app/pages/quiz/question-list/core/ListViewProvider.tsx","app/pages/quiz/question-list/components/header/UsersListFilter.tsx","app/pages/quiz/question-list/components/header/UserListToolbar.tsx","app/pages/quiz/question-list/components/header/UsersListGrouping.tsx","app/pages/quiz/question-list/components/header/UsersListSearchComponent.tsx","app/pages/quiz/question-list/components/header/UsersListHeader.tsx","app/pages/quiz/question-list/table/columns/CustomHeaderColumn.tsx","app/pages/quiz/question-list/table/columns/CustomRow.tsx","app/pages/quiz/question-list/table/columns/UserInfoCell.tsx","app/pages/quiz/question-list/table/columns/UserLastLoginCell.tsx","app/pages/quiz/question-list/table/columns/UserTwoStepsCell.tsx","app/pages/quiz/question-list/table/columns/UserSelectionCell.tsx","app/pages/quiz/question-list/table/columns/UserCustomHeader.tsx","app/pages/quiz/question-list/table/columns/UserSelectionHeader.tsx","app/pages/quiz/users-list/core/_requests.ts","app/pages/quiz/commonData/CommonDataProvider.tsx","app/pages/quiz/question-list/table/columns/SubjectCell.tsx","app/pages/quiz/question-list/table/columns/Type.tsx","app/pages/quiz/question-list/table/columns/_columns.tsx","app/pages/quiz/question-list/components/loading/UsersListLoading.tsx","app/pages/quiz/question-list/components/pagination/UsersListPagination.tsx","app/pages/quiz/question-list/table/UsersTable.tsx","app/pages/quiz/question-list/QuestionList.tsx","app/pages/quiz/question-view/core/_requests.ts","app/pages/quiz/question-view/core/QueryRequestProvider.tsx","app/pages/quiz/question-view/core/QueryResponseProvider.tsx","app/pages/quiz/question-view/core/ListViewProvider.tsx","app/pages/quiz/question-view/components/header/UsersListFilter.tsx","app/pages/quiz/question-view/components/header/UserListToolbar.tsx","app/pages/quiz/question-view/components/header/UsersListGrouping.tsx","app/pages/quiz/question-view/components/header/UsersListSearchComponent.tsx","app/pages/quiz/question-view/components/header/UsersListHeader.tsx","app/pages/quiz/question-view/table/columns/CustomHeaderColumn.tsx","app/pages/quiz/question-view/table/columns/CustomRow.tsx","app/pages/quiz/question-view/table/columns/UserInfoCell.tsx","app/pages/quiz/question-view/table/columns/UserLastLoginCell.tsx","app/pages/quiz/question-view/table/columns/UserCustomHeader.tsx","app/pages/quiz/question-view/table/columns/SubjectCell.tsx","app/pages/quiz/question-view/table/columns/Type.tsx","app/pages/quiz/question-view/table/columns/Marks.tsx","app/pages/quiz/question-view/table/columns/_columns.tsx","app/pages/quiz/question-view/components/loading/UsersListLoading.tsx","app/pages/quiz/question-view/components/pagination/UsersListPagination.tsx","app/pages/quiz/question-view/table/UsersTable.tsx","app/pages/quiz/question-view/QuestionView.tsx","app/pages/quiz/users-list/core/QueryRequestProvider.tsx","app/pages/quiz/users-list/core/QueryResponseProvider.tsx","app/pages/quiz/users-list/core/ListViewProvider.tsx","app/pages/quiz/users-list/components/Export.js","app/pages/quiz/users-list/components/header/UserListToolbar.tsx","app/pages/quiz/users-list/components/header/UsersListGrouping.tsx","app/pages/quiz/users-list/components/header/UsersListSearchComponent.tsx","app/pages/quiz/users-list/components/header/UsersListHeader.tsx","app/pages/quiz/users-list/table/columns/CustomHeaderColumn.tsx","app/pages/quiz/users-list/table/columns/CustomRow.tsx","app/pages/quiz/users-list/table/columns/UserInfoCell.tsx","app/pages/quiz/users-list/table/columns/UserLastLoginCell.tsx","app/pages/quiz/users-list/table/columns/UserTwoStepsCell.tsx","app/pages/quiz/users-list/table/columns/UserActionsCell.tsx","app/pages/quiz/users-list/table/columns/UserSelectionCell.tsx","app/pages/quiz/users-list/table/columns/UserCustomHeader.tsx","app/pages/quiz/users-list/table/columns/UserSelectionHeader.tsx","app/pages/quiz/users-list/table/columns/Courses.tsx","app/pages/quiz/users-list/table/columns/SubjectCell.tsx","app/pages/quiz/users-list/table/columns/_columns.tsx","app/pages/quiz/users-list/components/loading/UsersListLoading.tsx","app/pages/quiz/users-list/components/pagination/UsersListPagination.tsx","app/pages/quiz/users-list/table/UsersTable.tsx","app/pages/quiz/users-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/quiz/users-list/core/_models.ts","app/pages/quiz/users-list/steps/Step1.tsx","app/pages/quiz/users-list/steps/Step2.tsx","app/pages/quiz/users-list/user-edit-modal/UserEditModalForm.tsx","app/pages/quiz/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/quiz/users-list/user-edit-modal/UserEditModal.tsx","app/pages/quiz/users-list/UsersList.tsx","app/pages/quiz/QuizPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/question'\r\nconst QUESTION_URL = `${API_URL}/question`\r\nconst QUIZ_URL = 'https://quiz.datacubeindia.com/quiz/quiz'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${QUESTION_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getQuizQuestions = (id: ID): Promise<any> => {\r\n  return axios\r\n    .get(`${QUIZ_URL}/quizQuestion/${id}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${QUESTION_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst addQuestion = (question: any): Promise<any> => {\r\n  return axios\r\n    .post(`${QUIZ_URL}/addQuestion`, question)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst addSelectedQuestion = (questionId: Array<ID>, quizId: any): Promise<void> => {\r\n  const requests = questionId.map((id) =>\r\n    axios.post(`${QUIZ_URL}/addQuestion`, {quiz_id: quizId, question_bank_id: id})\r\n  )\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nconst deleteUser = (questionId: ID): Promise<void> => {\r\n  return axios.delete(`${QUIZ_URL}/question/${questionId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (questionId: Array<ID>): Promise<void> => {\r\n  const requests = questionId.map((id) => axios.delete(`${QUIZ_URL}/question/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  addQuestion,\r\n  addSelectedQuestion,\r\n  getQuizQuestions,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n    setRole('')\r\n    setLastLogin('')\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {question_type: role, level: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Question Type:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Objective'>Objective</option>\r\n              <option value='True/False'>True/False</option>\r\n              <option value='Fill In The Blanks'>Fill In The Blanks</option>\r\n              <option value='Subjective'>Subjective</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Difficulty Level:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Easy'>Easy</option>\r\n              <option value='Moderate'>Moderate</option>\r\n              <option value='Difficult'>Difficult</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={resetData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={filterData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {useEffect} from 'react'\r\nimport {Link, useNavigate} from 'react-router-dom'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('popstate', addPopState)\r\n    return () => {\r\n      window.removeEventListener('popstate', addPopState)\r\n    }\r\n  }, [])\r\n\r\n  const addPopState = () => {\r\n    navigate('/quiz')\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      {/* <ExportReactCSV csvData={users} fileName={'quiz'} /> */}\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <Link to={'/quiz'} className='btn btn-primary'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr002.svg' className='svg-icon-2' />\r\n        Back To Quiz\r\n      </Link>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useState} from 'react'\r\nimport {useQueryClient, useMutation} from 'react-query'\r\nimport {useParams} from 'react-router-dom'\r\nimport {QUERIES, stringifyRequestQuery} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {addSelectedQuestion, deleteSelectedUsers, getUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const params = useParams()\r\n  const {id} = params\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      // queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      getUsers(query)\r\n      clearSelected()\r\n      window.location.reload()\r\n    },\r\n  })\r\n\r\n  const addelectedItems = useMutation(() => addSelectedQuestion(selected, id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      \r\n      // ✅ update detail view directly\r\n      // queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      getUsers(query)\r\n      clearSelected()\r\n      window.location.reload()\r\n\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-primary me-5'\r\n        onClick={async () => await addelectedItems.mutateAsync()}\r\n      >\r\n        Add to Quiz\r\n      </button>\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete from Quiz\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Question'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  console.log(user, 'user')\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  function removeHTML (str: string) {\r\n    var tmp = document.createElement('DIV')\r\n    tmp.innerHTML = str\r\n    return tmp.textContent || tmp.innerText || ''\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {/* begin:: Avatar */}\r\n      {/* <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n        <a onClick={openEditModal} style={{cursor: 'pointer'}}>\r\n          {user.profile_image ? (\r\n            <div className='symbol-label'>\r\n              <img src={user.profile_image} alt={user.firstname} className='w-100' />\r\n            </div>\r\n          ) : (\r\n            <div className={clsx('symbol-label fs-3', `bg-light-warning`, `text-warning`)}>\r\n              {user.firstname?.charAt(0)}\r\n            </div>\r\n          )}\r\n        </a>\r\n      </div> */}\r\n      <div className='d-flex flex-column'>\r\n        {user.questions.length > 0 &&\r\n          user.questions.map((item: any, i: any) => (\r\n            <a\r\n              key={i}\r\n              onClick={openEditModal}\r\n              style={{cursor: 'pointer'}}\r\n              className='text-gray-800 text-hover-primary mb-1'\r\n            >\r\n              {removeHTML(item.question)}\r\n            </a>\r\n          ))}\r\n        {/* <span>{user.email}</span> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  level?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({level}) => <div className='fw-bolder'>{level}</div>\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC, useEffect, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {addQuestion, deleteUser, getQuizQuestions} from '../../core/_requests'\r\nimport {useParams} from 'react-router-dom'\r\n\r\ntype Props = {\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({id}) => {\r\n  const params = useParams()\r\n  console.log(params, 'params')\r\n  useEffect(() => {\r\n    getQuizQuestions(id)\r\n      .then((data) => {\r\n        setStatus(data)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n      })\r\n  }, [id])\r\n\r\n  const [status, setStatus] = useState<any>(false)\r\n\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input me-3'\r\n            data-switch='true'\r\n            data-on-color='#D8322D'\r\n            type='checkbox'\r\n            name='status'\r\n            data-off-color='warning'\r\n            checked={status}\r\n            onChange={async (e) => {\r\n              if (e.currentTarget.checked) {\r\n                await addQuestion({quiz_id: params.id, question_bank_id: id})\r\n              } else {\r\n                await deleteUser(id)\r\n              }\r\n              setStatus(!status)\r\n            }}\r\n          />\r\n          <span style={{color: status == false ? '#44A8C1' : '#D8322D'}}>\r\n            {status == true ? 'Remove from Quiz' : 'Add to Quiz'}\r\n          </span>\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/quiz'\r\nconst USER_URL = `${API_URL}/quiz`\r\nconst COURSE_URL = 'https://quiz.datacubeindia.com/common/course'\r\nconst SUBJECT_URL = 'https://quiz.datacubeindia.com/common/subject'\r\nconst QUIZTYPE_URL = `${API_URL}/quizType`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios.get(`${USER_URL}?${query}`).then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getAllCourses = (): Promise<any> => {\r\n  return axios.get(`${COURSE_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getAllSubjects = (): Promise<any> => {\r\n  return axios.get(`${SUBJECT_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getQuizTypes = (): Promise<any> => {\r\n  return axios.get(`${QUIZTYPE_URL}`).then((d: AxiosResponse<any>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createQuizSetting = (quiz: any): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/quizSetting`, quiz)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateStatus = (status: any, id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .put(`${USER_URL}/${id}`, status)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  createUser,\r\n  updateStatus,\r\n  createQuizSetting,\r\n  getAllCourses,\r\n  getAllSubjects,\r\n  getQuizTypes,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo, useEffect} from 'react'\nimport {getAllCourses, getAllSubjects} from '../users-list/core/_requests'\nconst CommonDataContext = createContext<any>({\n  allCourses: [],\n  allSubjects: [],\n})\n\nconst CommonDataProvider: FC = ({children}) => {\n  const [allCourses, setCourses] = useState<Array<any>>()\n  const [allSubjects, setSubjects] = useState<Array<any>>()\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await getAllCourses()\n      .then((data) => {\n        setCourses(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    await getAllSubjects()\n      .then((data) => {\n        setSubjects(data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <CommonDataContext.Provider\n      value={{\n        allCourses,\n        allSubjects,\n      }}\n    >\n      {children}\n    </CommonDataContext.Provider>\n  )\n}\n\nconst useCommonData = () => useContext(CommonDataContext)\n\nexport {CommonDataProvider, useCommonData}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\n\ntype Props = {\n  subject_id: any\n}\n\nconst SubjectCell: FC<Props> = ({subject_id}) => {\n  const {allSubjects} = useCommonData()\n  let item = allSubjects?.find((x: any) => x.id == subject_id)\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.subject_name}</div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {FC} from 'react'\n\ntype Props = {\n  question_type?: string\n}\n\nconst Type: FC<Props> = ({question_type}) => <div className='fw-bolder'>{question_type}</div>\n\nexport {Type}\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {SubjectCell} from './SubjectCell'\r\nimport { Type } from './Type'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='ID' className='min-w-125px' />,\r\n    accessor: 'id',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Question' className='min-w-125px' />\r\n    ),\r\n    id: 'questions',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Subject' className='min-w-125px' />\r\n    ),\r\n    id: 'subject',\r\n    Cell: ({...props}) => <SubjectCell subject_id={props.data[props.row.index].subject_id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Type' className='min-w-125px' />,\r\n    id: 'question_type',\r\n    Cell: ({...props}) => <Type question_type={props.data[props.row.index].question_type} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Level' className='min-w-125px' />\r\n    ),\r\n    id: 'level',\r\n    Cell: ({...props}) => <UserLastLoginCell level={props.data[props.row.index].level} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Action' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst QuestionList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuestionListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <QuestionList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {QuestionListWrapper}\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = 'https://quiz.datacubeindia.com/question'\r\nconst QUESTION_URL = `${API_URL}/question`\r\nconst QUIZ_URL = 'https://quiz.datacubeindia.com/quiz/quiz'\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${QUESTION_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getQuizQuestions = (id: any): Promise<any> => {\r\n  return axios\r\n    .get(`${QUIZ_URL}/getQuizQuestion/${id}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${QUESTION_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst addQuestion = (question: any): Promise<any> => {\r\n  return axios\r\n    .post(`${QUIZ_URL}/addQuestion`, question)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst addSelectedQuestion = (questionId: Array<ID>, quizId: any): Promise<void> => {\r\n  const requests = questionId.map((id) =>\r\n    axios.post(`${QUIZ_URL}/addQuestion`, {quiz_id: quizId, question_bank_id: id})\r\n  )\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nconst deleteUser = (questionId: ID): Promise<void> => {\r\n  return axios.delete(`${QUIZ_URL}/question/${questionId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (questionId: Array<ID>): Promise<void> => {\r\n  const requests = questionId.map((id) => axios.delete(`${QUIZ_URL}/question/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  deleteUser,\r\n  deleteSelectedUsers,\r\n  getUserById,\r\n  addQuestion,\r\n  addSelectedQuestion,\r\n  getQuizQuestions,\r\n}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n    setRole('')\r\n    setLastLogin('')\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {question_type: role, level: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Question Type:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Objective'>Objective</option>\r\n              <option value='True/False'>True/False</option>\r\n              <option value='Fill In The Blanks'>Fill In The Blanks</option>\r\n              <option value='Subjective'>Subjective</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Difficulty Level:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Easy'>Easy</option>\r\n              <option value='Moderate'>Moderate</option>\r\n              <option value='Difficult'>Difficult</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={resetData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={filterData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {Link} from 'react-router-dom'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {useEffect} from 'react'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('popstate', addPopState)\r\n    return () => {\r\n      window.removeEventListener('popstate', addPopState)\r\n    }\r\n  }, [])\r\n\r\n  const addPopState = () => {\r\n    navigate('/quiz')\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      {/* <ExportReactCSV csvData={users} fileName={'quiz'} /> */}\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <Link to={'/quiz'} className='btn btn-primary'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr002.svg' className='svg-icon-2' />\r\n        Back To Quiz\r\n      </Link>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useState} from 'react'\r\nimport {useQueryClient, useMutation} from 'react-query'\r\nimport {useParams} from 'react-router-dom'\r\nimport {QUERIES, stringifyRequestQuery} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {addSelectedQuestion, deleteSelectedUsers, getUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const params = useParams()\r\n  const {id} = params\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      // queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      getUsers(query)\r\n      clearSelected()\r\n      window.location.reload()\r\n    },\r\n  })\r\n\r\n  const addelectedItems = useMutation(() => addSelectedQuestion(selected, id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      \r\n      // ✅ update detail view directly\r\n      // queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      getUsers(query)\r\n      clearSelected()\r\n      window.location.reload()\r\n\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-primary me-5'\r\n        onClick={async () => await addelectedItems.mutateAsync()}\r\n      >\r\n        Add to Quiz\r\n      </button>\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete from Quiz\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Question'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  function removeHTML (str: string) {\r\n    var tmp = document.createElement('DIV')\r\n    tmp.innerHTML = str\r\n    return tmp.textContent || tmp.innerText || ''\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      <div className='d-flex flex-column'>\r\n        {user.questions.length > 0 &&\r\n          user.questions.map((item: any, i: any) => (\r\n            <a\r\n              key={i}\r\n              onClick={openEditModal}\r\n              style={{cursor: 'pointer'}}\r\n              className='text-gray-800 text-hover-primary mb-1'\r\n            >\r\n              {removeHTML(item.question)}\r\n            </a>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  level?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({level}) => <div className='fw-bolder'>{level}</div>\r\n\r\nexport {UserLastLoginCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\n\ntype Props = {\n  subject_id: any\n}\n\nconst SubjectCell: FC<Props> = ({subject_id}) => {\n  const {allSubjects} = useCommonData()\n  let item = allSubjects?.find((x: any) => x.id == subject_id)\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.subject_name}</div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {FC} from 'react'\n\ntype Props = {\n  question_type?: string\n}\n\nconst Type: FC<Props> = ({question_type}) => <div className='fw-bolder'>{question_type}</div>\n\nexport {Type}\n","import { FC } from 'react'\n\ntype Props = {\n    marks?: any\n}\n\nconst Marks: FC<Props> = ({ marks }) => <div className='fw-bolder'>{marks?.marks}</div>\n\nexport { Marks }\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {User} from '../../core/_models'\r\nimport {SubjectCell} from './SubjectCell'\r\nimport {Type} from './Type'\r\nimport { Marks } from './Marks'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='ID' className='min-w-125px' />,\r\n    accessor: 'id',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Question' className='min-w-125px' />\r\n    ),\r\n    id: 'questions',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Subject' className='min-w-125px' />\r\n    ),\r\n    id: 'subject',\r\n    Cell: ({...props}) => <SubjectCell subject_id={props.data[props.row.index].subject_id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Type' className='min-w-125px' />,\r\n    id: 'question_type',\r\n    Cell: ({...props}) => <Type question_type={props.data[props.row.index].question_type} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Level' className='min-w-125px' />\r\n    ),\r\n    id: 'level',\r\n    Cell: ({...props}) => <UserLastLoginCell level={props.data[props.row.index].level} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Marks' className='min-w-125px' />\r\n    ),\r\n    id: 'marks',\r\n    Cell: ({...props}) => <Marks marks={props.data[props.row.index].marks} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useEffect, useMemo, useState} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\nimport {useParams} from 'react-router-dom'\r\nimport {getQuizQuestions} from '../core/_requests'\r\n\r\nconst UsersTable = () => {\r\n  const params = useParams()\r\n  const {id} = params\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst QuestionList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuestionViewWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <QuestionList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {QuestionViewWrapper}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponseData} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const users = useQueryResponseData()\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      <ExportReactCSV csvData={users} fileName={'quiz'} />\r\n\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Quiz\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Quiz'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  console.log(user, 'user')\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {/* begin:: Avatar */}\r\n      {/* <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n        <a onClick={openEditModal} style={{cursor: 'pointer'}}>\r\n          {user.profile_image ? (\r\n            <div className='symbol-label'>\r\n              <img src={user.profile_image} alt={user.firstname} className='w-100' />\r\n            </div>\r\n          ) : (\r\n            <div className={clsx('symbol-label fs-3', `bg-light-warning`, `text-warning`)}>\r\n              {user.firstname?.charAt(0)}\r\n            </div>\r\n          )}\r\n        </a>\r\n      </div> */}\r\n      <div className='d-flex flex-column'>\r\n        <a\r\n          onClick={openEditModal}\r\n          style={{cursor: 'pointer'}}\r\n          className='text-gray-800 text-hover-primary mb-1'\r\n        >\r\n          {' '}\r\n          {user.name}\r\n        </a>\r\n\r\n        {/* <span>{user.email}</span> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  createdAt?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({createdAt}) => (\r\n  <div className='badge badge-light fw-bolder'>{createdAt}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC, useState} from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {getUserById, updateStatus} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  status?: boolean\r\n  id?: ID\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({status, id}) => {\r\n  const [stat, setStatus] = useState<any>(status)\r\n  console.log(stat, 'stat')\r\n  return (\r\n    <>\r\n      {' '}\r\n      {\r\n        <label className='form-check form-check-custom form-check-solid form-switch mb-5'>\r\n          <input\r\n            className='form-check-input'\r\n            type='checkbox'\r\n            name='status'\r\n            checked={stat}\r\n            onChange={async (e) => {\r\n              setStatus(e.currentTarget.checked)\r\n              await updateStatus({status: e.currentTarget.checked ? 1 : 0}, id)\r\n              Swal.fire({\r\n                title: 'Success!',\r\n                text: `Status updated successfully!`,\r\n                icon: 'success',\r\n                confirmButtonText: 'Okay',\r\n              })\r\n              // await getUserById(id)\r\n            }}\r\n          />\r\n        </label>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {Link} from 'react-router-dom'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n\r\n        <div className='menu-item'>\r\n          <Link\r\n            to={`/quiz/add-question/${id}`}\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            // onClick={}\r\n          >\r\n            Add Question\r\n          </Link>\r\n        </div>\r\n        <div className='menu-item'>\r\n          <Link\r\n            to={`/quiz/view-question/${id}`}\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            // onClick={}\r\n          >\r\n            View Question\r\n          </Link>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport axios, {AxiosResponse} from 'axios'\nimport clsx from 'clsx'\nimport {FC, useEffect, useState} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  courses: any\n}\n\nconst CoursesCell: FC<Props> = ({courses}) => {\n  const {allCourses} = useCommonData()\n\n  let item = allCourses?.filter((x: any) => courses?.some((y: any) => y.course_id === x.id))\n  item = item?.flatMap((x: any) => [x.course_name])\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.join(', ')}</div>\n    </div>\n  )\n}\n\nexport {CoursesCell}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\nimport {useCommonData} from '../../../commonData/CommonDataProvider'\n\ntype Props = {\n  subject_id: any\n}\n\nconst SubjectCell: FC<Props> = ({subject_id}) => {\n  const {allSubjects} = useCommonData()\n  let item = allSubjects?.find((x: any) => x.id == subject_id)\n\n  return (\n    <div className='d-flex align-items-center'>\n      <div className='d-flex flex-column'>{item?.subject_name}</div>\n    </div>\n  )\n}\n\nexport {SubjectCell}\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\nimport {CoursesCell} from './Courses'\r\nimport {SubjectCell} from './SubjectCell'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='ID' className='min-w-125px' />,\r\n    accessor: 'id',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Quiz Name' className='min-w-125px' />\r\n    ),\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Courses' className='min-w-125px' />\r\n    ),\r\n    id: 'courses',\r\n    Cell: ({...props}) => <CoursesCell courses={props.data[props.row.index].courses} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Subject' className='min-w-125px' />\r\n    ),\r\n    id: 'subject',\r\n    Cell: ({...props}) => <SubjectCell subject_id={props.data[props.row.index].subject_id} />,\r\n  },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Courses' className='min-w-125px' />\r\n  //   ),\r\n  //   accessor: 'courses',\r\n  // },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Added Date' className='min-w-125px' />\r\n    ),\r\n    id: 'createdAt',\r\n    Cell: ({...props}) => <UserLastLoginCell createdAt={props.data[props.row.index].createdAt} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Active' className='min-w-125px' />\r\n    ),\r\n    id: 'active',\r\n    Cell: ({...props}) => (\r\n      <UserTwoStepsCell\r\n        status={props.data[props.row.index].status}\r\n        id={props.data[props.row.index].id}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add Quiz</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\n\r\nexport type User = {\r\n  id?: ID\r\n  subject_id?: number\r\n  quiz_type_id?: number\r\n  question_type_id?: number\r\n  name?: string\r\n  duration?: number\r\n  total_questions?: number\r\n  marks?: number\r\n  language?: string\r\n  courses?: any\r\n  dates?: object\r\n  prize?: any\r\n  questions?: any\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object().shape({\r\n    name: Yup.string().required('Name is required'),\r\n    quiz_type_id: Yup.number().required('Quiz Type is required'),\r\n    courses: Yup.array().min(1),\r\n    subject_id: Yup.number().required('Subject id is required'),\r\n    duration: Yup.number().required('Quiz duration is required'),\r\n    language: Yup.string().required('Quiz language is required'),\r\n    total_questions: Yup.number().required('Total questions is required'),\r\n    marks: Yup.number().required('Marks are required'),\r\n  }),\r\n  Yup.object().shape({\r\n    dates: Yup.object().shape({\r\n      question_time: Yup.number().required('Question time is required'),\r\n      reg_open_date: Yup.date().required('Registration open date is required'),\r\n      start_date: Yup.date().required('Start date is required'),\r\n      result_publish_date: Yup.date().required('Result publish date is required'),\r\n    }),\r\n    prize: Yup.object().shape({\r\n      total_spots: Yup.number().required('Total spots is required'),\r\n      entry_fee: Yup.number().required('Entry fee is required'),\r\n      total_winner_percentage: Yup.number().required('Winner percentage is required'),\r\n      prize_distribution_percentage: Yup.number().required('Prize distribution is required'),\r\n      // prize_pool: Yup.number().required('Prize pool is required'),\r\n      // first_prize: Yup.number().required('First prize is required'),\r\n    }),\r\n  }),\r\n]\r\n\r\nexport const initialUser: User = {\r\n  id: undefined,\r\n  subject_id: undefined,\r\n  quiz_type_id: undefined,\r\n  question_type_id: undefined,\r\n  courses: [],\r\n  marks: undefined,\r\n  questions: [],\r\n  name: '',\r\n  duration: undefined,\r\n  total_questions: undefined,\r\n  language: '',\r\n  dates: {},\r\n  prize: {},\r\n}\r\n\r\nexport {createAccountSchemas}\r\n","import React, {FC, useEffect, useState} from 'react'\r\nimport {Field, ErrorMessage, Formik} from 'formik'\r\nimport Select from 'react-select'\r\nimport {getQuizTypes} from '../core/_requests'\r\nimport {useCommonData} from '../../commonData/CommonDataProvider'\r\n// import {checkEmail} from '../core/_requests'\r\n\r\ntype Props = {\r\n  setFieldValue: any\r\n  values: any\r\n  touched: any\r\n  setFieldError: any\r\n  errors: any\r\n}\r\n\r\nconst Step1: FC<Props> = ({setFieldValue, values, touched, setFieldError, errors}) => {\r\n  const {allCourses, allSubjects} = useCommonData()\r\n  const [courses, setCourses] = useState(allCourses)\r\n  const [subjects, setSubjects] = useState(values.id ? allSubjects : [])\r\n  const [selectedCourses, setSelectedCourses] = useState<any>(null)\r\n  const [quizType, setQuizType] = useState<any>([])\r\n  const [selectedLang, setSelectedLang] = useState<any>([])\r\n\r\n  const options = [\r\n    {label: 'Hindi', value: 'Hindi'},\r\n    {label: 'English', value: 'English'},\r\n  ]\r\n\r\n  useEffect(() => {\r\n    if (values.language) {\r\n    }\r\n  }, [values])\r\n\r\n  useEffect(() => {\r\n    quizTypes()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (values.id && courses.length > 0) {\r\n      const selected = courses.filter((x: any) =>\r\n        values?.courses.some((y: any) => y.course_id === x.id)\r\n      )\r\n      setSelectedCourses(selected)\r\n      const ids = values.courses?.flatMap((x: any) => [x.course_id])\r\n      getSubject(ids)\r\n      setFieldValue('courses', selected)\r\n      let splited = values.language.split(',')\r\n      setSelectedLang(options.filter((x: any) => splited.some((y: any) => y === x.label)))\r\n    }\r\n  }, [courses])\r\n\r\n  const quizTypes = async () => {\r\n    await getQuizTypes()\r\n      .then((data) => {\r\n        setQuizType(data)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }\r\n\r\n  const getSubject = (ids: any) => {\r\n    let items = allSubjects?.filter((x: any) => ids.some((y: any) => y == x.course_id))\r\n    setSubjects(items)\r\n  }\r\n\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Quiz Name</span>\r\n          </label>\r\n          <Field name='name' className='form-control mb-2' placeholder='Enter quiz name' />\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='name' />\r\n          </div>\r\n        </div>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Quiz Type</span>\r\n          </label>\r\n          <Field\r\n            name='quiz_type_id'\r\n            as='select'\r\n            className='form-select mb-2'\r\n            data-control='select2'\r\n            data-hide-search='true'\r\n            placeholder='Select an option'\r\n          >\r\n            <option></option>\r\n            {quizType?.map((item: any) => (\r\n              <option key={item.id} value={item.id}>\r\n                {item.quiz_type}\r\n              </option>\r\n            ))}\r\n          </Field>\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='quiz_type_id' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Courses</span>\r\n          </label>\r\n          <Select\r\n            isMulti\r\n            name='courses'\r\n            options={courses}\r\n            className='basic-multi-select'\r\n            classNamePrefix='select'\r\n            value={selectedCourses}\r\n            onChange={(e, i) => {\r\n              const ids = e.flatMap((item, i) => [item.id])\r\n              getSubject(ids)\r\n              setFieldValue('courses', e)\r\n              setSelectedCourses(e)\r\n            }}\r\n            getOptionLabel={(option: any) => option.course_name}\r\n            getOptionValue={(option: any) => option.id}\r\n          />\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='courses' />\r\n          </div>\r\n        </div>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Subject</span>\r\n          </label>\r\n          <Field\r\n            as='select'\r\n            name='subject_id'\r\n            className='form-select mb-2'\r\n            data-control='select2'\r\n            data-hide-search='true'\r\n            placeholder='Select an option'\r\n          >\r\n            <option></option>\r\n            {subjects.map((item: any, i: any) => (\r\n              <option key={i} value={item.id}>\r\n                {item.subject_name}\r\n              </option>\r\n            ))}\r\n          </Field>\r\n          <div className='text-danger'>\r\n            <ErrorMessage name='subject_id' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>\r\n            Quiz Duration (should be in minutes)\r\n          </label>\r\n\r\n          <Field\r\n            name='duration'\r\n            type='number'\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Question Marks'}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='duration' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Quiz Language</span>\r\n          </label>\r\n\r\n          <Select\r\n            isMulti\r\n            name='language'\r\n            options={options}\r\n            className='basic-multi-select'\r\n            classNamePrefix='select'\r\n            value={selectedLang}\r\n            onChange={(e: any, i: any) => {\r\n              setSelectedLang(e)\r\n              setFieldValue('language', e.map((item: any) => item.value).join(','))\r\n            }}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='language' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>No. Of Questions</label>\r\n\r\n          <Field\r\n            name='total_questions'\r\n            type='number'\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Question Marks'}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='total_questions' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Total Marks</span>\r\n          </label>\r\n\r\n          <Field\r\n            name='marks'\r\n            type={'number'}\r\n            className='form-control mb-2'\r\n            placeholder={'Enter negitive mark'}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='marks' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step1}\r\n","import React, {FC, useEffect, useState, useMemo, useRef} from 'react'\r\nimport {Field, ErrorMessage} from 'formik'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\ntype Props = {\r\n  values: any\r\n  setFieldValue: any\r\n  setSelectedLang: any\r\n  selectedLang: any\r\n  roleForEdit: any\r\n  errors: any\r\n}\r\n\r\nconst Step2: FC<Props> = ({\r\n  values,\r\n  setFieldValue,\r\n  selectedLang,\r\n  errors,\r\n  setSelectedLang,\r\n  roleForEdit,\r\n}) => {\r\n  console.log(values, 'values')\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>\r\n            Question Time (should be in Second)\r\n          </label>\r\n\r\n          <Field\r\n            name='dates.question_time'\r\n            type='number'\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Question Marks'}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='dates.question_time' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Quiz Start Date Time</span>\r\n          </label>\r\n\r\n          <DatePicker\r\n            className='form-control mb-2'\r\n            showTimeSelect\r\n            selected={values?.dates?.start_date ? new Date(values?.dates?.start_date) : new Date()}\r\n            onChange={(date: Date) => {\r\n              setFieldValue('dates.start_date', date)\r\n            }}\r\n          />\r\n          <div className='text-danger mt-2'>{errors?.dates?.start_date}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>Registration Date Time</label>\r\n\r\n          <DatePicker\r\n            name='dates.reg_open_date'\r\n            className='form-control mb-2'\r\n            showTimeSelect\r\n            selected={\r\n              values?.dates?.reg_open_date ? new Date(values?.dates?.reg_open_date) : new Date()\r\n            }\r\n            onChange={(date: Date) => {\r\n              setFieldValue('dates.reg_open_date', date)\r\n            }}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>{errors?.dates?.reg_open_date}</div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Result Publish Date Time</span>\r\n          </label>\r\n\r\n          <DatePicker\r\n            showTimeSelect\r\n            name='dates.result_publish_date'\r\n            className='form-control mb-2'\r\n            selected={\r\n              values?.dates?.result_publish_date\r\n                ? new Date(values?.dates?.result_publish_date)\r\n                : new Date()\r\n            }\r\n            onChange={(date: Date) => {\r\n              setFieldValue('dates.result_publish_date', date)\r\n            }}\r\n          />\r\n          <div className='text-danger mt-2'>{errors?.dates?.result_publish_date}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>Total Spots</label>\r\n\r\n          <Field\r\n            name='prize.total_spots'\r\n            type='number'\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Prize Pool'}\r\n\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='prize.total_spots' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Entry Fee</span>\r\n          </label>\r\n\r\n          <Field\r\n            name='prize.entry_fee'\r\n            type={'number'}\r\n            className='form-control mb-2'\r\n            placeholder={'Enter negitive mark'}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='prize.entry_fee' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>Total Winner Percentage</label>\r\n\r\n          <Field\r\n            name='prize.total_winner_percentage'\r\n            type='number'\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Question Marks'}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='prize.total_winner_percentage' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>Prize Distribution Percentage</span>\r\n          </label>\r\n\r\n          <Field\r\n            name='prize.prize_distribution_percentage'\r\n            type={'number'}\r\n            className='form-control mb-2'\r\n            placeholder={'Enter negitive mark'}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='prize.prize_distribution_percentage' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-flex flex-wrap gap-5 mb-10'>\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='fs-6 fw-bold form-label required'>Prize Pool</label>\r\n\r\n          <Field\r\n            name='prize.prize_pool'\r\n            type='number'\r\n            readOnly\r\n            className='form-control mb-2'\r\n            placeholder={'Enter Question Marks'}\r\n            // validate={validateEmail}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='prize.prize_pool' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='fv-row w-100 flex-md-root'>\r\n          <label className='d-flex align-items-center form-label'>\r\n            <span className='required'>First Prize</span>\r\n          </label>\r\n\r\n          <Field\r\n            name='prize.first_prize'\r\n            type={'number'}\r\n            readOnly\r\n            className='form-control mb-2'\r\n            placeholder={'Enter negitive mark'}\r\n          />\r\n          <div className='text-danger mt-2'>\r\n            <ErrorMessage name='prize.first_prize' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step2}\r\n","import {FC, useEffect, useRef, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {Form, Formik, FormikValues} from 'formik'\r\nimport {isNotEmpty, KTSVG} from '../../../../../_metronic/helpers'\r\nimport {createAccountSchemas, initialUser, User} from '../core/_models'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createQuizSetting, createUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport {StepperComponent} from '../../../../../_metronic/assets/ts/components'\r\nimport {Step1} from '../steps/Step1'\r\nimport {Step2} from '../steps/Step2'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: User\r\n}\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  const stepperRef = useRef<HTMLDivElement | null>(null)\r\n  const stepper = useRef<StepperComponent | null>(null)\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [isSubmitButton, setSubmitButton] = useState(false)\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n  const [roleForEdit, setRoleForEdit] = useState<User>({\r\n    ...role,\r\n    subject_id: role.subject_id || initialUser.subject_id,\r\n    name: role.name || initialUser.name,\r\n    quiz_type_id: role.quiz_type_id || initialUser.quiz_type_id,\r\n    marks: role.marks || initialUser.marks,\r\n    duration: role.duration || initialUser.duration,\r\n    total_questions: role.total_questions || initialUser.total_questions,\r\n    language: role.language || initialUser.language,\r\n    dates: role.dates || initialUser.dates,\r\n    prize: role.prize || initialUser.prize,\r\n    questions: role.questions || initialUser.questions,\r\n    courses: role.courses || initialUser.courses,\r\n  })\r\n  const [selectedLang, setSelectedLang] = useState<any>(null)\r\n\r\n  useEffect(() => {\r\n    if (!stepperRef.current) {\r\n      return\r\n    }\r\n\r\n    loadStepper()\r\n  }, [stepperRef])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const loadStepper = () => {\r\n    stepper.current = StepperComponent.createInsance(stepperRef.current as HTMLDivElement)\r\n  }\r\n\r\n  const prevStep = () => {\r\n    if (!stepper.current) {\r\n      return\r\n    }\r\n\r\n    setSubmitButton(stepper.current.currentStepIndex === stepper.current.totatStepsNumber! - 1)\r\n\r\n    stepper.current.goPrev()\r\n\r\n    setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex - 1])\r\n  }\r\n\r\n  const submitStep = async (values: User, actions: FormikValues) => {\r\n    if (!stepper.current) {\r\n      return\r\n    }\r\n    setSubmitButton(stepper.current.currentStepIndex === stepper.current.totatStepsNumber! - 1)\r\n    setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex])\r\n    if (stepper.current.currentStepIndex !== stepper.current.totatStepsNumber) {\r\n      const quiz = await createUser(values)\r\n      actions.setFieldValue('id', quiz?.id)\r\n      stepper.current.goNext()\r\n    } else {\r\n      try {\r\n        await createQuizSetting({id: values.id, dates: values.dates, prize: values.prize})\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        actions.resetForm()\r\n        cancel(true)\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: `Quiz Updated!`,\r\n          icon: 'success',\r\n          confirmButtonText: 'Okay',\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={stepperRef}\r\n        className='stepper stepper-links d-flex flex-column'\r\n        id='kt_create_account_stepper'\r\n      >\r\n        <div className='stepper-nav mb-5'>\r\n          <div className='stepper-item current' data-kt-stepper-element='nav'>\r\n            <h3 className='stepper-title'>Quiz Detail</h3>\r\n          </div>\r\n\r\n          <div className='stepper-item' data-kt-stepper-element='nav'>\r\n            <h3 className='stepper-title'>Quiz Setting</h3>\r\n          </div>\r\n        </div>\r\n\r\n        <Formik\r\n          validationSchema={currentSchema}\r\n          initialValues={roleForEdit}\r\n          onSubmit={submitStep}\r\n          validateOnChange={false}\r\n        >\r\n          {({setFieldValue, values, touched, setFieldError, errors}) => (\r\n            <Form className='mx-auto mw-700px w-100 pt-5 pb-10' id='kt_create_account_form'>\r\n              <div className='current' data-kt-stepper-element='content'>\r\n                <Step1\r\n                  setFieldValue={setFieldValue}\r\n                  values={values}\r\n                  touched={touched}\r\n                  setFieldError={setFieldError}\r\n                  errors={errors}\r\n                />\r\n              </div>\r\n\r\n              <div data-kt-stepper-element='content'>\r\n                <Step2\r\n                  setFieldValue={setFieldValue}\r\n                  values={values}\r\n                  selectedLang={selectedLang}\r\n                  setSelectedLang={setSelectedLang}\r\n                  roleForEdit={roleForEdit}\r\n                  errors={errors}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex flex-stack pt-15'>\r\n                <div className='mr-2'>\r\n                  <button\r\n                    onClick={prevStep}\r\n                    type='button'\r\n                    className='btn btn-lg btn-light-primary me-3'\r\n                    data-kt-stepper-action='previous'\r\n                  >\r\n                    <KTSVG\r\n                      path='/media/icons/duotune/arrows/arr063.svg'\r\n                      className='svg-icon-4 me-1'\r\n                    />\r\n                    Back\r\n                  </button>\r\n                </div>\r\n\r\n                <div>\r\n                  <button type='submit' className='btn btn-lg btn-primary me-3'>\r\n                    <span className='indicator-label'>\r\n                      {!isSubmitButton && 'Continue'}\r\n                      {isSubmitButton && 'Submit'}\r\n                      <KTSVG\r\n                        path='/media/icons/duotune/arrows/arr064.svg'\r\n                        className='svg-icon-3 ms-2 me-0'\r\n                      />\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      {isUserLoading && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\nimport {CommonDataProvider} from '../commonData/CommonDataProvider'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <CommonDataProvider>\r\n          <UsersList />\r\n        </CommonDataProvider>\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {QuestionListWrapper} from './question-list/QuestionList'\r\nimport {QuestionViewWrapper} from './question-view/QuestionView'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Quiz',\r\n    path: '/quiz/quiz',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst Quiz = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='quiz'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Quizzes list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route\r\n          path='add-question/:id'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Questions list</PageTitle>\r\n              <QuestionListWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route\r\n          path='view-question/:id'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Questions list</PageTitle>\r\n              <QuestionViewWrapper />\r\n            </>\r\n          }\r\n        />\r\n        <Route index element={<Navigate to='/quiz/quiz' />} />\r\n      </Route>\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default Quiz\r\n"],"names":["QUESTION_URL","QUIZ_URL","getUsers","query","axios","then","d","data","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","response","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","id","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","type","className","path","onChange","e","target","onClick","filter","undefined","initialQueryState","question_type","level","UsersListToolbar","navigate","useNavigate","window","addEventListener","addPopState","removeEventListener","to","UsersListGrouping","useParams","useQueryClient","deleteSelectedItems","useMutation","questionId","requests","map","deleteSelectedUsers","onSuccess","location","reload","addelectedItems","quizId","quiz_id","question_bank_id","addSelectedQuestion","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","user","console","log","openEditModal","removeHTML","str","tmp","document","createElement","innerHTML","textContent","innerText","questions","item","i","style","cursor","question","UserLastLoginCell","UserTwoStepsCell","params","getQuizQuestions","setStatus","catch","err","status","name","checked","currentTarget","color","UserSelectionCell","isSelected","includes","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","UserSelectionHeader","API_URL","USER_URL","QUIZTYPE_URL","createQuizSetting","quiz","updateStatus","CommonDataContext","allCourses","allSubjects","CommonDataProvider","setCourses","setSubjects","getData","useCommonData","SubjectCell","subject_id","find","x","subject_name","Type","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","users","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","colSpan","QuestionList","QuestionListWrapper","Marks","marks","QuestionViewWrapper","ExportReactCSV","csvData","fileName","CSVLink","filename","queryClient","userIds","invalidateQueries","createdAt","stat","Swal","text","icon","confirmButtonText","UserActionsCell","deleteItem","userId","href","CoursesCell","courses","some","y","course_id","flatMap","course_name","join","UserEditModalHeader","createAccountSchemas","Yup","shape","required","quiz_type_id","min","duration","language","total_questions","dates","question_time","reg_open_date","start_date","result_publish_date","prize","total_spots","entry_fee","total_winner_percentage","prize_distribution_percentage","initialUser","question_type_id","Step1","setFieldValue","values","touched","setFieldError","errors","subjects","selectedCourses","setSelectedCourses","quizType","setQuizType","selectedLang","setSelectedLang","options","quizTypes","ids","getSubject","splited","split","items","as","quiz_type","isMulti","classNamePrefix","getOptionLabel","option","getOptionValue","Step2","roleForEdit","showTimeSelect","Date","date","readOnly","UserEditModalForm","isUserLoading","stepperRef","useRef","stepper","isSubmitButton","setSubmitButton","currentSchema","setCurrentSchema","current","loadStepper","StepperComponent","prevStep","currentStepIndex","totatStepsNumber","goPrev","submitStep","actions","goNext","error","resetForm","ref","validationSchema","initialValues","onSubmit","validateOnChange","UserEditModalFormWrapper","enabledQuery","isNotEmpty","enabled","onError","UserEditModal","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","element","breadcrumbs"],"sourceRoot":""}