{"version":3,"file":"static/js/998.05151c91.chunk.js","mappings":"mOAKMA,EAAU,wCACVC,EAAQ,UAAMD,EAAN,SA2BRE,EAAa,SAACC,GAClB,OAAOC,IAAAA,KACCH,EAAUE,GACfE,MAAK,SAACC,GAAD,OAA6CA,EAASC,QAC3DF,MAAK,SAACC,GAAD,OAA8BA,EAASC,SAG3CC,EAAa,SAACL,GAElB,OADAM,QAAQC,IAAIP,EAAM,QACXC,IAAAA,IAAA,UACGH,EADH,YACeE,EAAKQ,IAAMR,GAC9BE,MAAK,SAACC,GAAD,OAA6CA,EAASC,QAC3DF,MAAK,SAACC,GAAD,OAA8BA,EAASC,S,SCtC3CK,GAAsBC,EAAAA,EAAAA,eAAwCC,EAAAA,IAE9DC,EAA2B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjC,GAA0BC,EAAAA,EAAAA,UAAqBH,EAAAA,GAAAA,OAA/C,eAAOI,EAAP,KAAcC,EAAd,KAOA,OACE,SAACP,EAAoBQ,SAArB,CAA8BC,MAAO,CAACH,MAAAA,EAAOI,YAN3B,SAACC,GACnB,IAAMC,GAAY,kBAAON,GAAUK,GACnCJ,EAASK,KAIT,SACGR,KAKDS,EAAkB,kBAAMC,EAAAA,EAAAA,YAAWd,ICTnCe,GAAuBC,EAAAA,EAAAA,IAA4BC,EAAAA,IACnDC,EAA4B,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAC3BE,EAASO,IAATP,MACP,GAA0BD,EAAAA,EAAAA,WAAiBc,EAAAA,EAAAA,IAAsBb,IAAjE,eAAOc,EAAP,KAAcC,EAAd,KACMC,GAAeC,EAAAA,EAAAA,UAAQ,kBAAMJ,EAAAA,EAAAA,IAAsBb,KAAQ,CAACA,KAElEkB,EAAAA,EAAAA,YAAU,WACJJ,IAAUE,GACZD,EAASC,KAEV,CAACA,IAEJ,OAIIG,EAAAA,EAAAA,UAAS,GAAD,OACPC,EAAAA,GAAAA,WADO,YACeN,IACzB,WACE,OF1BW,SAACA,GAChB,OAAO5B,IAAAA,IAAA,UACGH,EADH,YACe+B,IACnB3B,MAAK,SAACkC,GAAD,OAA+CA,EAAEhC,QEuB9CiC,CAASR,KAElB,CAACS,UAAW,EAAGC,kBAAkB,EAAMC,sBAAsB,IAR7DC,EADF,EACEA,WACAC,EAFF,EAEEA,QACMvC,EAHR,EAGEC,KASF,OACE,SAACoB,EAAqBP,SAAtB,CAA+BC,MAAO,CAACyB,UAAWF,EAAYC,QAAAA,EAASvC,SAAAA,EAAU0B,MAAAA,GAAjF,SACGhB,KAKD+B,EAAmB,kBAAMrB,EAAAA,EAAAA,YAAWC,IAEpCqB,EAAuB,WAC3B,IAAO1C,EAAYyC,IAAZzC,SACP,OAAKA,IAIU,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUC,OAHR,IAoBL0C,EAA0B,WAE9B,OADoBF,IAAbD,WC5DHI,GAAkBrC,EAAAA,EAAAA,eAAoCsC,EAAAA,IAEtDC,EAAuB,SAAC,GAAgB,IAAfpC,EAAc,EAAdA,SAC7B,GAAgCC,EAAAA,EAAAA,UAAoBkC,EAAAA,GAAAA,UAApD,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAA8CrC,EAAAA,EAAAA,UAAakC,EAAAA,GAAAA,iBAA3D,eAAOI,EAAP,KAAwBC,EAAxB,KACOV,EAAaC,IAAbD,UACDvC,EAAOyC,IACPS,GAAWtB,EAAAA,EAAAA,UAAQ,kBAAMuB,EAAAA,EAAAA,IAA6BZ,EAAWvC,KAAO,CAACuC,EAAWvC,IACpFoD,GAAgBxB,EAAAA,EAAAA,UAAQ,kBAAMyB,EAAAA,EAAAA,IAA2BrD,EAAM8C,KAAW,CAAC9C,EAAM8C,IAEvF,OACE,SAACH,EAAgB9B,SAAjB,CACEC,MAAO,CACLgC,SAAAA,EACAE,gBAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAE,cAAAA,EACAE,SAAU,SAAClD,IACTmD,EAAAA,EAAAA,IAAiBnD,EAAI0C,EAAUC,IAEjCS,YAAa,YACXC,EAAAA,EAAAA,IAAoBL,EAAeL,EAAa/C,IAElD0D,cAAe,WACbX,EAAY,MAdlB,SAkBGtC,KAKDkD,EAAc,kBAAMxC,EAAAA,EAAAA,YAAWwB,I,UCxC/BiB,EAAkB,WACtB,IAAO7C,EAAeG,IAAfH,YACAwB,EAAaC,IAAbD,UACP,GAAwB7B,EAAAA,EAAAA,YAAxB,eAAOd,EAAP,KAAaiE,EAAb,KACA,GAAkCnD,EAAAA,EAAAA,YAAlC,eAAOoD,EAAP,KAAkBC,EAAlB,MAEAlC,EAAAA,EAAAA,YAAU,WACRmC,EAAAA,GAAAA,qBACC,IAaH,OACE,iCAEE,oBACEd,SAAUX,EACV0B,KAAK,SACLC,UAAU,6BACV,uBAAqB,QACrB,yBAAuB,aALzB,WAOE,SAAC,KAAD,CAAOC,KAAK,0CAA0CD,UAAU,eAPlE,aAYA,iBAAKA,UAAU,qDAAqD,eAAa,OAAjF,WAEE,gBAAKA,UAAU,YAAf,UACE,gBAAKA,UAAU,2BAAf,+BAKF,gBAAKA,UAAU,+BAIf,iBAAKA,UAAU,YAAY,4BAA0B,OAArD,WAEE,iBAAKA,UAAU,QAAf,WACE,kBAAOA,UAAU,0BAAjB,oBACA,oBACEA,UAAU,0CACV,kBAAgB,OAChB,mBAAiB,gBACjB,mBAAiB,OACjB,4BAA0B,OAC1B,mBAAiB,OACjBE,SAAU,SAACC,GAAD,OAAOR,EAAQQ,EAAEC,OAAOxD,QAClCA,MAAOlB,EART,WAUE,mBAAQkB,MAAM,MACd,mBAAQA,MAAM,gBAAd,4BACA,mBAAQA,MAAM,UAAd,sBACA,mBAAQA,MAAM,YAAd,wBACA,mBAAQA,MAAM,UAAd,sBACA,mBAAQA,MAAM,QAAd,0BAMJ,iBAAKoD,UAAU,QAAf,WACE,kBAAOA,UAAU,0BAAjB,0BACA,oBACEA,UAAU,0CACV,kBAAgB,OAChB,mBAAiB,gBACjB,mBAAiB,OACjB,4BAA0B,WAC1B,mBAAiB,OACjBE,SAAU,SAACC,GAAD,OAAON,EAAaM,EAAEC,OAAOxD,QACvCA,MAAOgD,EART,WAUE,mBAAQhD,MAAM,MACd,mBAAQA,MAAM,YAAd,wBACA,mBAAQA,MAAM,cAAd,0BACA,mBAAQA,MAAM,cAAd,0BACA,mBAAQA,MAAM,aAAd,+BAMJ,iBAAKoD,UAAU,6BAAf,WACE,mBACED,KAAK,SACLf,SAAUX,EACVgC,QArFO,WACjBxD,GAAY,QACVyD,OAAQ,CAAC5E,KAAAA,EAAM6E,WAAYX,IACxBY,EAAAA,MAmFKR,UAAU,2DACV,uBAAqB,OACrB,4BAA0B,QAN5B,oBAUA,mBACEhB,SAAUX,EACV0B,KAAK,SACLM,QAnGM,WAChBxD,GAAY,QAACyD,YAAQG,GAAcD,EAAAA,MAmGzBR,UAAU,+BACV,uBAAqB,OACrB,4BAA0B,SAN5B,gC,UC5GCU,EAAiB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACtC,OACI,oBAAQb,KAAK,SAASC,UAAU,6BAAhC,WACI,SAAC,KAAD,CAAOC,KAAK,yCAAyCD,UAAU,gBAC/D,SAAC,EAAAa,QAAD,CAAS/E,KAAM6E,EAASG,SAAUF,EAAlC,wBCFNG,EAAmB,WACvB,IAAOhC,EAAsBU,IAAtBV,mBACDiC,EAAQzC,IAKd,OACE,iBAAKyB,UAAU,6BAA6B,6BAA2B,OAAvE,WACE,SAACN,EAAD,KAEA,SAACgB,EAAD,CAAgBC,QAASK,EAAOJ,SAAU,WAE1C,oBAAQb,KAAK,SAASC,UAAU,kBAAkBK,QAV7B,WACvBtB,EAAmB,OASjB,WACE,SAAC,KAAD,CAAOkB,KAAK,yCAAyCD,UAAU,eADjE,kB,oBCbAiB,EAAoB,WACxB,MAAkCxB,IAA3Bb,EAAP,EAAOA,SAAUY,EAAjB,EAAiBA,cACX0B,GAAcC,EAAAA,EAAAA,kBACb5D,EAASe,IAATf,MAED6D,GAAsBC,EAAAA,EAAAA,cAAY,kBPyCd,SAACC,GAC3B,IAAMC,EAAWD,EAAQE,KAAI,SAACtF,GAAD,OAAQP,IAAAA,OAAA,UAAgBH,EAAhB,YAA4BU,OACjE,OAAOP,IAAAA,IAAU4F,GAAU3F,MAAK,eO3Cc6F,CAAoB7C,KAAW,CAE3E8C,UAAW,WAETR,EAAYS,kBAAkB,CAAC,GAAD,OAAI9D,EAAAA,GAAAA,WAAJ,YAA0BN,KACxDiC,OAIJ,OACE,iBAAKQ,UAAU,gDAAf,WACE,iBAAKA,UAAU,iBAAf,WACE,iBAAMA,UAAU,OAAhB,SAAwBpB,EAASgD,SADnC,gBAIA,mBACE7B,KAAK,SACLC,UAAU,iBACVK,SAAO,uBAAE,mGAAkBe,EAAoBS,cAAtC,mFAHX,iCCrBAC,EAA2B,WAC/B,IAAOjF,EAAeG,IAAfH,YACP,GAAoCL,EAAAA,EAAAA,UAAiB,IAArD,eAAOuF,EAAP,KAAmBC,EAAnB,KAKMC,GAAsBC,EAAAA,EAAAA,IAAYH,EAAY,KAapD,OAZA/F,QAAQC,IAAIgG,EAAqB,uBAEjCtE,EAAAA,EAAAA,YACE,gBAC8B8C,IAAxBwB,QAAoDxB,IAAfsB,GACvClF,GAAY,QAACsF,OAAQF,GAAwBzB,EAAAA,OAGjD,CAACyB,KAKD,gBAAKjC,UAAU,aAAf,UAEE,iBAAKA,UAAU,mDAAf,WACE,SAAC,KAAD,CACEC,KAAK,0CACLD,UAAU,uCAEZ,kBACED,KAAK,OACL,4BAA0B,SAC1BC,UAAU,gDACVoC,YAAY,cACZxF,MAAOmF,EACP7B,SAAU,SAACC,GAAD,OAAO6B,EAAc7B,EAAEC,OAAOxD,gBClC5CyF,EAAuB,WAC3B,IAAOzD,EAAYa,IAAZb,SACP,OACE,iBAAKoB,UAAU,4BAAf,WACE,SAAC8B,EAAD,KAEA,gBAAK9B,UAAU,eAAf,SAEGpB,EAASgD,OAAS,GAAI,SAACX,EAAD,KAAwB,SAACF,EAAD,U,UCLjDuB,EAAgC,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACpC,8BACGA,EAAOC,QAAmC,kBAAlBD,EAAOC,QAC9B,iCAAQD,EAAOE,kBAAf,aAAkCF,EAAOG,OAAO,aAEhDH,EAAOG,OAAO,a,UCJdC,EAAuB,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAF,OAC3B,iCAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMtB,KAAI,SAACuB,GACd,OACE,iCACMA,EAAKC,gBADX,IAEEhD,WAAWiD,EAAAA,EAAAA,GAAK,CAAC,uBAA2C,YAAnBF,EAAKR,OAAOrG,KAFvD,SAIG6G,EAAKL,OAAO,kBCNjBQ,EAA0B,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACzBpE,EAAsBU,IAAtBV,mBAMP,OACE,gBAAKiB,UAAU,4BAAf,UACE,gBAAKA,UAAU,qBAAf,UACE,cACEK,QARc,WACpBtB,EAAmBoE,EAAKjH,KAQlBkH,MAAO,CAACC,OAAQ,WAChBrD,UAAU,wCAHZ,SAKGmD,EAAKG,YCnBVC,EAAwB,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OAC5B,iCACE,gBAAKxD,UAAU,wDAAf,UACE,iBAAKA,UAAU,wCAAf,iBACGwD,QADH,IACGA,OADH,EACGA,EAAaC,MAAM,EAAG,GAAGjC,KAAI,SAACkC,EAAWC,GAAZ,OAC5B,gBAEE3D,UAAU,mCACV,iBAAe,UACf4D,MAAK,UAAKF,EAAKG,WAAV,YAAwBH,EAAKI,WAJpC,SAM0B,OAAnB,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMK,gBACL,iBACE/D,UAAU,8CACVoD,MAAO,CAACY,gBAAgB,IAAD,OAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAF7E,gBAIGV,QAJH,IAIGA,OAJH,EAIGA,EAAMG,WAAWQ,OAAO,MAG3B,gBAAKC,IAAI,MAAMC,IAAKb,EAAKK,iBAbtBJ,OAiBG,OAAXH,QAAW,IAAXA,OAAA,EAAAA,EAAa5B,QAAS,IACrB,cACE4C,KAAK,IACLxE,UAAU,mCACV,iBAAe,QACf,iBAAe,uBAJjB,UAME,kBAAMA,UAAU,qDAAhB,eACe,OAAXwD,QAAW,IAAXA,OAAA,EAAAA,EAAa5B,QAAS,aAMlC,gBAAK5B,UAAU,aAAa9D,GAAG,sBAAsBuI,UAAW,EAAG,cAAY,OAA/E,UACE,gBAAKzE,UAAU,wBAAf,UACE,iBAAKA,UAAU,gBAAf,WACE,gBAAKA,UAAU,iDAAf,UACE,gBAAKA,UAAU,+CAA+C,kBAAgB,QAA9E,UACE,iBAAMA,UAAU,sBAAhB,UACE,iBACE0E,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OALP,WAOE,iBACEC,QAAQ,MACRC,EAAE,IACFC,EAAE,UACFN,MAAM,KACNC,OAAO,IACPM,GAAG,IACHC,UAAU,wBACVL,KAAK,kBAEP,iBACEE,EAAE,UACFC,EAAE,IACFN,MAAM,KACNC,OAAO,IACPM,GAAG,IACHC,UAAU,uBACVL,KAAK,2BAOf,iBAAK9E,UAAU,+CAAf,WACE,iBAAKA,UAAU,oBAAf,WACE,eAAIA,UAAU,OAAd,4BACA,gBAAKA,UAAU,0BAAf,4DAIF,gBAAKA,UAAU,QAAf,UACE,gBAAKA,UAAU,+BAAf,gBACGwD,QADH,IACGA,OADH,EACGA,EAAahC,KAAI,SAAC1F,EAAW6H,GAE5B,OADA3H,QAAQC,IAAIH,EAAM,SAEhB,iBAEEkE,UAAU,4EAFZ,WAIE,iBAAKA,UAAU,4BAAf,WACE,gBAAKA,UAAU,sCAgBf,gBAAKA,UAAU,OAAf,UACE,cACEwE,KAAK,IACLxE,UAAU,wEAFZ,UAKE,iBAAMA,UAAU,sCAAhB,SACkB,IAAX,OAAJlE,QAAI,IAAJA,OAAA,EAAAA,EAAMsJ,OAAa,QAAU,aAMtC,gBAAKpF,UAAU,SAAf,UACE,gBAAKA,UAAU,WAAf,UACE,gBAAKA,UAAU,2BAAf,2BAnCC2D,wB,mBChFrB0B,EAA6B,SAAC,GAAU,IAATnJ,EAAQ,EAARA,GAC5B6C,EAAsBU,IAAtBV,mBACAxB,EAASe,IAATf,MACD2D,GAAcC,EAAAA,EAAAA,mBAEpBxD,EAAAA,EAAAA,YAAU,WACRmC,EAAAA,GAAAA,qBACC,IAEH,IAIMwF,GAAajE,EAAAA,EAAAA,cAAY,kBdqBbkE,EcrB8BrJ,EdsBzCP,IAAAA,OAAA,UAAgBH,EAAhB,YAA4B+J,IAAU3J,MAAK,eADjC,IAAC2J,IcrBmC,CAEnD7D,UAAW,WAET8D,IAAAA,KAAU,CACR5B,MAAO,WACP6B,KAAK,gBACLC,KAAM,UACNC,kBAAmB,SAErBzE,EAAYS,kBAAkB,CAAC,GAAD,OAAI9D,EAAAA,GAAAA,WAAJ,YAA0BN,QAI5D,OACE,iCACE,cACEiH,KAAK,IACLxE,UAAU,gDACV,uBAAqB,QACrB,yBAAuB,aAJzB,UAME,cAAGA,UAAU,sCAGf,iBACEA,UAAU,+HACV,eAAa,OAFf,WAKE,gBAAKA,UAAU,iBAAf,UACE,cAAGA,UAAU,iBAAiBK,QAnChB,WACpBtB,EAAmB7C,IAkCb,qBAOF,gBAAK8D,UAAU,iBAAf,UACE,cACEA,UAAU,iBACV,6BAA2B,aAC3BK,SAAO,uBAAE,mFACPmF,IAAAA,KAAU,CACR5B,MAAO,gBACP6B,KAAM,oCACNC,KAAM,UACNE,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBH,kBAAmB,oBAClB/J,KARH,yCAQQ,WAAOmK,GAAP,0EAEFA,EAAOC,YAFL,gCAGEV,EAAWzD,cAHb,2CARR,uDADO,2CAHX,6BC1DJoE,EAA+B,SAAC,GAAU,IAAT/J,EAAQ,EAARA,GACrC,EAA6BuD,IAAtBb,EAAP,EAAOA,SAAUQ,EAAjB,EAAiBA,SACX8G,GAAaxI,EAAAA,EAAAA,UAAQ,kBAAMkB,EAASuH,SAASjK,KAAK,CAACA,EAAI0C,IAC7D,OACE,gBAAKoB,UAAU,8DAAf,UACE,kBACEA,UAAU,mBACVD,KAAK,WACL,gBAAemG,EACf,uBAAqB,oCACrBE,QAASF,EACThG,SAAU,kBAAMd,EAASlD,SCP3BmK,EAA8B,SAAC,GAAoC,IAAnCrG,EAAkC,EAAlCA,UAAW4D,EAAuB,EAAvBA,MAAO0C,EAAgB,EAAhBA,WAChDpK,EAAKoK,EAAW/D,OAAOrG,GAC7B,EAA6Bc,IAAtBP,EAAP,EAAOA,MAAOI,EAAd,EAAcA,YACR0J,GAAuB7I,EAAAA,EAAAA,UAAQ,WACnC,OAAOjB,EAAM+J,MAAQ/J,EAAM+J,OAAStK,IACnC,CAACO,EAAOP,IACLuK,GAAoC/I,EAAAA,EAAAA,UAAQ,kBAAMjB,EAAMgK,QAAO,CAAChK,IA0BtE,OACE,iCACM6J,EAAW/D,OAAOE,kBADxB,IAEEzC,WAAWiD,EAAAA,EAAAA,GACTjD,EACAuG,QAAkC9F,IAAVgG,GAAxB,qBAA6DA,IAE/DrD,MAAO,CAACC,OAAQ,WAChBhD,QAhCe,WAEjB,GAAW,YAAPnE,GAA2B,cAAPA,EAIxB,GAAKqK,GAML,GAAIA,QAAkC9F,IAAVgG,EAAqB,CAC/C,GAAc,QAAVA,EAGF,YADA5J,GAAY,QAAC2J,KAAMtK,EAAIuK,MAAO,QAAWjG,EAAAA,KAK3C3D,GAAY,QAAC2J,UAAM/F,EAAWgG,WAAOhG,GAAcD,EAAAA,WAZnD3D,GAAY,QAAC2J,KAAMtK,EAAIuK,MAAO,OAAUjG,EAAAA,MAiB1C,SASGoD,MC7CD8C,EAAiC,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,WACvC,EAAqC7G,IAA9BP,EAAP,EAAOA,cAAeI,EAAtB,EAAsBA,YACtB,OACE,iCAAQgH,EAAW/D,OAAOE,kBAA1B,IAA4CzC,UAAU,cAAtD,UACE,gBAAKA,UAAU,mEAAf,UACE,kBACEA,UAAU,mBACVD,KAAK,WACL,gBAAeb,EACf,uBAAqB,oCACrBkH,QAASlH,EACTgB,SAAUZ,UCVdqH,EAA4C,CAChD,CACEnE,OAAQ,SAACoE,GAAD,OAAW,SAACF,EAAD,CAAqBJ,WAAYM,KACpD1K,GAAI,YACJ2K,KAAM,gBAAKD,EAAL,2BAAgB,SAACX,EAAD,CAAmB/J,GAAI0K,EAAM9K,KAAK8K,EAAMhE,IAAIkE,OAAO5K,OAE3E,CACEsG,OAAQ,SAACoE,GAAD,OAAW,SAACP,EAAD,CAAkBC,WAAYM,EAAOhD,MAAM,OAAO5D,UAAU,iBAC/E9D,GAAI,OACJ2K,KAAM,gBAAKD,EAAL,2BAAgB,SAAC1D,EAAD,CAAcC,KAAMyD,EAAM9K,KAAK8K,EAAMhE,IAAIkE,WAGjE,CACEtE,OAAQ,SAACoE,GAAD,OACN,SAACP,EAAD,CAAkBC,WAAYM,EAAOhD,MAAM,cAAc5D,UAAU,iBAErE9D,GAAI,cACJ2K,KAAM,gBAAKD,EAAL,2BAAgB,SAACrD,EAAD,CAAYC,YAAaoD,EAAM9K,KAAK8K,EAAMhE,IAAIkE,OAAOtD,gBAS7E,CACEhB,OAAQ,SAACoE,GAAD,OACN,SAACP,EAAD,CAAkBC,WAAYM,EAAOhD,MAAM,UAAU5D,UAAU,0BAEjE9D,GAAI,UACJ2K,KAAM,gBAAKD,EAAL,2BAAgB,SAACvB,EAAD,CAAiBnJ,GAAI0K,EAAM9K,KAAK8K,EAAMhE,IAAIkE,OAAO5K,QCzCrE6K,EAAmB,WAcvB,OAAO,gBAAK3D,OAAK,kBAbF,CACb4D,aAAc,WACdC,UAAW,kCACXjD,gBAAiB,OACjBkD,MAAO,UACPC,WAAY,MACZC,OAAQ,IACRzC,MAAO,OACP0C,QAAS,YACTC,IAAK,mBACLC,KAAM,qBAGS,IAAcC,SAAU,WAAYC,UAAW,WAAzD,4BCTHC,EAAsB,WAAO,IAAD,EAC1BC,ElBmD2B,WACjC,IAAMC,GAAuC,QAC3CC,MAAO,IACJrH,EAAAA,IAGE3E,EAAYyC,IAAZzC,SACP,OAAKA,GAAaA,EAASiM,SAAYjM,EAASiM,QAAQH,WAIjD9L,EAASiM,QAAQH,WAHfC,EkB3DUG,GACb1J,EAAYG,IACX3B,EAAeG,IAAfH,YASP,OACE,iBAAKmD,UAAU,MAAf,WACE,gBAAKA,UAAU,kGACf,gBAAKA,UAAU,6FAAf,UACE,gBAAK9D,GAAG,0BAAR,UACE,eAAI8D,UAAU,aAAd,mBACG2H,EAAWE,aADd,aACG,EAAkBrG,KAAI,SAACwG,GAAD,OACrB,eAEEhI,WAAWiD,EAAAA,EAAAA,GAAK,YAAa,CAC3BgF,OAAQN,EAAWO,OAASF,EAAKE,KACjClJ,SAAUX,EACV8J,SAAyB,qBAAfH,EAAKI,MACfC,KAAqB,iBAAfL,EAAKI,QANf,UASE,cACEpI,UAAU,YACVK,QAAS,WA1BN,IAAC6H,KA0BsBF,EAAKE,QAzBhC7J,GAAasJ,EAAWO,OAASA,GAI9CrL,EAAY,CAACqL,KAAAA,EAAMI,eAAgBX,EAAWW,gBAAkB,MAsBlDC,wBAAyB,CAACC,OAAQR,EAAKI,OACvChF,MAAO,CAACC,OAAQ,cAZb2E,EAAKI,oBCdpBK,EAAa,WACjB,IAAMzH,EAAQzC,IACRF,EAAYG,IACZ1C,GAAO4B,EAAAA,EAAAA,UAAQ,kBAAMsD,IAAO,CAACA,IAC7B0H,GAAUhL,EAAAA,EAAAA,UAAQ,kBAAMiJ,IAAc,IAC5C,GAAsEgC,EAAAA,EAAAA,UAAS,CAC7ED,QAAAA,EACA5M,KAAAA,IAFK8M,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,kBAAmBC,EAAzC,EAAyCA,QAASC,EAAlD,EAAkDA,KAAMC,EAAxD,EAAwDA,WAKxD,OACE,UAAC,KAAD,CAAYhJ,UAAU,OAAtB,WACE,gBAAKA,UAAU,mBAAf,UACE,mCACE9D,GAAG,iBACH8D,UAAU,qEACN4I,KAHN,eAKE,4BACE,eAAI5I,UAAU,2DAAd,SACG8I,EAAQtH,KAAI,SAACe,GAAD,OACX,SAACD,EAAD,CAAoCC,OAAQA,GAAnBA,EAAOrG,YAItC,kCAAO8D,UAAU,yBAA4B6I,KAA7C,aACGE,EAAKnH,OAAS,EACbmH,EAAKvH,KAAI,SAACoB,EAAgBe,GAExB,OADAqF,EAAWpG,IACJ,SAACD,EAAD,CAAWC,IAAKA,GAAhB,cAAiCe,EAAjC,YAAsCf,EAAI1G,SAGnD,yBACE,eAAI+M,QAAS,EAAb,UACE,gBAAKjJ,UAAU,uEAAf,qDASZ,SAAC0H,EAAD,IACCrJ,IAAa,SAAC0I,EAAD,QCpDdmC,EAAsB,WAC1B,IAAOnK,EAAsBU,IAAtBV,mBAEP,OACE,iBAAKiB,UAAU,eAAf,WAEE,eAAIA,UAAU,YAAd,yBAIA,gBACEA,UAAU,8CACV,6BAA2B,QAC3BK,QAAS,kBAAMtB,OAAmB0B,IAClC2C,MAAO,CAACC,OAAQ,WAJlB,UAME,SAAC,KAAD,CAAOpD,KAAK,yCAAyCD,UAAU,qB,iCCV1DmJ,GAAoB,CAC/B7F,KAAM,GACN8F,gBAAiB,ICObC,GAAiBC,GAAAA,KAAaC,MAAM,CACxCjG,KAAMgG,GAAAA,KACHE,IAAI,EAAG,qBACPC,IAAI,GAAI,sBACRC,SAAS,sBAGRC,GAA+B,SAAC,GAA2B,IAA1BjO,EAAyB,EAAzBA,KAAMkO,EAAmB,EAAnBA,cAC3C5N,QAAQC,IAAIP,EAAM,QAClB,IAAOqD,EAAsBU,IAAtBV,mBACAX,EAAWE,IAAXF,QACP,GAAsC5B,EAAAA,EAAAA,UAAgB,IAAtD,eAAOqN,EAAP,KAAoBC,EAApB,KACA,GAAsCtN,EAAAA,EAAAA,WAAQ,kBACzCd,GADyC,IAE5C4H,KAAM5H,EAAK4H,MAAQ6F,GAAY7F,KAC/B8F,gBAAiB1N,EAAK0N,iBAAmBD,GAAYC,mBAHvD,eAAOW,EAAP,KAAoBC,EAApB,MAMArM,EAAAA,EAAAA,YAAU,WxBfHhC,IAAAA,IAAA,UACGJ,EADH,sBAEJK,MAAK,SAACkC,GAAD,OAA+CA,EAAEhC,QwBepDF,MAAK,SAACE,GACL,IAAImO,EACJA,EAAUnO,EAAKA,KACfgO,EAAeG,MAEhBC,OAAM,SAACC,GACNnO,QAAQC,IAAIkO,EAAK,YAEpB,IAEH,IAAMC,EAAS,SAACC,GACVA,GACFjM,IAEFW,OAAmB0B,IAGf6J,GAASC,EAAAA,GAAAA,IAAU,CACvBC,cAAeT,EACfU,iBAAkBpB,GAClBqB,SAAS,WAAD,8BAAE,WAAOC,EAAP,mFAAgBC,EAAhB,EAAgBA,gBACV,GADN,WAGFC,EAAAA,EAAAA,IAAWF,EAAOzO,IAHhB,gCAIEH,EAAW4O,GAJb,+CAMElP,EAAWkP,GANb,0DASN3O,QAAQ8O,MAAR,MATM,yBAWNF,GAAc,GACdR,GAAO,GACP5E,IAAAA,KAAU,CACR5B,MAAO,WACP6B,KAAK,QAAD,OAAUkF,EAAOzO,GAAK,UAAY,UAAlC,KACJwJ,KAAM,UACNC,kBAAmB,SAjBf,6EAAF,qDAAC,KAuBLoF,EAAa,SAAC5K,EAAQjE,GAC1B,MAAwBiE,EAAEC,OAAnBgG,EAAP,EAAOA,QAAS9C,EAAhB,EAAgBA,KACZ0H,EAAYjB,EAAYX,gBACtBtC,EAAK,OAAGkE,QAAH,IAAGA,OAAH,EAAGA,EAAMC,WAAU,SAACjG,GAAD,OAAYA,EAAEkG,eAAiBhP,MAC9C,IAAX4K,EACFkE,EAAKlE,IAAL,kBAAkBkE,EAAKlE,IAAvB,eAAgCxD,EAAO8C,IAEnC,OAAJ4E,QAAI,IAAJA,GAAAA,EAAMG,KAAK,CACTD,cAAehP,EACfkP,WAAkB,YAAR9H,IAAsB8C,GAChCiF,eAAsB,gBAAR/H,IAA0B8C,GACxCkF,aAAoB,cAARhI,IAAwB8C,GACpCmF,WAAkB,YAARjI,IAAsB8C,GAChCoF,aAAoB,cAARlI,IAAwB8C,KAGxC4D,GAAe,kBAAID,GAAL,IAAkBX,gBAAiB4B,MAGnD,OACE,iCACE,kBAAM9O,GAAG,yBAAyB8D,UAAU,OAAO0K,SAAUJ,EAAOmB,aAAcC,YAAU,EAA5F,WAEE,iBACE1L,UAAU,yCACV9D,GAAG,2BACH,iBAAe,OACf,0BAAwB,6BACxB,4BAA0B,OAC1B,8BAA4B,4BAC5B,0BAAwB,4BACxB,wBAAsB,QARxB,WAUE,iBAAK8D,UAAU,cAAf,WACE,kBAAOA,UAAU,6BAAjB,wBACA,kCACEoC,YAAY,qBACRkI,EAAOqB,cAAc,SAF3B,IAGE5L,KAAK,OACLuD,KAAK,OACLtD,WAAWiD,EAAAA,EAAAA,GACT,+CACA,CAAC,aAAcqH,EAAOsB,QAAQtI,MAAQgH,EAAOuB,OAAOvI,MACpD,CACE,WAAYgH,EAAOsB,QAAQtI,OAASgH,EAAOuB,OAAOvI,OAGtDwI,aAAa,MACb9M,SAAUsL,EAAOyB,cAAgBnC,KAElCU,EAAOsB,QAAQtI,MAAQgH,EAAOuB,OAAOvI,OACpC,gBAAKtD,UAAU,+BAAf,UACE,gBAAKA,UAAU,gBAAf,UACE,iBAAMtE,KAAK,QAAX,SAAoB4O,EAAOuB,OAAOvI,eAM1C,iBAAKtD,UAAU,SAAf,WACE,kBAAOA,UAAU,oBAAjB,+BACA,gBAAKA,UAAU,mBAAf,UACE,kBAAOA,UAAU,gDAAjB,UACE,kBAAOA,UAAU,wBAAjB,SACG6J,EAAYrI,KAAI,SAACkC,EAAMC,GAAP,uCACf,2BACE,eAAI3D,UAAU,gBAAd,SAA+B0D,EAAKJ,QACpC,eAAIF,MAAO,CAAC4I,YAAa,IAAzB,UACE,iBAAKhM,UAAU,SAAf,WACE,mBAAOA,UAAU,4EAAjB,WACE,oCACMsK,EAAOqB,cAAc,6BAD3B,IAEE3L,UAAU,mBACVD,KAAK,WACLqG,QAAO,UACL2D,EAAYX,uBADP,iBACL,EAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aAFjC,aACL,EAEGkP,SAELpM,SAGqB,IAFnB,UAAA+K,EAAYX,uBAAZ,mBAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aADtC,eAEGmP,cAEL/H,KAAK,WACLpD,SAAU,SAACC,GAAD,OAAO4K,EAAW5K,EAAGuD,EAAKxH,SAEtC,iBAAM8D,UAAU,mBAAhB,sBAEF,mBAAOA,UAAU,4EAAjB,WACE,oCACMsK,EAAOqB,cAAc,iCAD3B,IAEE3L,UAAU,mBACVD,KAAK,WACLqG,QAAO,UACL2D,EAAYX,uBADP,iBACL,EAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aAFjC,aACL,EAEGmP,aAEL/H,KAAK,eACLtE,SAGiB,IAFf,UAAA+K,EAAYX,uBAAZ,mBAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aADtC,eAEGkP,UAELlL,SAAU,SAACC,GAAD,OAAO4K,EAAW5K,EAAGuD,EAAKxH,SAEtC,iBAAM8D,UAAU,mBAAhB,2BAEF,mBAAOA,UAAU,4EAAjB,WACE,oCACMsK,EAAOqB,cAAc,+BAD3B,IAEE3L,UAAU,mBACVD,KAAK,WACLqG,QAAO,UACL2D,EAAYX,uBADP,iBACL,EAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aAFjC,aACL,EAEGoP,WAELhI,KAAK,aACLpD,SAAU,SAACC,GAAD,OAAO4K,EAAW5K,EAAGuD,EAAKxH,SAEtC,iBAAM8D,UAAU,mBAAhB,wBAEF,mBAAOA,UAAU,4EAAjB,WACE,oCACMsK,EAAOqB,cAAc,6BAD3B,IAEE3L,UAAU,mBACVD,KAAK,WACLqG,QAAO,UACL2D,EAAYX,uBADP,iBACL,EAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aAFjC,aACL,EAEGqP,SAELjI,KAAK,WACLpD,SAAU,SAACC,GAAD,OAAO4K,EAAW5K,EAAGuD,EAAKxH,SAEtC,iBAAM8D,UAAU,mBAAhB,sBAEF,mBAAOA,UAAU,4EAAjB,WACE,oCACMsK,EAAOqB,cAAc,+BAD3B,IAEE3L,UAAU,mBACVD,KAAK,WACLqG,QAAO,UACL2D,EAAYX,uBADP,iBACL,EAA6B6C,MAC3B,SAACjH,GAAD,OAAYA,EAAEkG,eAAiBxH,EAAKxH,aAFjC,aACL,EAEGsP,WAELlI,KAAK,aACLpD,SAAU,SAACC,GAAD,OAAO4K,EAAW5K,EAAGuD,EAAKxH,SAEtC,iBAAM8D,UAAU,mBAAhB,8BAvFC2D,mBAqGrB,iBAAK3D,UAAU,oBAAf,WACE,mBACED,KAAK,QACLM,QAAS,kBAAM+J,KACfpK,UAAU,qBACV,6BAA2B,SAC3BhB,SAAUsL,EAAOyB,cAAgBnC,EALnC,sBAUA,oBACE7J,KAAK,SACLC,UAAU,kBACV,6BAA2B,SAC3BhB,SAAU4K,GAAiBU,EAAOyB,eAAiBzB,EAAO4B,UAAY5B,EAAOsB,QAJ/E,WAME,iBAAM5L,UAAU,kBAAhB,qBACEsK,EAAOyB,cAAgBnC,KACvB,kBAAM5J,UAAU,qBAAhB,2BACiB,KACf,iBAAMA,UAAU,oEAOxBsK,EAAOyB,cAAgBnC,KAAkB,SAAC7C,EAAD,QC7Q3CoF,GAA2B,WAC/B,MAA8C1M,IAAvCX,EAAP,EAAOA,gBAAiBC,EAAxB,EAAwBA,mBAClBqN,GAAwBvB,EAAAA,EAAAA,IAAW/L,GACzC,GAAuClB,EAAAA,EAAAA,UAAS,GAAD,OAC1CC,EAAAA,GAAAA,WAD0C,wBACRiB,IACrC,WACE,OzBce5C,EyBdI4C,EzBehBnD,IAAAA,IAAA,UACGH,EADH,YACeU,IACnBN,MAAK,SAACC,GAAD,OAA6CA,EAASC,QAC3DF,MAAK,SAACC,GAAD,OAA8BA,EAASC,QAJ7B,IAACI,IyBZjB,CACE8B,UAAW,EACXqO,QAASD,EACTE,QAAS,SAACnC,GACRpL,OAAmB0B,GACnBzE,QAAQ8O,MAAMX,MAVb9L,EAAP,EAAOA,UAAiB8E,EAAxB,EAAkBrH,KAAYgP,EAA9B,EAA8BA,MAe9B,OAAKhM,EAIAT,GAAcyM,IAAS3H,EAIrB,MAHE,SAACwG,GAAD,CAAmBC,cAAevL,EAAW3C,KAAMyH,KAJnD,SAACwG,GAAD,CAAmBC,cAAevL,EAAW3C,KAAM,CAACQ,QAAIuE,MCrB7D8L,GAAgB,WAQpB,OAPA5O,EAAAA,EAAAA,YAAU,WAER,OADA6O,SAASC,KAAKC,UAAUC,IAAI,cACrB,WACLH,SAASC,KAAKC,UAAUE,OAAO,iBAEhC,KAGD,iCACE,gBACE5M,UAAU,0BACV9D,GAAG,oBACHR,KAAK,SACL+I,UAAW,EACX,aAAW,OALb,UAQE,gBAAKzE,UAAU,8CAAf,UAEE,iBAAKA,UAAU,gBAAf,WACE,SAACkJ,EAAD,KAEA,gBAAKlJ,UAAU,yCAAf,UACE,SAACmM,GAAD,cASR,gBAAKnM,UAAU,iCC7Bf6M,GAAkB,WACtB,IAAO/N,EAAmBW,IAAnBX,gBACP,OACE,iCACE,UAAC,KAAD,YACE,SAACuD,EAAD,KACA,SAACoG,EAAD,YAEmBhI,IAApB3B,IAAiC,SAACyN,GAAD,QAKlCO,GAAyB,kBAC7B,SAACxQ,EAAD,WACE,SAACe,EAAD,WACE,SAACsB,EAAD,WACE,SAACkO,GAAD,WCrBFE,GAAoC,CACxC,CACEnJ,MAAO,kBACP3D,KAAM,SACN+M,aAAa,EACbC,UAAU,GAEZ,CACErJ,MAAO,GACP3D,KAAM,GACN+M,aAAa,EACbC,UAAU,IAuBd,GAnBkB,WAChB,OAME,iCACE,SAAC,KAAD,CAAWC,YAAaH,GAAxB,yBACA,SAACD,GAAD","sources":["app/pages/role-management/users-list/core/_requests.ts","app/pages/role-management/users-list/core/QueryRequestProvider.tsx","app/pages/role-management/users-list/core/QueryResponseProvider.tsx","app/pages/role-management/users-list/core/ListViewProvider.tsx","app/pages/role-management/users-list/components/header/UsersListFilter.tsx","app/pages/role-management/users-list/components/Export.js","app/pages/role-management/users-list/components/header/UserListToolbar.tsx","app/pages/role-management/users-list/components/header/UsersListGrouping.tsx","app/pages/role-management/users-list/components/header/UsersListSearchComponent.tsx","app/pages/role-management/users-list/components/header/PermissionListHeader.tsx","app/pages/role-management/users-list/table/columns/CustomHeaderColumn.tsx","app/pages/role-management/users-list/table/columns/CustomRow.tsx","app/pages/role-management/users-list/table/columns/UserInfoCell.tsx","app/pages/role-management/users-list/table/columns/AssignedTo.tsx","app/pages/role-management/users-list/table/columns/UserActionsCell.tsx","app/pages/role-management/users-list/table/columns/UserSelectionCell.tsx","app/pages/role-management/users-list/table/columns/UserCustomHeader.tsx","app/pages/role-management/users-list/table/columns/UserSelectionHeader.tsx","app/pages/role-management/users-list/table/columns/_columns.tsx","app/pages/role-management/users-list/components/loading/UsersListLoading.tsx","app/pages/role-management/users-list/components/pagination/UsersListPagination.tsx","app/pages/role-management/users-list/table/UsersTable.tsx","app/pages/role-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/pages/role-management/users-list/core/_models.ts","app/pages/role-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/pages/role-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/pages/role-management/users-list/user-edit-modal/UserEditModal.tsx","app/pages/role-management/users-list/PermissionList.tsx","app/pages/role-management/RolesPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../_metronic/helpers'\r\nimport {Role, PermissionQueryResponse} from './_models'\r\n\r\n// const API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst API_URL = 'https://quiz.datacubeindia.com/common'\r\nconst ROLE_URL = `${API_URL}/role`\r\n\r\nconst getUsers = (query: string): Promise<PermissionQueryResponse> => {\r\n  return axios\r\n    .get(`${ROLE_URL}?${query}`)\r\n    .then((d: AxiosResponse<PermissionQueryResponse>) => d.data)\r\n}\r\n\r\nconst getRoles = (): Promise<PermissionQueryResponse> => {\r\n  return axios\r\n    .get(`${ROLE_URL}/roles`)\r\n    .then((d: AxiosResponse<PermissionQueryResponse>) => d.data)\r\n}\r\n\r\nconst getPermissions = (): Promise<PermissionQueryResponse> => {\r\n  return axios\r\n    .get(`${API_URL}/role/permissions`)\r\n    .then((d: AxiosResponse<PermissionQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<Role | undefined> => {\r\n  return axios\r\n    .get(`${ROLE_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<Role>>) => response.data)\r\n    .then((response: Response<Role>) => response.data)\r\n}\r\n\r\nconst createUser = (role: Role ): Promise<Role | undefined> => {\r\n  return axios\r\n    .post(ROLE_URL, role)\r\n    .then((response: AxiosResponse<Response<Role>>) => response.data)\r\n    .then((response: Response<Role>) => response.data)\r\n}\r\n\r\nconst updateUser = (role: Role): Promise<Role | undefined> => {\r\n  console.log(role, \"role\")\r\n  return axios\r\n    .put(`${ROLE_URL}/${role.id}`, role)\r\n    .then((response: AxiosResponse<Response<Role>>) => response.data)\r\n    .then((response: Response<Role>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${ROLE_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${ROLE_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser, getPermissions, getRoles}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {Role} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<Role>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {role, last_login: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Role:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Administrator'>Administrator</option>\r\n              <option value='Analyst'>Analyst</option>\r\n              <option value='Developer'>Developer</option>\r\n              <option value='Support'>Support</option>\r\n              <option value='Trial'>Trial</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Yesterday'>Yesterday</option>\r\n              <option value='20 mins ago'>20 mins ago</option>\r\n              <option value='5 hours ago'>5 hours ago</option>\r\n              <option value='2 days ago'>2 days ago</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={filterData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={resetData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import React from 'react'\nimport { CSVLink } from 'react-csv'\nimport {KTSVG} from '../../../../../_metronic/helpers'\n\nexport const ExportReactCSV = ({ csvData, fileName }) => {\n    return (\n        <button type='button' className='btn btn-light-primary me-3'>\n            <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n            <CSVLink data={csvData} filename={fileName}>Export</CSVLink>\n        </button>\n\n    )\n}","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../../core/QueryResponseProvider'\r\nimport {ExportReactCSV} from '../Export'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const users = useQueryResponseData()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      <ExportReactCSV csvData={users} fileName={'roles'} />\r\n      \r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add Role\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  console.log(debouncedSearchTerm, \"debounceSearchTerm\");\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search Role'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst PermissionListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {PermissionListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {Role} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<Role>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {Role} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<Role>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {Role} from '../../core/_models'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  user: Role\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(user.id)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      <div className='d-flex flex-column'>\r\n        <a\r\n          onClick={openEditModal}\r\n          style={{cursor: 'pointer'}}\r\n          className='text-gray-800 text-hover-primary mb-1'\r\n        >\r\n          {user.name}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\n\r\ntype Props = {\r\n  assigned_to?: any\r\n}\r\n\r\nconst AssignedTo: FC<Props> = ({assigned_to}) => (\r\n  <>\r\n    <div className='card-body d-flex flex-column justify-content-end pe-0'>\r\n      <div className='symbol-group symbol-hover flex-nowrap'>\r\n        {assigned_to?.slice(0, 5).map((item: any, i: any) => (\r\n          <div\r\n            key={i}\r\n            className='symbol symbol-35px symbol-circle'\r\n            data-bs-toggle='tooltip'\r\n            title={`${item.first_name} ${item.last_name}`}\r\n          >\r\n            {item?.profile_image == null ? (\r\n              <span\r\n                className='symbol-label text-inverse-warning fw-bolder'\r\n                style={{backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`}}\r\n              >\r\n                {item?.first_name.charAt(0)}\r\n              </span>\r\n            ) : (\r\n              <img alt='Pic' src={item.profile_image} />\r\n            )}\r\n          </div>\r\n        ))}\r\n        {assigned_to?.length > 5 && (\r\n          <a\r\n            href='#'\r\n            className='symbol symbol-35px symbol-circle'\r\n            data-bs-toggle='modal'\r\n            data-bs-target='#kt_modal_view_users'\r\n          >\r\n            <span className='symbol-label bg-light text-gray-400 fs-8 fw-bolder'>\r\n              +{assigned_to?.length - 5}\r\n            </span>\r\n          </a>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className='modal fade' id='kt_modal_view_users' tabIndex={-1} aria-hidden='true'>\r\n      <div className='modal-dialog mw-650px'>\r\n        <div className='modal-content'>\r\n          <div className='modal-header pb-0 border-0 justify-content-end'>\r\n            <div className='btn btn-sm btn-icon btn-active-color-primary' data-bs-dismiss='modal'>\r\n              <span className='svg-icon svg-icon-1'>\r\n                <svg\r\n                  xmlns='http://www.w3.org/2000/svg'\r\n                  width='24'\r\n                  height='24'\r\n                  viewBox='0 0 24 24'\r\n                  fill='none'\r\n                >\r\n                  <rect\r\n                    opacity='0.5'\r\n                    x='6'\r\n                    y='17.3137'\r\n                    width='16'\r\n                    height='2'\r\n                    rx='1'\r\n                    transform='rotate(-45 6 17.3137)'\r\n                    fill='currentColor'\r\n                  />\r\n                  <rect\r\n                    x='7.41422'\r\n                    y='6'\r\n                    width='16'\r\n                    height='2'\r\n                    rx='1'\r\n                    transform='rotate(45 7.41422 6)'\r\n                    fill='currentColor'\r\n                  />\r\n                </svg>\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='modal-body scroll-y mx-5 mx-xl-18 pt-0 pb-15'>\r\n            <div className='text-center mb-13'>\r\n              <h1 className='mb-3'>Browse Staffs</h1>\r\n              <div className='text-muted fw-bold fs-5'>\r\n                This role is assigned to following Staffs.\r\n              </div>\r\n            </div>\r\n            <div className='mb-15'>\r\n              <div className='mh-375px scroll-y me-n7 pe-7'>\r\n                {assigned_to?.map((data: any, i: any) => {\r\n                  console.log(data, \"data\")\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      className='d-flex flex-stack py-5 border-bottom border-gray-300 border-bottom-dashed'\r\n                    >\r\n                      <div className='d-flex align-items-center'>\r\n                        <div className='symbol symbol-35px symbol-circle'>\r\n                          {/* {data?.profile_image != null ? (\r\n                            <img alt='Pic' src={data?.profile_image} />\r\n                          ) : (\r\n                            <span\r\n                              className='symbol-label text-inverse-warning fw-bold'\r\n                              style={{\r\n                                backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(\r\n                                  16\r\n                                )}`,\r\n                              }}\r\n                            >\r\n                              {data?.first_name.charAt(0)}\r\n                            </span>\r\n                          )} */}\r\n                        </div>\r\n                        <div className='ms-6'>\r\n                          <a\r\n                            href='#'\r\n                            className='d-flex align-items-center fs-5 fw-bolder text-dark text-hover-primary'\r\n                          >\r\n                            {/* {data?.first_name} {data?.last_name} */}\r\n                            <span className='badge badge-light fs-8 fw-bold ms-2'>\r\n                              {data?.admin == 1 ? 'Admin' : ''}\r\n                            </span>\r\n                          </a>\r\n                          {/* <div className='fw-bold text-muted'>{data?.email}</div> */}\r\n                        </div>\r\n                      </div>\r\n                      <div className='d-flex'>\r\n                        <div className='text-end'>\r\n                          <div className='fs-5 fw-bolder text-dark'>$23,000</div>\r\n                          {/* <div className='fs-7 text-muted'>{data?.phone_number}</div> */}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\nexport {AssignedTo}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\nimport Swal from 'sweetalert2'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      Swal.fire({\r\n        title: 'Success!',\r\n        text: `Role Deleted!`,\r\n        icon: 'success',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <i className='bi bi-three-dots-vertical fs-5'></i>\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => {\r\n              Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!',\r\n              }).then(async (result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                  await deleteItem.mutateAsync()\r\n                }\r\n              })\r\n            }}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {Role} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<Role>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {Role} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<Role>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {AssignedTo} from './AssignedTo'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {Role} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<Role>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n \r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Assigned To' className='min-w-125px' />\r\n    ),\r\n    id: 'assigned_to',\r\n    Cell: ({...props}) => <AssignedTo assigned_to={props.data[props.row.index].assigned_to} />,\r\n  },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Core Role' className='min-w-125px' />\r\n  //   ),\r\n  //   id: 'core_permission',\r\n  //   Cell: ({...props}) => <UserTwoStepsCell core_permission={props.data[props.row.index].core_permission} />,\r\n  // },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from './columns/CustomHeaderColumn'\r\nimport {CustomRow} from './columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {Role} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<Role>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<Role>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add a Role</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../_metronic/helpers'\r\nexport type Role = {\r\n  id?: ID\r\n  name?: string,\r\n  role_permission?: any[]\r\n}\r\n\r\nexport type PermissionQueryResponse = Response<Array<Role>>\r\n\r\nexport const initialRole: Role = {\r\n  name: '',\r\n  role_permission: []\r\n}\r\n","import {FC, useEffect, useMemo, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../_metronic/helpers'\r\nimport {initialRole, Role} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser, getPermissions} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport Swal from 'sweetalert2'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  role: Role\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({role, isUserLoading}) => {\r\n  console.log(role, 'role')\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n  const [permissions, setPermissions] = useState<any[]>([])\r\n  const [roleForEdit, setRoleForEdit] = useState<Role>({\r\n    ...role,\r\n    name: role.name || initialRole.name,\r\n    role_permission: role.role_permission || initialRole.role_permission,\r\n  })\r\n\r\n  useEffect(() => {\r\n    getPermissions()\r\n      .then((data) => {\r\n        let newData: any\r\n        newData = data.data\r\n        setPermissions(newData)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err, 'err')\r\n      })\r\n  }, [])\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: roleForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: `Role ${values.id ? 'Updated' : 'Created'}!`,\r\n          icon: 'success',\r\n          confirmButtonText: 'Okay',\r\n        })\r\n      }\r\n    },\r\n  })\r\n\r\n  const onCheckbox = (e: any, id: number) => {\r\n    const {checked, name} = e.target\r\n    let perm: any = roleForEdit.role_permission\r\n    const index = perm?.findIndex((x: any) => x.permission_id == id)\r\n    if (index !== -1) {\r\n      perm[index] = {...perm[index], [name]: checked}\r\n    } else {\r\n      perm?.push({\r\n        permission_id: id,\r\n        can_view: name == 'can_view' && checked ? true : false,\r\n        can_view_own: name == 'can_view_own' && checked ? true : false,\r\n        can_create: name == 'can_create' && checked ? true : false,\r\n        can_edit: name == 'can_edit' && checked ? true : false,\r\n        can_delete: name == 'can_delete' && checked ? true : false,\r\n      })\r\n    }\r\n    setRoleForEdit({...roleForEdit, role_permission: perm})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_role_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_role_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_role_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          <div className='fv-row mb-7'>\r\n            <label className='required fw-bold fs-6 mb-2'>Role Name</label>\r\n            <input\r\n              placeholder='Enter a role name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className='fv-row'>\r\n            <label className='fw-bold fs-6 mb-2'>Role Permissions</label>\r\n            <div className='table-responsive'>\r\n              <table className='table align-middle table-row-dashed fs-6 gy-5'>\r\n                <tbody className='text-gray-600 fw-bold'>\r\n                  {permissions.map((item, i) => (\r\n                    <tr key={i}>\r\n                      <td className='text-gray-800'>{item.name}</td>\r\n                      <td style={{paddingLeft: 40}}>\r\n                        <div className='d-flex'>\r\n                          <label className='form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-15'>\r\n                            <input\r\n                              {...formik.getFieldProps('role_permission.can_view')}\r\n                              className='form-check-input'\r\n                              type='checkbox'\r\n                              checked={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_view\r\n                              }\r\n                              disabled={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_view_own == true\r\n                              }\r\n                              name='can_view'\r\n                              onChange={(e) => onCheckbox(e, item.id)}\r\n                            />\r\n                            <span className='form-check-label'>View</span>\r\n                          </label>\r\n                          <label className='form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-15'>\r\n                            <input\r\n                              {...formik.getFieldProps('role_permission.can_view_own')}\r\n                              className='form-check-input'\r\n                              type='checkbox'\r\n                              checked={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_view_own\r\n                              }\r\n                              name='can_view_own'\r\n                              disabled={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_view == true\r\n                              }\r\n                              onChange={(e) => onCheckbox(e, item.id)}\r\n                            />\r\n                            <span className='form-check-label'>View(Own)</span>\r\n                          </label>\r\n                          <label className='form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-15'>\r\n                            <input\r\n                              {...formik.getFieldProps('role_permission.can_create')}\r\n                              className='form-check-input'\r\n                              type='checkbox'\r\n                              checked={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_create\r\n                              }\r\n                              name='can_create'\r\n                              onChange={(e) => onCheckbox(e, item.id)}\r\n                            />\r\n                            <span className='form-check-label'>Create</span>\r\n                          </label>\r\n                          <label className='form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-15'>\r\n                            <input\r\n                              {...formik.getFieldProps('role_permission.can_edit')}\r\n                              className='form-check-input'\r\n                              type='checkbox'\r\n                              checked={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_edit\r\n                              }\r\n                              name='can_edit'\r\n                              onChange={(e) => onCheckbox(e, item.id)}\r\n                            />\r\n                            <span className='form-check-label'>Edit</span>\r\n                          </label>\r\n                          <label className='form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-15'>\r\n                            <input\r\n                              {...formik.getFieldProps('role_permission.can_delete')}\r\n                              className='form-check-input'\r\n                              type='checkbox'\r\n                              checked={\r\n                                roleForEdit.role_permission?.find(\r\n                                  (x: any) => x.permission_id == item.id\r\n                                )?.can_delete\r\n                              }\r\n                              name='can_delete'\r\n                              onChange={(e) => onCheckbox(e, item.id)}\r\n                            />\r\n                            <span className='form-check-label'>Delete</span>\r\n                          </label>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {isLoading, data: user, error} = useQuery(\r\n    `${QUERIES.USERS_LIST}-permissions-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} role={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-900px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {PermissionListHeader} from './components/header/PermissionListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../_metronic/helpers'\r\n\r\nconst PermissionsList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <PermissionListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst PermissionsListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <PermissionsList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {PermissionsListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\r\nimport {PermissionsListWrapper} from './users-list/PermissionList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Role management',\r\n    path: '/roles',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst RolesPage = () => {\r\n  return (\r\n    // <Routes>\r\n    //   <Route element={<Outlet />}>\r\n    //     <Route\r\n    //       path='roles'\r\n    //       element={\r\n    <>\r\n      <PageTitle breadcrumbs={usersBreadcrumbs}>Roles list</PageTitle>\r\n      <PermissionsListWrapper />\r\n    </>\r\n    //       }\r\n    //     />\r\n    //   </Route>\r\n    //   <Route index element={<Navigate to='/apps/role-management/roles' />} />\r\n    // </Routes>\r\n  )\r\n}\r\n\r\nexport default RolesPage\r\n"],"names":["API_URL","ROLE_URL","createUser","role","axios","then","response","data","updateUser","console","log","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","setRole","lastLogin","setLastLogin","MenuComponent","type","className","path","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","ExportReactCSV","csvData","fileName","CSVLink","filename","UsersListToolbar","users","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","PermissionListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","user","style","cursor","name","AssignedTo","assigned_to","slice","item","i","title","first_name","last_name","profile_image","backgroundColor","Math","floor","random","toString","charAt","alt","src","href","tabIndex","xmlns","width","height","viewBox","fill","opacity","x","y","rx","transform","admin","UserActionsCell","deleteItem","userId","Swal","text","icon","confirmButtonText","showCancelButton","confirmButtonColor","cancelButtonColor","result","isConfirmed","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","tableProps","isSelectedForSorting","sort","order","UserSelectionHeader","usersColumns","props","Cell","index","UsersListLoading","borderRadius","boxShadow","color","fontWeight","margin","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","label","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","colSpan","UserEditModalHeader","initialRole","role_permission","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","permissions","setPermissions","roleForEdit","setRoleForEdit","newData","catch","err","cancel","withRefresh","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","error","onCheckbox","perm","findIndex","permission_id","push","can_view","can_view_own","can_create","can_edit","can_delete","handleSubmit","noValidate","getFieldProps","touched","errors","autoComplete","isSubmitting","paddingLeft","find","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","UserEditModal","document","body","classList","add","remove","PermissionsList","PermissionsListWrapper","usersBreadcrumbs","isSeparator","isActive","breadcrumbs"],"sourceRoot":""}